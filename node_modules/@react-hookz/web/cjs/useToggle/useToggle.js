"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useToggle = void 0;
var react_1 = require("react");
var resolveHookState_1 = require("../util/resolveHookState");
var __1 = require("..");
/**
 * Like `useSafeState`, but can only become `true` or `false`.
 *
 * State setter, in case called without arguments, will change the state to opposite.
 *
 * @param initialState Initial toggle state, defaults to false.
 */
function useToggle(initialState) {
    if (initialState === void 0) { initialState = false; }
    // We dont use useReducer (which would end up with less code), because exposed
    // action does not provide functional updates feature.
    // Therefore we have to create and expose our own state setter with
    // toggle logic.
    var _a = (0, __1.useSafeState)(initialState), state = _a[0], setState = _a[1];
    return [
        state,
        (0, react_1.useCallback)(function (nextState) {
            setState(function (prevState) {
                if (typeof nextState === 'undefined') {
                    return !prevState;
                }
                return Boolean((0, resolveHookState_1.resolveHookState)(nextState, prevState));
            });
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []),
    ];
}
exports.useToggle = useToggle;
