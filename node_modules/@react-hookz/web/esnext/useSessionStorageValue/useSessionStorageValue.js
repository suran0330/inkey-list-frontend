import { useStorageValue, } from "../useStorageValue/useStorageValue.js";
import { isBrowser, noop } from "../util/const.js";
let IS_SESSION_STORAGE_AVAILABLE = false;
try {
    IS_SESSION_STORAGE_AVAILABLE = isBrowser && !!window.sessionStorage;
}
catch {
    // no need to test this flag leads to noop behaviour
    /* istanbul ignore next */
    IS_SESSION_STORAGE_AVAILABLE = false;
}
/**
 * Manages a single sessionStorage key.
 *
 * @param key Storage key to manage
 * @param defaultValue Default value to yield in case the key is not in storage
 * @param options
 */
export const useSessionStorageValue = IS_SESSION_STORAGE_AVAILABLE
    ? (key, defaultValue = null, options = {}) => useStorageValue(sessionStorage, key, defaultValue, options)
    : (key, defaultValue = null, options = {}) => {
        /* istanbul ignore next */
        if (isBrowser && process.env.NODE_ENV === 'development') {
            // eslint-disable-next-line no-console
            console.warn('SessionStorage is not available in this environment');
        }
        return [undefined, noop, noop, noop];
    };
