{"version":3,"file":"buildAction2.js","sources":["../../src/_internal/cli/actions/build/build.telemetry.ts","../../src/_internal/cli/actions/build/buildAction.ts"],"sourcesContent":["import {defineTrace} from '@sanity/telemetry'\n\nexport const BuildTrace = defineTrace<{outputSize: number}>({\n  name: 'Studio Build Completed',\n  version: 0,\n  description: 'A Studio build completed',\n})\n","import path from 'node:path'\n\nimport chalk from 'chalk'\nimport {info} from 'log-symbols'\nimport semver from 'semver'\nimport {noopLogger} from '@sanity/telemetry'\nimport {rimraf} from 'rimraf'\nimport type {CliCommandArguments, CliCommandContext} from '@sanity/cli'\n\nimport {buildStaticFiles} from '../../server'\nimport {checkStudioDependencyVersions} from '../../util/checkStudioDependencyVersions'\nimport {checkRequiredDependencies} from '../../util/checkRequiredDependencies'\nimport {getTimer} from '../../util/timing'\nimport {BuildTrace} from './build.telemetry'\nimport {buildVendorDependencies} from '../../server/buildVendorDependencies'\nimport {compareDependencyVersions} from '../../util/compareDependencyVersions'\nimport {getStudioAutoUpdateImportMap} from '../../util/getAutoUpdatesImportMap'\nimport {shouldAutoUpdate} from '../../util/shouldAutoUpdate'\nimport {formatModuleSizes, sortModulesBySize} from '../../util/moduleFormatUtils'\nimport {upgradePackages} from '../../util/packageManager/upgradePackages'\nimport {getPackageManagerChoice} from '../../util/packageManager/packageManagerChoice'\n\nexport interface BuildSanityStudioCommandFlags {\n  'yes'?: boolean\n  'y'?: boolean\n  'minify'?: boolean\n  'stats'?: boolean\n  'source-maps'?: boolean\n  'auto-updates'?: boolean\n}\n\nexport default async function buildSanityStudio(\n  args: CliCommandArguments<BuildSanityStudioCommandFlags>,\n  context: CliCommandContext,\n  overrides?: {basePath?: string},\n): Promise<{didCompile: boolean}> {\n  const timer = getTimer()\n  const {output, prompt, workDir, cliConfig, telemetry = noopLogger} = context\n  const flags: BuildSanityStudioCommandFlags = {\n    'minify': true,\n    'stats': false,\n    'source-maps': false,\n    ...args.extOptions,\n  }\n\n  /**\n   * Unattended mode means that if there are any prompts it will use `YES` for them but will no change anything that doesn't have a prompt\n   */\n  const unattendedMode = Boolean(flags.yes || flags.y)\n  const defaultOutputDir = path.resolve(path.join(workDir, 'dist'))\n  const outputDir = path.resolve(args.argsWithoutOptions[0] || defaultOutputDir)\n\n  await checkStudioDependencyVersions(workDir)\n\n  // If the check resulted in a dependency install, the CLI command will be re-run,\n  // thus we want to exit early\n  const {didInstall, installedSanityVersion} = await checkRequiredDependencies(context)\n  if (didInstall) {\n    return {didCompile: false}\n  }\n\n  const autoUpdatesEnabled = shouldAutoUpdate({flags, cliConfig, output})\n\n  // Get the version without any tags if any\n  const coercedSanityVersion = semver.coerce(installedSanityVersion)?.version\n  if (autoUpdatesEnabled && !coercedSanityVersion) {\n    throw new Error(`Failed to parse installed Sanity version: ${installedSanityVersion}`)\n  }\n  const version = encodeURIComponent(`^${coercedSanityVersion}`)\n  const autoUpdatesImports = getStudioAutoUpdateImportMap(version)\n\n  if (autoUpdatesEnabled) {\n    output.print(`${info} Building with auto-updates enabled`)\n\n    // Check the versions\n    const result = await compareDependencyVersions(autoUpdatesImports, workDir)\n\n    // If it is in unattended mode, we don't want to prompt\n    if (result?.length && !unattendedMode) {\n      const choice = await prompt.single({\n        type: 'list',\n        message: chalk.yellow(\n          `The following local package versions are different from the versions currently served at runtime.\\n` +\n            `When using auto updates, we recommend that you test locally with the same versions before deploying. \\n\\n` +\n            `${result.map((mod) => ` - ${mod.pkg} (local version: ${mod.installed}, runtime version: ${mod.remote})`).join('\\n')} \\n\\n` +\n            `Do you want to upgrade local versions before deploying?`,\n        ),\n        choices: [\n          {\n            type: 'choice',\n            value: 'upgrade-and-proceed',\n            name: `Upgrade and proceed with ${args.groupOrCommand}`,\n          },\n          {\n            type: 'choice',\n            value: 'upgrade',\n            name: `Upgrade only. You will need to run the ${args.groupOrCommand} command again`,\n          },\n          {type: 'choice', name: 'Cancel', value: 'cancel'},\n        ],\n        default: 'upgrade-and-proceed',\n      })\n\n      if (choice === 'cancel') {\n        return {didCompile: false}\n      }\n\n      if (choice === 'upgrade' || choice === 'upgrade-and-proceed') {\n        await upgradePackages(\n          {\n            packageManager: (await getPackageManagerChoice(workDir, {interactive: false})).chosen,\n            packages: result.map((res) => [res.pkg, res.remote]),\n          },\n          context,\n        )\n\n        if (choice !== 'upgrade-and-proceed') {\n          return {didCompile: false}\n        }\n      }\n    }\n  }\n\n  const envVarKeys = getSanityEnvVars()\n  if (envVarKeys.length > 0) {\n    output.print(\n      '\\nIncluding the following environment variables as part of the JavaScript bundle:',\n    )\n    envVarKeys.forEach((key) => output.print(`- ${key}`))\n    output.print('')\n  }\n\n  let shouldClean = true\n  if (outputDir !== defaultOutputDir && !unattendedMode) {\n    shouldClean = await prompt.single({\n      type: 'confirm',\n      message: `Do you want to delete the existing directory (${outputDir}) first?`,\n      default: true,\n    })\n  }\n\n  // Determine base path for built studio\n  let basePath = '/'\n  const envBasePath = process.env.SANITY_STUDIO_BASEPATH\n  const configBasePath = cliConfig?.project?.basePath\n\n  // Allow `sanity deploy` to override base path\n  if (overrides?.basePath) {\n    basePath = overrides.basePath\n  } else if (envBasePath) {\n    // Environment variable (SANITY_STUDIO_BASEPATH)\n    basePath = envBasePath\n  } else if (configBasePath) {\n    // `sanity.cli.ts`\n    basePath = configBasePath\n  }\n\n  if (envBasePath && configBasePath) {\n    output.warn(\n      `Overriding configured base path (${configBasePath}) with value from environment variable (${envBasePath})`,\n    )\n  }\n\n  let spin\n\n  if (shouldClean) {\n    timer.start('cleanOutputFolder')\n    spin = output.spinner('Clean output folder').start()\n    await rimraf(outputDir)\n    const cleanDuration = timer.end('cleanOutputFolder')\n    spin.text = `Clean output folder (${cleanDuration.toFixed()}ms)`\n    spin.succeed()\n  }\n\n  spin = output.spinner(`Build Sanity Studio`).start()\n\n  const trace = telemetry.trace(BuildTrace)\n  trace.start()\n\n  let importMap\n\n  if (autoUpdatesEnabled) {\n    importMap = {\n      imports: {\n        ...(await buildVendorDependencies({cwd: workDir, outputDir, basePath})),\n        ...autoUpdatesImports,\n      },\n    }\n  }\n\n  try {\n    timer.start('bundleStudio')\n\n    const bundle = await buildStaticFiles({\n      cwd: workDir,\n      outputDir,\n      basePath,\n      sourceMap: Boolean(flags['source-maps']),\n      minify: Boolean(flags.minify),\n      vite: cliConfig && 'vite' in cliConfig ? cliConfig.vite : undefined,\n      importMap,\n      reactCompiler:\n        cliConfig && 'reactCompiler' in cliConfig ? cliConfig.reactCompiler : undefined,\n      entry: cliConfig && 'app' in cliConfig ? cliConfig.app?.entry : undefined,\n    })\n\n    trace.log({\n      outputSize: bundle.chunks\n        .flatMap((chunk) => chunk.modules.flatMap((mod) => mod.renderedLength))\n        .reduce((sum, n) => sum + n, 0),\n    })\n    const buildDuration = timer.end('bundleStudio')\n\n    spin.text = `Build Sanity Studio (${buildDuration.toFixed()}ms)`\n    spin.succeed()\n\n    trace.complete()\n    if (flags.stats) {\n      output.print('\\nLargest module files:')\n      output.print(formatModuleSizes(sortModulesBySize(bundle.chunks).slice(0, 15)))\n    }\n  } catch (err) {\n    spin.fail()\n    trace.error(err)\n    throw err\n  }\n\n  return {didCompile: true}\n}\n\n// eslint-disable-next-line no-process-env\nfunction getSanityEnvVars(env: Record<string, string | undefined> = process.env): string[] {\n  return Object.keys(env).filter((key) => key.toUpperCase().startsWith('SANITY_STUDIO_'))\n}\n"],"names":["BuildTrace","defineTrace","name","version","description","buildSanityStudio","args","context","overrides","timer","getTimer","output","prompt","workDir","cliConfig","telemetry","noopLogger","flags","extOptions","unattendedMode","Boolean","yes","y","defaultOutputDir","path","resolve","join","outputDir","argsWithoutOptions","checkStudioDependencyVersions","didInstall","installedSanityVersion","checkRequiredDependencies","didCompile","autoUpdatesEnabled","shouldAutoUpdate","coercedSanityVersion","semver","coerce","Error","encodeURIComponent","autoUpdatesImports","getStudioAutoUpdateImportMap","print","info","result","compareDependencyVersions","length","choice","single","type","message","chalk","yellow","map","mod","pkg","installed","remote","choices","value","groupOrCommand","default","upgradePackages","packageManager","getPackageManagerChoice","interactive","chosen","packages","res","envVarKeys","getSanityEnvVars","forEach","key","shouldClean","basePath","envBasePath","process","env","SANITY_STUDIO_BASEPATH","configBasePath","project","warn","spin","start","spinner","rimraf","cleanDuration","end","text","toFixed","succeed","trace","importMap","imports","buildVendorDependencies","cwd","bundle","buildStaticFiles","sourceMap","minify","vite","undefined","reactCompiler","entry","app","log","outputSize","chunks","flatMap","chunk","modules","renderedLength","reduce","sum","n","buildDuration","complete","stats","formatModuleSizes","sortModulesBySize","slice","err","fail","error","Object","keys","filter","toUpperCase","startsWith"],"mappings":"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"}