{"version":3,"file":"index.cjs","sources":["../src/editor-event-listener.tsx","../src/internal-utils/compound-client-rect.ts","../src/internal-utils/debug.ts","../src/internal-utils/drag-selection.ts","../src/internal-utils/values.ts","../src/internal-utils/slate-utils.ts","../src/internal-utils/event-position.ts","../src/internal-utils/paths.ts","../src/internal-utils/ranges.ts","../src/internal-utils/selection.ts","../src/internal-utils/selection-elements.ts","../src/internal-utils/weakMaps.ts","../src/editor/editor-actor-context.ts","../src/editor/components/drop-indicator.tsx","../src/editor/components/render-default-object.tsx","../src/editor/key-generator.ts","../src/priority/priority.types.ts","../src/priority/priority.core.ts","../src/behaviors/behavior.core.block-element.ts","../src/editor/components/use-core-block-element-behaviors.ts","../src/editor/components/render-block-object.tsx","../src/editor/components/render-inline-object.tsx","../src/editor/components/render-text-block.tsx","../src/editor/components/render-element.tsx","../src/editor/hooks/usePortableTextEditor.ts","../src/internal-utils/stop-actor.ts","../src/converters/converter.json.ts","../src/converters/converter.portable-text.ts","../src/converters/converter.text-html.ts","../src/converters/converter.text-plain.ts","../src/converters/converters.core.ts","../src/internal-utils/schema.ts","../src/internal-utils/create-placeholder-block.ts","../src/editor/get-active-annotations.ts","../src/editor/get-active-decorators.ts","../src/operations/behavior.operation.insert.text.ts","../../../node_modules/.pnpm/@portabletext+toolkit@2.0.17/node_modules/@portabletext/toolkit/dist/index.js","../src/internal-utils/sibling-utils.ts","../src/internal-utils/withChanges.ts","../src/internal-utils/withUndoRedo.ts","../src/editor/editor-selector.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../../../node_modules/.pnpm/@sanity+diff-match-patch@3.2.0/node_modules/@sanity/diff-match-patch/dist/index.js","../src/editor/with-undo-step.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/operations/behavior.operation.annotation.add.ts","../src/operations/behavior.operation.annotation.remove.ts","../src/operations/behavior.operation.block.set.ts","../src/operations/behavior.operation.block.unset.ts","../src/operations/behavior.operation.decorator.add.ts","../src/operations/behavior.operation.delete.ts","../src/operations/behavior.operation.insert-inline-object.ts","../src/operations/behavior.operation.insert-span.ts","../src/operations/behavior.operation.insert.block.ts","../src/operations/behavior.operation.move.backward.ts","../src/operations/behavior.operation.move.block.ts","../src/operations/behavior.operation.move.forward.ts","../src/operations/behavior.operation.select.ts","../src/operations/behavior.operations.ts","../src/editor/with-applying-behavior-operations.ts","../src/editor/plugins/create-with-event-listeners.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/internal-utils/applyPatch.ts","../src/internal-utils/operation-to-patches.ts","../src/internal-utils/withoutPatching.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithPortableTextBlockStyle.ts","../src/editor/plugins/createWithPortableTextSelections.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/internal-utils/mark-state.ts","../src/editor/plugins/slate-plugin.update-mark-state.ts","../src/internal-utils/portable-text-node.ts","../src/internal-utils/apply-operation-to-portable-text.ts","../src/editor/plugins/slate-plugin.update-value.ts","../src/editor/plugins/with-plugins.ts","../src/editor/create-slate-editor.tsx","../src/behaviors/behavior.core.annotations.ts","../src/internal-utils/is-hotkey.ts","../src/behaviors/behavior.core.block-objects.ts","../src/behaviors/behavior.core.decorators.ts","../src/behaviors/behavior.core.dnd.ts","../src/behaviors/behavior.core.insert-break.ts","../src/behaviors/behavior.core.lists.ts","../src/behaviors/behavior.core.ts","../src/behaviors/behavior.abstract.annotation.ts","../src/behaviors/behavior.abstract.decorator.ts","../src/behaviors/behavior.abstract.delete.ts","../src/behaviors/behavior.abstract.insert.ts","../src/internal-utils/key-is.ts","../src/behaviors/behavior.abstract.keyboard.ts","../src/behaviors/behavior.abstract.list-item.ts","../src/behaviors/behavior.abstract.move.ts","../src/behaviors/behavior.abstract.select.ts","../src/behaviors/behavior.abstract.split.ts","../src/behaviors/behavior.abstract.style.ts","../src/behaviors/behavior.abstract.ts","../src/behaviors/behavior.types.event.ts","../src/behaviors/behavior.perform-event.ts","../src/priority/priority.sort.ts","../src/editor/editor-snapshot.ts","../src/editor/editor-machine.ts","../src/editor/legacy-schema.ts","../src/editor/editor-schema.ts","../src/editor/mutation-machine.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/editor/relay-machine.ts","../src/internal-utils/validateValue.ts","../src/editor/sync-machine.ts","../src/editor/create-editor.ts","../src/editor/hooks/usePortableTextEditorSelection.tsx","../src/editor/relay-actor-context.ts","../src/editor/route-events-to-changes.tsx","../src/editor/PortableTextEditor.tsx","../src/editor/components/render-span.tsx","../src/editor/components/render-leaf.tsx","../src/editor/components/render-text.tsx","../src/editor/plugins/createWithHotKeys.ts","../src/editor/range-decorations-machine.ts","../src/editor/Editable.tsx","../src/internal-utils/use-constant.ts","../src/editor/editor-provider.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor/relay-machine'\nimport {useEditor} from './editor/use-editor'\n\n/**\n * @public\n * @deprecated\n * This component has been renamed. Use `EventListenerPlugin` instead.\n *\n * ```\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n * ```\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor])\n\n  return null\n}\n","export function getCompoundClientRect(nodes: Array<Node>): DOMRect {\n  if (nodes.length === 0) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  const elements = nodes.filter((node) => node instanceof Element)\n\n  const firstRect = elements.at(0)?.getBoundingClientRect()\n\n  if (!firstRect) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  let left = firstRect.left\n  let top = firstRect.top\n  let right = firstRect.right\n  let bottom = firstRect.bottom\n\n  for (let i = 1; i < elements.length; i++) {\n    const rect = elements[i].getBoundingClientRect()\n    left = Math.min(left, rect.left)\n    top = Math.min(top, rect.top)\n    right = Math.max(right, rect.right)\n    bottom = Math.max(bottom, rect.bottom)\n  }\n\n  return new DOMRect(left, top, right - left, bottom - top)\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import type {EditorSnapshot} from '..'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {EventPosition} from './event-position'\n\n/**\n * Given the current editor `snapshot` and an `eventSelection` representing\n * where the drag event origins from, this function calculates the selection\n * in the editor that should be dragged.\n */\nexport function getDragSelection({\n  eventSelection,\n  snapshot,\n}: {\n  eventSelection: EventPosition['selection']\n  snapshot: EditorSnapshot\n}) {\n  let dragSelection = eventSelection\n\n  const draggedInlineObject = selectors.getFocusInlineObject({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggedInlineObject) {\n    return dragSelection\n  }\n\n  const draggingCollapsedSelection = selectors.isSelectionCollapsed({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedTextBlock = selectors.getFocusTextBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedSpan = selectors.getFocusSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggingCollapsedSelection && draggedTextBlock && draggedSpan) {\n    // Looks like we are dragging an empty span\n    // Let's drag the entire block instead\n    dragSelection = {\n      anchor: utils.getBlockStartPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n      focus: utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n    }\n  }\n\n  const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n\n  if (\n    snapshot.context.selection &&\n    selectors.isSelectionExpanded(snapshot) &&\n    selectedBlocks.length > 1\n  ) {\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return dragSelection\n    }\n\n    const selectionStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n\n    const eventSelectionInsideBlocks = selectors.isOverlappingSelection(\n      eventSelection,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {anchor: selectionStartPoint, focus: selectionEndPoint},\n      },\n    })\n\n    if (eventSelectionInsideBlocks) {\n      dragSelection = {\n        anchor: selectionStartPoint,\n        focus: selectionEndPoint,\n      }\n    }\n  }\n\n  return dragSelection\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: EditorSchema},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: [\n                  {\n                    _key: VOID_CHILD_KEY,\n                    _type: 'span',\n                    text: '',\n                    marks: [],\n                  },\n                ],\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].name\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: [\n            {\n              _key: VOID_CHILD_KEY,\n              _type: 'span',\n              text: '',\n              marks: [],\n            },\n          ],\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: EditorSchema,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].name &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Element, Node, Range, type Path, type Point} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from './values'\n\nexport function getBlockPath({\n  editor,\n  _key,\n}: {\n  editor: PortableTextSlateEditor\n  _key: string\n}): [number] | undefined {\n  const [, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) => n._key === _key,\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  const blockIndex = blockPath?.at(0)\n\n  if (blockIndex === undefined) {\n    return undefined\n  }\n\n  return [blockIndex]\n}\n\nexport function getAnchorBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.anchor.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.focus.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusSpan({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: PortableTextSpan, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const [node, path] = Editor.node(editor, editor.selection.focus.path)\n\n    if (editor.isTextSpan(node)) {\n      return [node, path]\n    }\n  } catch {\n    return [undefined, undefined]\n  }\n\n  return [undefined, undefined]\n}\n\nexport function getSelectedSpans({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): Array<[node: PortableTextSpan, path: Path]> {\n  if (!editor.selection) {\n    return []\n  }\n\n  try {\n    return Array.from(\n      Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextSpan(node),\n      }),\n    )\n  } catch {\n    return []\n  }\n}\n\nexport function getSelectionStartBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionStartPoint = Range.start(editor.selection)\n\n  return getPointBlock({editor, point: selectionStartPoint})\n}\n\nexport function getSelectionEndBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionEndPoint = Range.end(editor.selection)\n\n  return getPointBlock({editor, point: selectionEndPoint})\n}\n\nexport function getPointBlock({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  try {\n    const [block] = Editor.node(editor, point.path.slice(0, 1)) ?? [\n      undefined,\n      undefined,\n    ]\n    return block ? [block, point.path.slice(0, 1)] : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusChild({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n  const childIndex = editor.selection?.focus.path.at(1)\n\n  if (!focusBlock || !focusBlockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const focusChild = Node.child(focusBlock, childIndex)\n\n    return focusChild\n      ? [focusChild, [...focusBlockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nfunction getPointChild({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [block, blockPath] = getPointBlock({editor, point})\n  const childIndex = point.path.at(1)\n\n  if (!block || !blockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const pointChild = Node.child(block, childIndex)\n\n    return pointChild\n      ? [pointChild, [...blockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFirstBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const firstPoint = Editor.start(editor, [])\n  const firstBlockPath = firstPoint.path.at(0)\n\n  try {\n    return firstBlockPath !== undefined\n      ? (Editor.node(editor, [firstBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getLastBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const lastPoint = Editor.end(editor, [])\n  const lastBlockPath = lastPoint.path.at(0)\n\n  try {\n    return lastBlockPath !== undefined\n      ? (Editor.node(editor, [lastBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getNodeBlock({\n  editor,\n  schema,\n  node,\n}: {\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n  node: Node\n}) {\n  if (Editor.isEditor(node)) {\n    return undefined\n  }\n\n  if (isBlockElement({editor, schema}, node)) {\n    return elementToBlock({schema, element: node})\n  }\n\n  const parent = Array.from(\n    Editor.nodes(editor, {\n      mode: 'highest',\n      at: [],\n      match: (n) =>\n        isBlockElement({editor, schema}, n) &&\n        n.children.some((child) => child._key === node._key),\n    }),\n  )\n    .at(0)\n    ?.at(0)\n\n  return Element.isElement(parent)\n    ? elementToBlock({\n        schema,\n        element: parent,\n      })\n    : undefined\n}\n\nfunction elementToBlock({\n  schema,\n  element,\n}: {\n  schema: EditorSchema\n  element: Element\n}) {\n  return fromSlateValue([element], schema.block.name)?.at(0)\n}\n\nfunction isBlockElement(\n  {editor, schema}: {editor: PortableTextSlateEditor; schema: EditorSchema},\n  node: Node,\n): node is Element {\n  return (\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    (schema.block.name === node._type ||\n      schema.blockObjects.some(\n        (blockObject) => blockObject.name === node._type,\n      ))\n  )\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n\nexport function slateRangeToSelection({\n  schema,\n  editor,\n  range,\n}: {\n  schema: EditorSchema\n  editor: PortableTextSlateEditor\n  range: Range\n}): EditorSelection {\n  const [anchorBlock] = getPointBlock({\n    editor,\n    point: range.anchor,\n  })\n  const [focusBlock] = getPointBlock({\n    editor,\n    point: range.focus,\n  })\n\n  if (!anchorBlock || !focusBlock) {\n    return null\n  }\n\n  const [anchorChild] =\n    anchorBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.anchor,\n        })\n      : [undefined, undefined]\n  const [focusChild] =\n    focusBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.focus,\n        })\n      : [undefined, undefined]\n\n  const selection: EditorSelection = {\n    anchor: {\n      path: [{_key: anchorBlock._key}],\n      offset: range.anchor.offset,\n    },\n    focus: {\n      path: [{_key: focusBlock._key}],\n      offset: range.focus.offset,\n    },\n    backward: Range.isBackward(range),\n  }\n\n  if (anchorChild) {\n    selection.anchor.path.push('children')\n    selection.anchor.path.push({_key: anchorChild._key})\n  }\n\n  if (focusChild) {\n    selection.focus.path.push('children')\n    selection.focus.path.push({_key: focusChild._key})\n  }\n\n  return selection\n}\n","import {Editor, type BaseRange, type Node} from 'slate'\nimport {DOMEditor, isDOMNode} from 'slate-dom'\nimport type {EditorSchema, EditorSelection} from '..'\nimport type {EditorActor} from '../editor/editor-machine'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport * as utils from '../utils'\nimport {\n  getFirstBlock,\n  getLastBlock,\n  getNodeBlock,\n  slateRangeToSelection,\n} from './slate-utils'\n\nexport type EventPosition = {\n  block: 'start' | 'end'\n  /**\n   * Did the event origin from the editor DOM node itself or from a child node?\n   */\n  isEditor: boolean\n  selection: NonNullable<EditorSelection>\n}\nexport type EventPositionBlock = EventPosition['block']\n\nexport function getEventPosition({\n  editorActor,\n  slateEditor,\n  event,\n}: {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPosition | undefined {\n  if (editorActor.getSnapshot().matches({setup: 'setting up'})) {\n    return undefined\n  }\n\n  const node = getEventNode({slateEditor, event})\n\n  if (!node) {\n    return undefined\n  }\n\n  const block = getNodeBlock({\n    editor: slateEditor,\n    schema: editorActor.getSnapshot().context.schema,\n    node,\n  })\n\n  const positionBlock = getEventPositionBlock({node, slateEditor, event})\n  const selection = getEventSelection({\n    schema: editorActor.getSnapshot().context.schema,\n    slateEditor,\n    event,\n  })\n\n  if (block && positionBlock && !selection && !Editor.isEditor(node)) {\n    return {\n      block: positionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: block,\n            path: [{_key: block._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: block,\n            path: [{_key: block._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  if (!positionBlock || !selection) {\n    return undefined\n  }\n\n  const focusBlockPath = selection.focus.path.at(0)\n  const focusBlockKey = utils.isKeyedSegment(focusBlockPath)\n    ? focusBlockPath._key\n    : undefined\n\n  if (!focusBlockKey) {\n    return undefined\n  }\n\n  if (\n    utils.isSelectionCollapsed(selection) &&\n    block &&\n    focusBlockKey !== block._key\n  ) {\n    return {\n      block: positionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: block,\n            path: [{_key: block._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: block,\n            path: [{_key: block._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  return {\n    block: positionBlock,\n    isEditor: Editor.isEditor(node),\n    selection,\n  }\n}\n\nexport function getEventNode({\n  slateEditor,\n  event,\n}: {\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}) {\n  if (!DOMEditor.hasTarget(slateEditor, event.target)) {\n    return undefined\n  }\n\n  const node = DOMEditor.toSlateNode(slateEditor, event.target)\n\n  return node\n}\n\nfunction getEventPositionBlock({\n  node,\n  slateEditor,\n  event,\n}: {\n  node: Node\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPositionBlock | undefined {\n  const [firstBlock] = getFirstBlock({editor: slateEditor})\n\n  if (!firstBlock) {\n    return undefined\n  }\n\n  const firstBlockElement = DOMEditor.toDOMNode(slateEditor, firstBlock)\n  const firstBlockRect = firstBlockElement.getBoundingClientRect()\n\n  if (event.pageY < firstBlockRect.top) {\n    return 'start'\n  }\n\n  const [lastBlock] = getLastBlock({editor: slateEditor})\n\n  if (!lastBlock) {\n    return undefined\n  }\n\n  const lastBlockElement = DOMEditor.toDOMNode(slateEditor, lastBlock)\n  const lastBlockRef = lastBlockElement.getBoundingClientRect()\n\n  if (event.pageY > lastBlockRef.bottom) {\n    return 'end'\n  }\n\n  const element = DOMEditor.toDOMNode(slateEditor, node)\n  const elementRect = element.getBoundingClientRect()\n  const top = elementRect.top\n  const height = elementRect.height\n  const location = Math.abs(top - event.pageY)\n\n  return location < height / 2 ? 'start' : 'end'\n}\n\nexport function getEventSelection({\n  schema,\n  slateEditor,\n  event,\n}: {\n  schema: EditorSchema\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EditorSelection {\n  const range = getSlateRangeFromEvent(slateEditor, event)\n\n  const selection = range\n    ? slateRangeToSelection({\n        schema,\n        editor: slateEditor,\n        range,\n      })\n    : null\n\n  return selection\n}\n\nfunction getSlateRangeFromEvent(\n  editor: PortableTextSlateEditor,\n  event: DragEvent | MouseEvent,\n) {\n  if (!event.target) {\n    return undefined\n  }\n\n  if (!isDOMNode(event.target)) {\n    return undefined\n  }\n\n  const window = DOMEditor.getWindow(editor)\n\n  let domRange: Range | undefined\n\n  if (window.document.caretPositionFromPoint !== undefined) {\n    const position = window.document.caretPositionFromPoint(\n      event.clientX,\n      event.clientY,\n    )\n\n    if (position) {\n      try {\n        domRange = window.document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      } catch {}\n    }\n  } else if (window.document.caretRangeFromPoint !== undefined) {\n    // Use WebKit-proprietary fallback method\n    domRange =\n      window.document.caretRangeFromPoint(event.clientX, event.clientY) ??\n      undefined\n  } else {\n    console.warn(\n      'Neither caretPositionFromPoint nor caretRangeFromPoint is supported',\n    )\n    return undefined\n  }\n\n  if (!domRange) {\n    return undefined\n  }\n\n  let range: BaseRange | undefined\n\n  try {\n    range = DOMEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      // It can still throw even with this option set to true\n      suppressThrow: false,\n    })\n  } catch {}\n\n  return range\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Element, type Descendant, type Path as SlatePath} from 'slate'\n\nexport function toSlatePath(path: Path, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(path[0]) && (n as Descendant)._key === path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n\n  const childPath = [path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n\n  return [blockPath[0], 0]\n}\n","import {Point, type Editor, type Operation, type Range} from 'slate'\nimport type {EditorSelection} from '../types/editor'\nimport {toSlatePath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import {Editor} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSnapshot} from '..'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {toSlateRange} from './ranges'\n\nexport type SelectionDomNodes = {\n  blockNodes: Array<Node>\n  childNodes: Array<Node>\n}\n\nexport function getSelectionDomNodes({\n  slateEditor,\n  snapshot,\n}: {\n  slateEditor: PortableTextSlateEditor\n  snapshot: EditorSnapshot\n}): SelectionDomNodes {\n  if (!snapshot.context.selection) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const range = toSlateRange(snapshot.context.selection, slateEditor)\n\n  if (!range) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const blockEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'highest',\n      match: (n) => !Editor.isEditor(n),\n    }),\n  )\n\n  const childEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'lowest',\n      match: (n) =>\n        (!Editor.isEditor(n) && slateEditor.isTextSpan(n)) ||\n        !slateEditor.isBlock(n),\n    }),\n  )\n\n  return {\n    blockNodes: blockEntries.map(([blockNode]) =>\n      DOMEditor.toDOMNode(slateEditor, blockNode),\n    ),\n    childNodes: childEntries.map(([childNode]) =>\n      DOMEditor.toDOMNode(slateEditor, childNode),\n    ),\n  }\n}\n","import type {Editor, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","export function DropIndicator() {\n  return (\n    <div\n      contentEditable={false}\n      className=\"pt-drop-indicator\"\n      style={{\n        position: 'absolute',\n        width: '100%',\n        height: 1,\n        borderBottom: '1px solid currentColor',\n        zIndex: 5,\n      }}\n    >\n      <span />\n    </div>\n  )\n}\n","import type {PortableTextChild, PortableTextObject} from '@sanity/types'\n\nexport function RenderDefaultBlockObject(props: {\n  blockObject: PortableTextObject\n}) {\n  return (\n    <div style={{userSelect: 'none'}}>\n      [{props.blockObject._type}: {props.blockObject._key}]\n    </div>\n  )\n}\n\nexport function RenderDefaultInlineObject(props: {\n  inlineObject: PortableTextObject | PortableTextChild\n}) {\n  return (\n    <span style={{userSelect: 'none'}}>\n      [{props.inlineObject._type}: {props.inlineObject._key}]\n    </span>\n  )\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import {defaultKeyGenerator} from '../editor/key-generator'\n\nexport type EditorPriority = {\n  id: string\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}\n\nexport function createEditorPriority(config?: {\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}): EditorPriority {\n  return {\n    id: defaultKeyGenerator(),\n    name: config?.name,\n    reference: config?.reference,\n  }\n}\n","import {createEditorPriority} from './priority.types'\n\nexport const corePriority = createEditorPriority({name: 'core'})\n","import type {EventPositionBlock} from '../internal-utils/event-position'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport * as selectors from '../selectors'\nimport {forward} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport function createCoreBlockElementBehaviorsConfig({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  return [\n    {\n      behavior: defineBehavior({\n        on: 'drag.dragover',\n        guard: ({snapshot, event}) => {\n          const dropFocusBlock = selectors.getFocusBlock({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: event.position.selection,\n            },\n          })\n\n          if (!dropFocusBlock || dropFocusBlock.node._key !== key) {\n            return false\n          }\n\n          const dragOrigin = snapshot.beta.internalDrag?.origin\n\n          if (!dragOrigin) {\n            return false\n          }\n\n          const draggedBlocks = selectors.getSelectedBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n\n          if (\n            draggedBlocks.some((draggedBlock) => draggedBlock.node._key === key)\n          ) {\n            return false\n          }\n\n          const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n\n          return draggingEntireBlocks\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(event.position.block)\n              },\n            },\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n    {\n      behavior: defineBehavior({\n        on: 'drag.*',\n        guard: ({event}) => {\n          return event.type !== 'drag.dragover'\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(undefined)\n              },\n            },\n            forward(event),\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n  ]\n}\n","import {useContext, useEffect} from 'react'\nimport {createCoreBlockElementBehaviorsConfig} from '../../behaviors/behavior.core.block-element'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport {EditorActorContext} from '../editor-actor-context'\n\nexport function useCoreBlockElementBehaviors({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  const editorActor = useContext(EditorActorContext)\n\n  useEffect(() => {\n    const behaviorConfigs = createCoreBlockElementBehaviorsConfig({\n      key,\n      onSetDragPositionBlock,\n    })\n\n    for (const behaviorConfig of behaviorConfigs) {\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig,\n      })\n    }\n\n    return () => {\n      for (const behaviorConfig of behaviorConfigs) {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig,\n        })\n      }\n    }\n  }, [editorActor, key, onSetDragPositionBlock])\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {useContext, useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {useSelected, useSlateStatic, type RenderElementProps} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {RenderBlockFunction} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {DropIndicator} from './drop-indicator'\nimport {RenderDefaultBlockObject} from './render-default-object'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderBlockObject(props: {\n  attributes: RenderElementProps['attributes']\n  blockObject: PortableTextObject\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockObjectRef = useRef<HTMLDivElement>(null)\n\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n\n  const editorActor = useContext(EditorActorContext)\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const legacySchemaType = useSelector(editorActor, (s) =>\n    s.context\n      .getLegacySchema()\n      .blockObjects.find(\n        (blockObject) => blockObject.name === props.element._type,\n      ),\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Block object type ${props.element._type} not found in Schema`,\n    )\n  }\n\n  const focused =\n    selected &&\n    slateEditor.selection !== null &&\n    Range.isCollapsed(slateEditor.selection)\n\n  return (\n    <div\n      {...props.attributes}\n      className=\"pt-block pt-object-block\"\n      data-block-key={props.element._key}\n      data-block-name={props.element._type}\n      data-block-type=\"object\"\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      {props.children}\n      <div\n        ref={blockObjectRef}\n        contentEditable={false}\n        draggable={!props.readOnly}\n      >\n        {props.renderBlock && legacySchemaType ? (\n          props.renderBlock({\n            children: (\n              <RenderDefaultBlockObject blockObject={props.blockObject} />\n            ),\n            editorElementRef: blockObjectRef,\n            focused,\n            path: [{_key: props.element._key}],\n            schemaType: legacySchemaType,\n            selected,\n            type: legacySchemaType,\n            value: props.blockObject,\n          })\n        ) : (\n          <RenderDefaultBlockObject blockObject={props.blockObject} />\n        )}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {useContext, useRef, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport {useSelected, useSlateStatic, type RenderElementProps} from 'slate-react'\nimport {getPointBlock} from '../../internal-utils/slate-utils'\nimport type {RenderChildFunction} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderDefaultInlineObject} from './render-default-object'\n\nexport function RenderInlineObject(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  inlineObject: PortableTextObject\n  readOnly: boolean\n  renderChild?: RenderChildFunction\n}) {\n  const inlineObjectRef = useRef<HTMLElement>(null)\n\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n\n  const editorActor = useContext(EditorActorContext)\n  const legacySchemaType = useSelector(editorActor, (s) =>\n    s.context\n      .getLegacySchema()\n      .inlineObjects.find(\n        (inlineObject) => inlineObject.name === props.element._type,\n      ),\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Inline object type ${props.element._type} not found in Schema`,\n    )\n  }\n\n  const focused =\n    selected &&\n    slateEditor.selection !== null &&\n    Range.isCollapsed(slateEditor.selection)\n  const path = DOMEditor.findPath(slateEditor, props.element)\n  const [block] = getPointBlock({\n    editor: slateEditor,\n    point: {\n      path,\n      offset: 0,\n    },\n  })\n\n  if (!block) {\n    console.error(\n      `Unable to find parent block of inline object ${props.element._key}`,\n    )\n  }\n\n  return (\n    <span\n      {...props.attributes}\n      draggable={!props.readOnly}\n      className=\"pt-inline-object\"\n      data-child-key={props.inlineObject._key}\n      data-child-name={props.inlineObject._type}\n      data-child-type=\"object\"\n    >\n      {props.children}\n      <span ref={inlineObjectRef} style={{display: 'inline-block'}}>\n        {props.renderChild && block && legacySchemaType ? (\n          props.renderChild({\n            annotations: [],\n            children: (\n              <RenderDefaultInlineObject inlineObject={props.inlineObject} />\n            ),\n            editorElementRef: inlineObjectRef,\n            selected,\n            focused,\n            path: [{_key: block._key}, 'children', {_key: props.element._key}],\n            schemaType: legacySchemaType,\n            value: props.inlineObject,\n            type: legacySchemaType,\n          })\n        ) : (\n          <RenderDefaultInlineObject inlineObject={props.inlineObject} />\n        )}\n      </span>\n    </span>\n  )\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {useContext, useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {useSelected, useSlateStatic, type RenderElementProps} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {\n  RenderBlockFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {DropIndicator} from './drop-indicator'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderTextBlock(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n  textBlock: PortableTextTextBlock\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockRef = useRef<HTMLDivElement>(null)\n\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n\n  const editorActor = useContext(EditorActorContext)\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n\n  const focused =\n    selected &&\n    slateEditor.selection !== null &&\n    Range.isCollapsed(slateEditor.selection)\n\n  let children = props.children\n\n  const legacyBlockSchemaType = legacySchema.block\n\n  if (props.renderStyle && props.textBlock.style) {\n    const legacyStyleSchemaType =\n      props.textBlock.style !== undefined\n        ? legacySchema.styles.find(\n            (style) => style.value === props.textBlock.style,\n          )\n        : undefined\n\n    if (legacyStyleSchemaType) {\n      children = props.renderStyle({\n        block: props.textBlock,\n        children,\n        editorElementRef: blockRef,\n        focused,\n        path: [{_key: props.textBlock._key}],\n        schemaType: legacyStyleSchemaType,\n        selected,\n        value: props.textBlock.style,\n      })\n    } else {\n      console.error(\n        `Unable to find Schema type for text block style ${props.textBlock.style}`,\n      )\n    }\n  }\n\n  if (props.renderListItem && props.textBlock.listItem) {\n    const legacyListItemSchemaType = legacySchema.lists.find(\n      (list) => list.value === props.textBlock.listItem,\n    )\n\n    if (legacyListItemSchemaType) {\n      children = props.renderListItem({\n        block: props.textBlock,\n        children,\n        editorElementRef: blockRef,\n        focused,\n        level: props.textBlock.level ?? 1,\n        path: [{_key: props.textBlock._key}],\n        selected,\n        value: props.textBlock.listItem,\n        schemaType: legacyListItemSchemaType,\n      })\n    } else {\n      console.error(\n        `Unable to find Schema type for text block list item ${props.textBlock.listItem}`,\n      )\n    }\n  }\n\n  return (\n    <div\n      {...props.attributes}\n      className={[\n        'pt-block',\n        'pt-text-block',\n        ...(props.textBlock.style\n          ? [`pt-text-block-style-${props.textBlock.style}`]\n          : []),\n        ...(props.textBlock.listItem\n          ? [\n              'pt-list-item',\n              `pt-list-item-${props.textBlock.listItem}`,\n              `pt-list-item-level-${props.textBlock.level ?? 1}`,\n            ]\n          : []),\n      ].join(' ')}\n      spellCheck={props.spellCheck}\n      data-block-key={props.textBlock._key}\n      data-block-name={props.textBlock._type}\n      data-block-type=\"text\"\n      {...(props.textBlock.listItem !== undefined\n        ? {\n            'data-list-item': props.textBlock.listItem,\n          }\n        : {})}\n      {...(props.textBlock.level !== undefined\n        ? {\n            'data-level': props.textBlock.level,\n          }\n        : {})}\n      {...(props.textBlock.style !== undefined\n        ? {\n            'data-style': props.textBlock.style,\n          }\n        : {})}\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      <div ref={blockRef}>\n        {props.renderBlock\n          ? props.renderBlock({\n              children,\n              editorElementRef: blockRef,\n              focused,\n              level: props.textBlock.level,\n              listItem: props.textBlock.listItem,\n              path: [{_key: props.textBlock._key}],\n              selected,\n              schemaType: legacyBlockSchemaType,\n              style: props.textBlock.style,\n              type: legacyBlockSchemaType,\n              value: props.textBlock,\n            })\n          : props.children}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport {useContext, type ReactElement} from 'react'\nimport type {Element as SlateElement} from 'slate'\nimport type {RenderElementProps} from 'slate-react'\nimport {\n  parseBlockObject,\n  parseInlineObject,\n  parseTextBlock,\n} from '../../internal-utils/parse-blocks'\nimport type {\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderBlockObject} from './render-block-object'\nimport {RenderInlineObject} from './render-inline-object'\nimport {RenderTextBlock} from './render-text-block'\n\nexport function RenderElement(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n  const isInline =\n    '__inline' in props.element && props.element.__inline === true\n\n  if (isInline) {\n    const inlineObject = parseInlineObject({\n      context: {\n        keyGenerator: () => '',\n        schema,\n      },\n      options: {refreshKeys: false, validateFields: false},\n      inlineObject: {\n        _key: props.element._key,\n        _type: props.element._type,\n        ...('value' in props.element && typeof props.element.value === 'object'\n          ? props.element.value\n          : {}),\n      },\n    })\n\n    if (!inlineObject) {\n      console.error(\n        `Unable to find Inline Object \"${props.element._type}\" in Schema`,\n      )\n    }\n\n    return (\n      <RenderInlineObject\n        attributes={props.attributes}\n        element={props.element}\n        inlineObject={\n          inlineObject ?? {\n            _key: props.element._key,\n            _type: props.element._type,\n          }\n        }\n        readOnly={props.readOnly}\n        renderChild={props.renderChild}\n      >\n        {props.children}\n      </RenderInlineObject>\n    )\n  }\n\n  const textBlock = parseTextBlock({\n    context: {\n      keyGenerator: () => '',\n      schema,\n    },\n    options: {refreshKeys: false, validateFields: false},\n    block: props.element,\n  })\n\n  if (textBlock) {\n    return (\n      <RenderTextBlock\n        attributes={props.attributes}\n        element={props.element}\n        readOnly={props.readOnly}\n        renderBlock={props.renderBlock}\n        renderListItem={props.renderListItem}\n        renderStyle={props.renderStyle}\n        spellCheck={props.spellCheck}\n        textBlock={textBlock}\n      >\n        {props.children}\n      </RenderTextBlock>\n    )\n  }\n\n  const blockObject = parseBlockObject({\n    context: {\n      keyGenerator: () => '',\n      schema,\n    },\n    options: {refreshKeys: false, validateFields: false},\n    blockObject: {\n      _key: props.element._key,\n      _type: props.element._type,\n      ...('value' in props.element && typeof props.element.value === 'object'\n        ? props.element.value\n        : {}),\n    },\n  })\n\n  if (!blockObject) {\n    console.error(\n      `Unable to find Block Object \"${props.element._type}\" in Schema`,\n    )\n  }\n\n  return (\n    <RenderBlockObject\n      attributes={props.attributes}\n      blockObject={\n        blockObject ?? {\n          _key: props.element._key,\n          _type: props.element._type,\n        }\n      }\n      element={props.element}\n      readOnly={props.readOnly}\n      renderBlock={props.renderBlock}\n    >\n      {props.children}\n    </RenderBlockObject>\n  )\n}\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","/**\n * Copy/pasted from https://github.com/statelyai/xstate/blob/main/packages/xstate-react/src/stopRootWithRehydration.ts\n * and renamed to `stopActor`\n */\n\nimport type {AnyActorRef, Snapshot} from 'xstate'\n\nconst forEachActor = (\n  actorRef: AnyActorRef,\n  callback: (ref: AnyActorRef) => void,\n) => {\n  callback(actorRef)\n  const children = actorRef.getSnapshot().children\n  if (children) {\n    Object.values(children).forEach((child) => {\n      forEachActor(child as AnyActorRef, callback)\n    })\n  }\n}\n\nexport function stopActor(actorRef: AnyActorRef) {\n  // persist snapshot here in a custom way allows us to persist inline actors and to preserve actor references\n  // we do it to avoid setState in useEffect when the effect gets \"reconnected\"\n  // this currently only happens in Strict Effects but it simulates the Offscreen aka Activity API\n  // it also just allows us to end up with a somewhat more predictable behavior for the users\n  const persistedSnapshots: Array<[AnyActorRef, Snapshot<unknown>]> = []\n  forEachActor(actorRef, (ref) => {\n    persistedSnapshots.push([ref, ref.getSnapshot()])\n    // muting observers allow us to avoid `useSelector` from being notified about the stopped snapshot\n    // React reconnects its subscribers (from the useSyncExternalStore) on its own\n    // and userland subscibers should basically always do the same anyway\n    // as each subscription should have its own cleanup logic and that should be called each such reconnect\n    ;(ref as any).observers = new Set()\n  })\n  const systemSnapshot = actorRef.system.getSnapshot?.()\n\n  actorRef.stop()\n  ;(actorRef.system as any)._snapshot = systemSnapshot\n  persistedSnapshots.forEach(([ref, snapshot]) => {\n    ;(ref as any)._processingStatus = 0\n    ;(ref as any)._snapshot = snapshot\n  })\n}\n","import {defineConverter} from './converter.types'\n\nexport const converterJson = defineConverter({\n  mimeType: 'application/json',\n  serialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/json',\n        originEvent: event.originEvent,\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const serializationEvent = portableTextConverter.serialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...serializationEvent,\n      mimeType: 'application/json',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/json',\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const deserializationEvent = portableTextConverter.deserialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...deserializationEvent,\n      mimeType: 'application/json',\n    }\n  },\n})\n","import {parseBlock} from '../internal-utils/parse-blocks'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterPortableText = defineConverter({\n  mimeType: 'application/x-portable-text',\n  serialize: ({snapshot, event}) => {\n    const selection =\n      snapshot.beta.internalDrag?.origin.selection ?? snapshot.context.selection\n\n    if (!selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      context: {\n        selection,\n        schema: snapshot.context.schema,\n      },\n      blocks: snapshot.context.value,\n    })\n\n    if (blocks.length === 0) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks serialized',\n        originEvent: event.originEvent,\n      }\n    }\n\n    return {\n      type: 'serialization.success',\n      data: JSON.stringify(blocks),\n      mimeType: 'application/x-portable-text',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const blocks = JSON.parse(event.data)\n\n    if (!Array.isArray(blocks)) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'Data is not an array',\n      }\n    }\n\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = parseBlock({\n        context: snapshot.context,\n        block,\n        options: {\n          /**\n           * If we are dragging internally then we would like to keep the\n           * dropped portable text as is.\n           */\n          refreshKeys: !snapshot.beta.hasTag?.('dragging internally'),\n          validateFields: false,\n        },\n      })\n      return parsedBlock ? [parsedBlock] : []\n    })\n\n    if (parsedBlocks.length === 0 && blocks.length > 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks were parsed',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: parsedBlocks,\n      mimeType: 'application/x-portable-text',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {toHTML} from '@portabletext/to-html'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextHtml(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/html',\n    serialize: ({snapshot, event}) => {\n      const selection =\n        snapshot.beta.internalDrag?.origin.selection ??\n        snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = sliceBlocks({\n        context: {\n          selection,\n          schema: snapshot.context.schema,\n        },\n        blocks: snapshot.context.value,\n      })\n\n      const html = toHTML(blocks, {\n        onMissingComponent: false,\n        components: {\n          unknownType: ({children}) =>\n            children !== undefined ? `${children}` : '',\n        },\n      })\n\n      if (html === '') {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'Serialized HTML is empty',\n        }\n      }\n\n      return {\n        type: 'serialization.success',\n        data: html,\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const blocks = htmlToBlocks(event.data, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n        unstable_whitespaceOnPasteMode:\n          legacySchema.block.options.unstable_whitespaceOnPasteMode,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: false,\n            validateFields: true,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/html',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/html',\n      }\n    },\n  })\n}\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextPlain(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/plain',\n    serialize: ({snapshot, event}) => {\n      const selection =\n        snapshot.beta.internalDrag?.origin.selection ??\n        snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/plain',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = sliceBlocks({\n        context: {\n          selection,\n          schema: snapshot.context.schema,\n        },\n        blocks: snapshot.context.value,\n      })\n\n      const data = blocks\n        .map((block) => {\n          if (isTextBlock(snapshot.context, block)) {\n            return block.children\n              .map((child) => {\n                if (child._type === snapshot.context.schema.span.name) {\n                  return child.text\n                }\n\n                return snapshot.beta.hasTag('dragging internally')\n                  ? `[${\n                      snapshot.context.schema.inlineObjects.find(\n                        (inlineObjectType) =>\n                          inlineObjectType.name === child._type,\n                      )?.title ?? 'Object'\n                    }]`\n                  : ''\n              })\n              .join('')\n          }\n\n          return snapshot.beta.hasTag('dragging internally')\n            ? `[${\n                snapshot.context.schema.blockObjects.find(\n                  (blockObjectType) => blockObjectType.name === block._type,\n                )?.title ?? 'Object'\n              }]`\n            : ''\n        })\n        .filter((block) => block !== '')\n        .join('\\n\\n')\n\n      return {\n        type: 'serialization.success',\n        data,\n        mimeType: 'text/plain',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const html = escapeHtml(event.data)\n        .split(/\\n{2,}/)\n        .map((line) =>\n          line\n            ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n            : '<p></p>',\n        )\n        .join('')\n\n      const textToHtml = `<html><body>${html}</body></html>`\n\n      const blocks = htmlToBlocks(textToHtml, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: false,\n            validateFields: true,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/plain',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/plain',\n      }\n    },\n  })\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\n\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n","import type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {converterJson} from './converter.json'\nimport {converterPortableText} from './converter.portable-text'\nimport {createConverterTextHtml} from './converter.text-html'\nimport {createConverterTextPlain} from './converter.text-plain'\n\nexport function createCoreConverters(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return [\n    converterJson,\n    converterPortableText,\n    createConverterTextHtml(legacySchema),\n    createConverterTextPlain(legacySchema),\n  ]\n}\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import type {EditorContext} from '../editor/editor-snapshot'\n\nexport function createPlaceholderBlock(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n) {\n  return {\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    style: context.schema.styles[0].name ?? 'normal',\n    markDefs: [],\n    children: [\n      {\n        _type: context.schema.span.name,\n        _key: context.keyGenerator(),\n        text: '',\n        marks: [],\n      },\n    ],\n  }\n}\n","import type {MarkState} from '../internal-utils/mark-state'\nimport type {EditorSchema} from './editor-schema'\n\nexport function getActiveAnnotations({\n  markState,\n  schema,\n}: {\n  markState: MarkState | undefined\n  schema: EditorSchema\n}) {\n  return (markState?.marks ?? []).filter(\n    (mark) =>\n      !schema.decorators.map((decorator) => decorator.name).includes(mark),\n  )\n}\n","import type {MarkState} from '../internal-utils/mark-state'\nimport type {EditorSchema} from './editor-schema'\n\nexport function getActiveDecorators({\n  decoratorState,\n  markState,\n  schema,\n}: {\n  decoratorState: Record<string, boolean | undefined>\n  markState: MarkState | undefined\n  schema: EditorSchema\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.name)\n\n  const markStateDecorators = (markState?.marks ?? []).filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  let activeDecorators: Array<string> = markStateDecorators\n\n  for (const decorator in decoratorState) {\n    if (decoratorState[decorator] === false) {\n      activeDecorators = activeDecorators.filter(\n        (activeDecorator) => activeDecorator !== decorator,\n      )\n    } else if (decoratorState[decorator] === true) {\n      if (!activeDecorators.includes(decorator)) {\n        activeDecorators.push(decorator)\n      }\n    }\n  }\n\n  return activeDecorators\n}\n","import {Transforms} from 'slate'\nimport {getActiveAnnotations} from '../editor/get-active-annotations'\nimport {getActiveDecorators} from '../editor/get-active-decorators'\nimport {getFocusSpan} from '../internal-utils/slate-utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertTextOperationImplementation: BehaviorOperationImplementation<\n  'insert.text'\n> = ({context, operation}) => {\n  const activeDecorators = getActiveDecorators({\n    decoratorState: operation.editor.decoratorState,\n    markState: operation.editor.markState,\n    schema: context.schema,\n  })\n  const activeAnnotations = getActiveAnnotations({\n    markState: operation.editor.markState,\n    schema: context.schema,\n  })\n\n  const [focusSpan] = getFocusSpan({\n    editor: operation.editor,\n  })\n\n  if (!focusSpan) {\n    Transforms.insertText(operation.editor, operation.text)\n    return\n  }\n\n  if (\n    operation.editor.markState &&\n    operation.editor.markState.state === 'unchanged'\n  ) {\n    const markStateDecorators = (operation.editor.markState.marks ?? []).filter(\n      (mark) =>\n        context.schema.decorators\n          .map((decorator) => decorator.name)\n          .includes(mark),\n    )\n\n    if (\n      markStateDecorators.length === activeDecorators.length &&\n      markStateDecorators.every((mark) => activeDecorators.includes(mark))\n    ) {\n      Transforms.insertText(operation.editor, operation.text)\n      return\n    }\n  }\n\n  Transforms.insertNodes(operation.editor, {\n    _type: focusSpan._type,\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [...activeDecorators, ...activeAnnotations],\n  })\n\n  operation.editor.decoratorState = {}\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a, _b;\n  const {\n      children\n    } = block,\n    markDefs = (_a = block.markDefs) != null ? _a : [];\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_b = nodeStack[pos]) == null ? void 0 : _b.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs == null ? void 0 : markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","import {useSelector} from '@xstate/react'\nimport type {Editor} from '../editor'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {InternalEditor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {getActiveAnnotations} from './get-active-annotations'\nimport {getActiveDecorators} from './get-active-decorators'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n * Hook to select a value from the editor state.\n * @example\n * Pass a selector as the second argument\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const value = useEditorSelector(editor, selector)\n * }\n * ```\n * @example\n * Pass an inline selector as the second argument.\n * In this case, use the editor context to obtain the schema.\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const schema = useEditorSelector(editor, (snapshot) => snapshot.context.schema)\n * }\n * ```\n * @group Hooks\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    (editor as InternalEditor)._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: (editor as InternalEditor)._internal.slateEditor\n          .instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  return {\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      readOnly: editorActorSnapshot.matches({'edit mode': 'read only'}),\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: slateEditorInstance.value,\n    },\n    beta: {\n      activeAnnotations: getActiveAnnotations({\n        markState: slateEditorInstance.markState,\n        schema: editorActorSnapshot.context.schema,\n      }),\n      activeDecorators: getActiveDecorators({\n        decoratorState: slateEditorInstance.decoratorState,\n        markState: slateEditorInstance.markState,\n        schema: editorActorSnapshot.context.schema,\n      }),\n      hasTag: (tag) => editorActorSnapshot.hasTag(tag),\n      internalDrag: editorActorSnapshot.context.internalDrag,\n    },\n  }\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../internal-utils/sibling-utils'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = editorActor\n      .getSnapshot()\n      .context.schema.decorators.map((t) => t.name)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = editorActor\n            .getSnapshot()\n            .context.schema.decorators.map((decorator) => decorator.name)\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        if (\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // We only want to clear the decorator state if the caret is visually\n            // moving\n            if (!movedToNextSpan && !movedToPreviousSpan) {\n              editor.decoratorState = {}\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        if (!editor.markState) {\n          apply(op)\n          return\n        }\n\n        if (editor.markState.state === 'unchanged') {\n          apply(op)\n          return\n        }\n\n        Transforms.insertNodes(editor, {\n          _type: 'span',\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          text: op.text,\n          marks: editor.markState.marks,\n        })\n\n        return\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const snapshot = getEditorSnapshot({\n                editorActorSnapshot: editorActor.getSnapshot(),\n                slateEditorInstance: editor,\n              })\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: snapshot.beta.activeDecorators},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type ===\n          editorActor.getSnapshot().context.schema.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const removeDecoratorOperationImplementation: BehaviorOperationImplementation<\n  'decorator.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        editor.decoratorState[mark] = false\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches,\n  xIndex\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_UNDO_STEP: WeakMap<Editor, {undoStepId: string} | undefined> =\n  new WeakMap()\n\nexport function withUndoStep(editor: Editor, fn: () => void) {\n  const current = CURRENT_UNDO_STEP.get(editor)\n\n  if (current) {\n    fn()\n    return\n  }\n\n  CURRENT_UNDO_STEP.set(\n    editor,\n    current ?? {\n      undoStepId: defaultKeyGenerator(),\n    },\n  )\n  fn()\n  CURRENT_UNDO_STEP.set(editor, undefined)\n}\n\nexport function getCurrentUndoStepId(editor: Editor) {\n  return CURRENT_UNDO_STEP.get(editor)?.undoStepId\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getCurrentUndoStepId} from '../with-undo-step'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      editorActor.getSnapshot().context.schema.block.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n    let previousUndoStepId = getCurrentUndoStepId(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n\n    const {apply} = editor\n\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      const currentUndoStepId = getCurrentUndoStepId(editor)\n\n      let merge =\n        currentUndoStepId !== undefined && previousUndoStepId === undefined\n          ? false\n          : currentUndoStepId !== undefined && previousUndoStepId !== undefined\n            ? currentUndoStepId === previousUndoStepId\n            : true\n\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge =\n            currentUndoStepId === undefined && previousUndoStepId === undefined\n              ? shouldMerge(op, lastOp) || overwrite\n              : merge\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n\n      previousUndoStepId = currentUndoStepId\n\n      apply(op)\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\nexport const historyUndoOperationImplementation: BehaviorOperationImplementation<\n  'history.undo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {undos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1]\n    debug('Undoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      const reversedOperations = transformedOperations\n        .map(Operation.inverse)\n        .reverse()\n\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform undo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsUndoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.redos.push(step)\n      editor.history.undos.pop()\n    }\n  }\n}\n\nexport const historyRedoOperationImplementation: BehaviorOperationImplementation<\n  'history.redo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {redos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1]\n    debug('Redoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform redo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsRedoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.undos.push(step)\n      editor.history.redos.pop()\n    }\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {Path} from '@sanity/types'\nimport {Editor, Node, Range, Text, Transforms} from 'slate'\nimport {parseAnnotation} from '../internal-utils/parse-blocks'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, operation}) => {\n  const parsedAnnotation = parseAnnotation({\n    annotation: {\n      _type: operation.annotation.name,\n      ...operation.annotation.value,\n    },\n    context,\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedAnnotation) {\n    throw new Error(\n      `Failed to parse annotation ${JSON.stringify(operation.annotation)}`,\n    )\n  }\n\n  const editor = operation.editor\n\n  if (!editor.selection || Range.isCollapsed(editor.selection)) {\n    return\n  }\n\n  let paths: AddedAnnotationPaths | undefined = undefined\n  let spanPath: Path | undefined\n  let markDefPath: Path | undefined\n  const markDefPaths: Path[] = []\n\n  const selectedBlocks = Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: Range.isBackward(editor.selection),\n  })\n\n  let blockIndex = 0\n\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0) {\n      continue\n    }\n\n    if (block.children.length === 1 && block.children[0].text === '') {\n      continue\n    }\n\n    // Make sure we don't generate more keys than needed\n    const annotationKey =\n      blockIndex === 0 ? parsedAnnotation._key : context.keyGenerator()\n    const markDefs = block.markDefs ?? []\n    const existingMarkDef = markDefs.find(\n      (markDef) =>\n        markDef._type === parsedAnnotation._type &&\n        markDef._key === annotationKey,\n    )\n\n    if (existingMarkDef === undefined) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: [\n            ...markDefs,\n            {\n              ...parsedAnnotation,\n              _key: annotationKey,\n            },\n          ],\n        },\n        {at: blockPath},\n      )\n\n      markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n\n      if (Range.isBackward(editor.selection)) {\n        markDefPaths.unshift(markDefPath)\n      } else {\n        markDefPaths.push(markDefPath)\n      }\n    }\n\n    Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n    const children = Node.children(editor, blockPath)\n\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span)) {\n        continue\n      }\n\n      if (!Range.includes(editor.selection, path)) {\n        continue\n      }\n\n      const marks = span.marks ?? []\n      const existingSameTypeAnnotations = marks.filter((mark) =>\n        markDefs.some(\n          (markDef) =>\n            markDef._key === mark && markDef._type === parsedAnnotation._type,\n        ),\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks: [\n            ...marks.filter(\n              (mark) => !existingSameTypeAnnotations.includes(mark),\n            ),\n            annotationKey,\n          ],\n        },\n        {at: path},\n      )\n\n      spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n    }\n\n    blockIndex++\n  }\n\n  if (markDefPath && spanPath) {\n    paths = {\n      markDefPath,\n      markDefPaths,\n      spanPath,\n    }\n  }\n\n  return paths\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const removeAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === operation.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== operation.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n","import {Editor, Transforms, type Element as SlateElement} from 'slate'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockSetOperationImplementation: BehaviorOperationImplementation<\n  'block.set'\n> = ({context, operation}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: operation.at, offset: 0},\n      focus: {path: operation.at, offset: 0},\n    },\n    operation.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(operation.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(operation.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, ...filteredProps} = operation.props\n\n  const updatedBlock = parseBlock({\n    context,\n    block: {\n      ...parsedBlock,\n      ...filteredProps,\n    },\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!updatedBlock) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const slateBlock = toSlateValue([updatedBlock], {\n    schemaTypes: context.schema,\n  })?.at(0) as SlateElement | undefined\n\n  if (!slateBlock) {\n    throw new Error(`Unable to convert block to Slate value`)\n  }\n\n  Transforms.setNodes(operation.editor, slateBlock, {at: location})\n}\n","import {omit} from 'lodash'\nimport {Editor, Transforms} from 'slate'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockUnsetOperationImplementation: BehaviorOperationImplementation<\n  'block.unset'\n> = ({context, operation}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: operation.at, offset: 0},\n      focus: {path: operation.at, offset: 0},\n    },\n    operation.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(operation.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(operation.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (isTextBlock(context, parsedBlock)) {\n    const propsToRemove = operation.props.filter((prop) => prop !== '_type')\n\n    const updatedTextBlock = parseBlock({\n      context,\n      block: omit(parsedBlock, propsToRemove),\n      options: {refreshKeys: false, validateFields: true},\n    })\n\n    if (!updatedTextBlock) {\n      throw new Error(\n        `Unable to update block at ${JSON.stringify(operation.at)}`,\n      )\n    }\n\n    const propsToSet: Record<string, unknown> = {}\n\n    for (const prop of propsToRemove) {\n      if (!(prop in updatedTextBlock)) {\n        propsToSet[prop] = undefined\n      } else {\n        propsToSet[prop] = (updatedTextBlock as Record<string, unknown>)[prop]\n      }\n    }\n\n    Transforms.setNodes(operation.editor, propsToSet, {at: location})\n\n    return\n  }\n\n  const updatedBlockObject = parseBlock({\n    context,\n    block: omit(\n      parsedBlock,\n      operation.props.filter((prop) => prop !== '_type'),\n    ),\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!updatedBlockObject) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, _key, ...props} = updatedBlockObject\n\n  Transforms.setNodes(\n    operation.editor,\n    {\n      _type,\n      _key,\n      value: props,\n    },\n    {at: location},\n  )\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const decoratorAddOperationImplementation: BehaviorOperationImplementation<\n  'decorator.add'\n> = ({context, operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const value = fromSlateValue(\n    editor.children,\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )\n\n  const manualAnchor = operation.at?.anchor\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.anchor,\n        direction: 'backward',\n      })\n    : undefined\n  const manualFocus = operation.at?.focus\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.focus,\n        direction: 'forward',\n      })\n    : undefined\n  const manualSelection =\n    manualAnchor && manualFocus\n      ? {\n          anchor: manualAnchor,\n          focus: manualFocus,\n        }\n      : undefined\n\n  const selection = manualSelection\n    ? (toSlateRange(manualSelection, operation.editor) ?? editor.selection)\n    : editor.selection\n\n  if (!selection) {\n    return\n  }\n\n  const editorSelection = slateRangeToSelection({\n    schema: context.schema,\n    editor,\n    range: selection,\n  })\n  const anchorOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.anchor,\n      })\n    : undefined\n  const focusOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.focus,\n      })\n    : undefined\n\n  if (!anchorOffset || !focusOffset) {\n    throw new Error('Unable to find anchor or focus offset')\n  }\n\n  if (Range.isExpanded(selection)) {\n    // Split if needed\n    Transforms.setNodes(\n      editor,\n      {},\n      {at: selection, match: Text.isText, split: true, hanging: true},\n    )\n\n    // The value might have changed after splitting\n    const newValue = fromSlateValue(\n      editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(editor),\n    )\n    // We need to find the new selection from the original offsets because the\n    // split operation might have changed the value.\n    const newSelection = utils.blockOffsetsToSelection({\n      context: {\n        ...context,\n        value: newValue,\n      },\n      offsets: {anchor: anchorOffset, focus: focusOffset},\n      backward: editorSelection?.backward,\n    })\n\n    const trimmedSelection = selectors.getTrimmedSelection({\n      beta: {\n        activeAnnotations: [],\n        activeDecorators: [],\n        hasTag: () => false,\n        internalDrag: undefined,\n      },\n      context: {\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        readOnly: false,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue,\n      },\n    })\n\n    if (!trimmedSelection) {\n      throw new Error('Unable to find trimmed selection')\n    }\n\n    const newRange = toSlateRange(trimmedSelection, editor)\n\n    if (!newRange) {\n      throw new Error('Unable to find new selection')\n    }\n\n    // Use new selection to find nodes to decorate\n    const splitTextNodes = Range.isRange(newRange)\n      ? [\n          ...Editor.nodes(editor, {\n            at: newRange,\n            match: (node) => Text.isText(node),\n          }),\n        ]\n      : []\n\n    for (const [node, path] of splitTextNodes) {\n      const marks = [\n        ...(Array.isArray(node.marks) ? node.marks : []).filter(\n          (eMark: string) => eMark !== mark,\n        ),\n        mark,\n      ]\n      Transforms.setNodes(\n        editor,\n        {marks},\n        {at: path, match: Text.isText, split: true, hanging: true},\n      )\n    }\n  } else {\n    const selectedSpan = Array.from(\n      Editor.nodes(editor, {\n        at: selection,\n        match: (node) => editor.isTextSpan(node),\n      }),\n    )?.at(0)\n\n    if (!selectedSpan) {\n      return\n    }\n\n    const [block, blockPath] = Editor.node(editor, selection, {\n      depth: 1,\n    })\n    const lonelyEmptySpan =\n      editor.isTextBlock(block) &&\n      block.children.length === 1 &&\n      editor.isTextSpan(block.children[0]) &&\n      block.children[0].text === ''\n        ? block.children[0]\n        : undefined\n\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? []\n      const existingMarksWithoutDecorator = existingMarks.filter(\n        (existingMark) => existingMark !== mark,\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks:\n            existingMarks.length === existingMarksWithoutDecorator.length\n              ? [...existingMarks, mark]\n              : existingMarksWithoutDecorator,\n        },\n        {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node),\n        },\n      )\n    } else {\n      editor.decoratorState[mark] = true\n    }\n  }\n\n  if (editor.selection) {\n    // Reselect\n    const selection = editor.selection\n    editor.selection = {...selection}\n  }\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {getBlockPath} from '../internal-utils/slate-utils'\nimport {isKeyedSegment} from '../utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const deleteOperationImplementation: BehaviorOperationImplementation<\n  'delete'\n> = ({operation}) => {\n  const anchorBlockPath = isKeyedSegment(operation.at.anchor.path[0])\n    ? getBlockPath({\n        editor: operation.editor,\n        _key: operation.at.anchor.path[0]._key,\n      })\n    : undefined\n  const focusBlockPath = isKeyedSegment(operation.at.focus.path[0])\n    ? getBlockPath({\n        editor: operation.editor,\n        _key: operation.at.focus.path[0]._key,\n      })\n    : undefined\n\n  if (\n    operation.at.anchor.path.length === 1 &&\n    operation.at.focus.path.length === 1 &&\n    anchorBlockPath &&\n    focusBlockPath &&\n    anchorBlockPath[0] === focusBlockPath[0]\n  ) {\n    Transforms.removeNodes(operation.editor, {\n      at: [anchorBlockPath[0]],\n    })\n\n    return\n  }\n\n  const range = toSlateRange(operation.at, operation.editor)\n\n  if (!range) {\n    throw new Error(\n      `Failed to get Slate Range for selection ${JSON.stringify(operation.at)}`,\n    )\n  }\n\n  operation.editor.delete({\n    at: range,\n    reverse: operation.direction === 'backward',\n    unit: operation.unit,\n  })\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {parseInlineObject} from '../internal-utils/parse-blocks'\nimport {toSlateValue} from '../internal-utils/values'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertInlineObjectOperationImplementation: BehaviorOperationImplementation<\n  'insert.inline object'\n> = ({context, operation}) => {\n  const parsedInlineObject = parseInlineObject({\n    context,\n    inlineObject: {\n      _type: operation.inlineObject.name,\n      ...(operation.inlineObject.value ?? {}),\n    },\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedInlineObject) {\n    throw new Error(\n      `Failed to parse inline object ${JSON.stringify(operation.inlineObject)}`,\n    )\n  }\n\n  if (!operation.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(operation.editor, {\n      at: operation.editor.selection.focus.path,\n      match: (node) => operation.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [parsedInlineObject],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(operation.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertSpanOperationImplementation: BehaviorOperationImplementation<\n  'insert.span'\n> = ({context, operation}) => {\n  if (!operation.editor.selection) {\n    console.error('Unable to perform action without selection', operation)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(operation.editor, {\n      at: operation.editor.selection.focus.path,\n      match: (node) => operation.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', operation)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = operation.annotations\n    ? operation.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(operation.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(operation.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(operation.decorators ?? []),\n    ],\n  })\n}\n","import {Editor, Path, Point, Range, Transforms, type Descendant} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {\n  getFocusBlock,\n  getFocusChild,\n  getLastBlock,\n  getSelectionEndBlock,\n  getSelectionStartBlock,\n} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor, toSlateValue} from '../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertBlockOperationImplementation: BehaviorOperationImplementation<\n  'insert.block'\n> = ({context, operation}) => {\n  const parsedBlock = parseBlock({\n    block: operation.block,\n    context,\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Failed to parse block ${JSON.stringify(operation.block)}`)\n  }\n\n  const fragment = toSlateValue([parsedBlock], {schemaTypes: context.schema})[0]\n\n  if (!fragment) {\n    throw new Error(\n      `Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`,\n    )\n  }\n\n  insertBlock({\n    block: fragment,\n    placement: operation.placement,\n    select: operation.select ?? 'start',\n    editor: operation.editor,\n    schema: context.schema,\n  })\n}\n\nexport function insertBlock({\n  block,\n  placement,\n  select,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  select: 'start' | 'end' | 'none'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  const [startBlock, startBlockPath] = getSelectionStartBlock({editor})\n  const [endBlock, endBlockPath] = getSelectionEndBlock({editor})\n\n  if (\n    !editor.selection ||\n    !startBlock ||\n    !startBlockPath ||\n    !endBlock ||\n    !endBlockPath\n  ) {\n    if (select !== 'none') {\n      DOMEditor.focus(editor)\n    }\n\n    const [lastBlock, lastBlockPath] = getLastBlock({editor})\n\n    if (placement === 'before') {\n      Transforms.insertNodes(editor, [block], {at: [0]})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, [0]))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, [0]))\n      }\n    } else if (placement === 'after') {\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      if (lastBlock && isEqualToEmptyEditor([lastBlock], schema)) {\n        // And if the last block was an empty text block, let's remove\n        // that too\n        Transforms.removeNodes(editor, {at: lastBlockPath})\n\n        Transforms.insertNodes(editor, [block], {\n          at: lastBlockPath,\n          select: false,\n        })\n\n        Transforms.deselect(editor)\n\n        if (select === 'start') {\n          Transforms.select(editor, Editor.start(editor, lastBlockPath))\n        } else if (select === 'end') {\n          Transforms.select(editor, Editor.end(editor, lastBlockPath))\n        }\n\n        return\n      }\n\n      if (\n        editor.isTextBlock(block) &&\n        lastBlock &&\n        editor.isTextBlock(lastBlock)\n      ) {\n        const selectionBefore = Editor.end(editor, lastBlockPath)\n\n        Transforms.insertFragment(editor, [block], {\n          at: Editor.end(editor, lastBlockPath),\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionBefore)\n        } else if (select === 'none') {\n          Transforms.deselect(editor)\n        }\n\n        return\n      }\n\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    }\n  } else {\n    if (placement === 'before') {\n      const currentSelection = editor.selection\n      const selectionStartPoint = Range.start(currentSelection)\n\n      Transforms.insertNodes(editor, [block], {\n        at: [selectionStartPoint.path[0]],\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(\n          editor,\n          Editor.start(editor, [selectionStartPoint.path[0]]),\n        )\n      } else if (select === 'end') {\n        Transforms.select(\n          editor,\n          Editor.end(editor, [selectionStartPoint.path[0]]),\n        )\n      }\n    } else if (placement === 'after') {\n      const currentSelection = editor.selection\n      const selectionEndPoint = Range.end(currentSelection)\n\n      const nextPath = [selectionEndPoint.path[0] + 1]\n\n      Transforms.insertNodes(editor, [block], {\n        at: nextPath,\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      const currentSelection = editor.selection\n      const endBlockEndPoint = Editor.start(editor, endBlockPath)\n\n      if (Range.isExpanded(currentSelection) && !editor.isTextBlock(block)) {\n        Transforms.delete(editor, {at: currentSelection})\n\n        const newSelection = editor.selection\n\n        const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n\n        Transforms.insertNodes(editor, [block], {\n          voids: true,\n        })\n\n        const adjustedSelection =\n          newSelection.anchor.offset === 0\n            ? Range.transform(newSelection, {\n                type: 'insert_node',\n                node: block,\n                path: [newSelection.anchor.path[0]],\n              })\n            : newSelection\n\n        if (select === 'none' && adjustedSelection) {\n          Transforms.select(editor, adjustedSelection)\n        }\n\n        if (focusBlock && isEqualToEmptyEditor([focusBlock], schema)) {\n          Transforms.removeNodes(editor, {at: focusBlockPath})\n        }\n\n        return\n      }\n\n      if (editor.isTextBlock(endBlock) && editor.isTextBlock(block)) {\n        const selectionStartPoint = Range.start(currentSelection)\n\n        if (isEqualToEmptyEditor([endBlock], schema)) {\n          const currentSelection = editor.selection\n\n          Transforms.insertNodes(editor, [block], {\n            at: endBlockPath,\n            select: false,\n          })\n          Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n\n          if (select === 'start') {\n            Transforms.select(editor, selectionStartPoint)\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, endBlockPath))\n          } else {\n            Transforms.select(editor, currentSelection)\n          }\n\n          return\n        }\n\n        if (select === 'end') {\n          Transforms.insertFragment(editor, [block], {\n            voids: true,\n          })\n\n          return\n        }\n\n        Transforms.insertFragment(editor, [block], {\n          at: currentSelection,\n          voids: true,\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionStartPoint)\n        } else {\n          if (!Point.equals(selectionStartPoint, endBlockEndPoint)) {\n            Transforms.select(editor, selectionStartPoint)\n          }\n        }\n      } else {\n        if (!editor.isTextBlock(endBlock)) {\n          Transforms.insertNodes(editor, [block], {select: false})\n\n          const nextPath = [endBlockPath[0] + 1]\n\n          if (select === 'start') {\n            Transforms.select(editor, Editor.start(editor, nextPath))\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, nextPath))\n          }\n        } else {\n          const endBlockStartPoint = Editor.start(editor, endBlockPath)\n          const endBlockEndPoint = Editor.end(editor, endBlockPath)\n          const selectionStartPoint = Range.start(currentSelection)\n          const selectionEndPoint = Range.end(currentSelection)\n\n          if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertNodes(editor, [block], {\n              at: endBlockPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            }\n\n            if (isEqualToEmptyEditor([endBlock], schema)) {\n              Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n            }\n          } else if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            const nextPath = [endBlockPath[0] + 1]\n\n            Transforms.insertNodes(editor, [block], {\n              at: nextPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, nextPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(\n                editor,\n                Editor.start(editor, Path.next(endBlockPath)),\n              )\n            } else if (select === 'end') {\n              Transforms.select(\n                editor,\n                Editor.end(editor, Path.next(endBlockPath)),\n              )\n            }\n          } else {\n            const currentSelection = editor.selection\n            const [focusChild] = getFocusChild({editor})\n\n            if (focusChild && editor.isTextSpan(focusChild)) {\n              Transforms.insertFragment(editor, [block], {\n                at: currentSelection,\n              })\n\n              if (select === 'start' || select === 'end') {\n                Transforms.select(editor, [endBlockPath[0] + 1])\n              } else {\n                Transforms.select(editor, currentSelection)\n              }\n            } else {\n              const nextPath = [endBlockPath[0] + 1]\n              Transforms.insertNodes(editor, [block], {\n                at: nextPath,\n                select: false,\n              })\n              Transforms.select(editor, currentSelection)\n\n              if (select === 'start') {\n                Transforms.select(editor, Editor.start(editor, nextPath))\n              } else if (select === 'end') {\n                Transforms.select(editor, Editor.end(editor, nextPath))\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBackwardOperationImplementation: BehaviorOperationImplementation<\n  'move.backward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n    reverse: true,\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlatePath} from '../internal-utils/paths'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBlockOperationImplementation: BehaviorOperationImplementation<\n  'move.block'\n> = ({operation}) => {\n  const at = [toSlatePath(operation.at, operation.editor)[0]]\n  const to = [toSlatePath(operation.to, operation.editor)[0]]\n\n  Transforms.moveNodes(operation.editor, {\n    at,\n    to,\n    mode: 'highest',\n  })\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveForwardOperationImplementation: BehaviorOperationImplementation<\n  'move.forward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const selectOperationImplementation: BehaviorOperationImplementation<\n  'select'\n> = ({operation}) => {\n  const newSelection = toSlateRange(operation.at, operation.editor)\n\n  if (newSelection) {\n    Transforms.select(operation.editor, newSelection)\n  } else {\n    Transforms.deselect(operation.editor)\n  }\n}\n","import type {\n  AbstractBehaviorEventType,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types.event'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {removeDecoratorOperationImplementation} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {\n  historyRedoOperationImplementation,\n  historyUndoOperationImplementation,\n} from '../editor/plugins/createWithUndoRedo'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {addAnnotationOperationImplementation} from './behavior.operation.annotation.add'\nimport {removeAnnotationOperationImplementation} from './behavior.operation.annotation.remove'\nimport {blockSetOperationImplementation} from './behavior.operation.block.set'\nimport {blockUnsetOperationImplementation} from './behavior.operation.block.unset'\nimport {decoratorAddOperationImplementation} from './behavior.operation.decorator.add'\nimport {deleteOperationImplementation} from './behavior.operation.delete'\nimport {insertInlineObjectOperationImplementation} from './behavior.operation.insert-inline-object'\nimport {insertSpanOperationImplementation} from './behavior.operation.insert-span'\nimport {insertBlockOperationImplementation} from './behavior.operation.insert.block'\nimport {insertTextOperationImplementation} from './behavior.operation.insert.text'\nimport {moveBackwardOperationImplementation} from './behavior.operation.move.backward'\nimport {moveBlockOperationImplementation} from './behavior.operation.move.block'\nimport {moveForwardOperationImplementation} from './behavior.operation.move.forward'\nimport {selectOperationImplementation} from './behavior.operation.select'\n\nexport type BehaviorOperationImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorOperationImplementation<\n  TBehaviorOperationType extends BehaviorOperation['type'],\n  TReturnType = void,\n> = ({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: PickFromUnion<BehaviorOperation, 'type', TBehaviorOperationType>\n}) => TReturnType\n\ntype BehaviorOperation = OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> & {\n  editor: PortableTextSlateEditor\n}\n\ntype BehaviorOperationImplementations = {\n  [TBehaviorOperationType in BehaviorOperation['type']]: BehaviorOperationImplementation<TBehaviorOperationType>\n}\n\nconst behaviorOperationImplementations: BehaviorOperationImplementations = {\n  'annotation.add': addAnnotationOperationImplementation,\n  'annotation.remove': removeAnnotationOperationImplementation,\n  'block.set': blockSetOperationImplementation,\n  'block.unset': blockUnsetOperationImplementation,\n  'decorator.add': decoratorAddOperationImplementation,\n  'decorator.remove': removeDecoratorOperationImplementation,\n  'delete': deleteOperationImplementation,\n  'history.redo': historyRedoOperationImplementation,\n  'history.undo': historyUndoOperationImplementation,\n  'insert.block': insertBlockOperationImplementation,\n  'insert.inline object': insertInlineObjectOperationImplementation,\n  'insert.span': insertSpanOperationImplementation,\n  'insert.text': insertTextOperationImplementation,\n  'move.backward': moveBackwardOperationImplementation,\n  'move.block': moveBlockOperationImplementation,\n  'move.forward': moveForwardOperationImplementation,\n  'select': selectOperationImplementation,\n}\n\nexport function performOperation({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: BehaviorOperation\n}) {\n  try {\n    switch (operation.type) {\n      case 'annotation.add': {\n        behaviorOperationImplementations['annotation.add']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'annotation.remove': {\n        behaviorOperationImplementations['annotation.remove']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'block.set': {\n        behaviorOperationImplementations['block.set']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'block.unset': {\n        behaviorOperationImplementations['block.unset']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'decorator.add': {\n        behaviorOperationImplementations['decorator.add']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'decorator.remove': {\n        behaviorOperationImplementations['decorator.remove']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'delete': {\n        behaviorOperationImplementations.delete({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'history.redo': {\n        behaviorOperationImplementations['history.redo']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'history.undo': {\n        behaviorOperationImplementations['history.undo']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.block': {\n        behaviorOperationImplementations['insert.block']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.inline object': {\n        behaviorOperationImplementations['insert.inline object']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.span': {\n        behaviorOperationImplementations['insert.span']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.text': {\n        behaviorOperationImplementations['insert.text']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.backward': {\n        behaviorOperationImplementations['move.backward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.block': {\n        behaviorOperationImplementations['move.block']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.forward': {\n        behaviorOperationImplementations['move.forward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      default: {\n        behaviorOperationImplementations.select({\n          context,\n          operation: operation,\n        })\n        break\n      }\n    }\n  } catch (error) {\n    console.error(\n      new Error(\n        `Executing \"${operation.type}\" failed due to: ${error.message}`,\n      ),\n    )\n  }\n}\n","import {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_OPERATION_ID: WeakMap<Editor, string | undefined> = new WeakMap()\n\nexport function withApplyingBehaviorOperations(editor: Editor, fn: () => void) {\n  CURRENT_OPERATION_ID.set(editor, defaultKeyGenerator())\n  Editor.withoutNormalizing(editor, fn)\n  CURRENT_OPERATION_ID.set(editor, undefined)\n}\n\nexport function getCurrentOperationId(editor: Editor) {\n  return CURRENT_OPERATION_ID.get(editor)\n}\n\nexport function isApplyingBehaviorOperations(editor: Editor) {\n  return getCurrentOperationId(editor) !== undefined\n}\n","import {Editor} from 'slate'\nimport {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {insertTextOperationImplementation} from '../../operations/behavior.operation.insert.text'\nimport {performOperation} from '../../operations/behavior.operations'\nimport type {EditorActor} from '../editor-machine'\nimport {isApplyingBehaviorOperations} from '../with-applying-behavior-operations'\n\nexport function createWithEventListeners(editorActor: EditorActor) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    const {delete: editorDelete, select} = editor\n\n    editor.delete = (options) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        editorDelete(options)\n        return\n      }\n\n      const at = options?.at ?? editor.selection\n\n      if (!at) {\n        console.error('Unexpected call to .delete(...) without `at` option')\n        return\n      }\n\n      const range = Editor.range(editor, at)\n\n      const selection = slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor,\n        range,\n      })\n\n      if (!selection) {\n        console.error(\n          'Unexpected call to .delete(...) with invalid `at` option',\n        )\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete',\n          at: selection,\n          direction: options?.reverse ? 'backward' : 'forward',\n          unit: options?.unit,\n        },\n        editor,\n      })\n    }\n\n    editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .deleteBackward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .deleteForward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .insertBreak(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertData = (dataTransfer) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .insertData(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'input.*',\n          originEvent: {\n            dataTransfer,\n          },\n        },\n        editor,\n      })\n    }\n\n    editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertTextOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text: '\\n', editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertTextOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text, editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.redo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.redo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.select = (location) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        select(location)\n        return\n      }\n\n      const range = Editor.range(editor, location)\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          at: slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range,\n          }),\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.setFragmentData = () => {\n      console.error('Unexpected call to .setFragmentData(...)')\n      return\n    }\n\n    editor.undo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.undo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(editorActor: EditorActor) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        const existingKeys = [...Node.descendants(editor)].map(\n          ([node]) => node._key,\n        )\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key:\n              operation.properties._key === undefined ||\n              existingKeys.includes(operation.properties._key)\n                ? editorActor.getSnapshot().context.keyGenerator()\n                : operation.properties._key,\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          const existingKeys = [...Node.descendants(editor)].map(\n            ([node]) => node._key,\n          )\n\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key:\n                operation.node._key === undefined ||\n                existingKeys.includes(operation.node._key)\n                  ? editorActor.getSnapshot().context.keyGenerator()\n                  : operation.node._key,\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (\n        Element.isElement(node) &&\n        node._type === editorActor.getSnapshot().context.schema.block.name\n      ) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {Path, PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {Element, Node, Text, Transforms, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {isKeyedSegment} from '../utils'\nimport {isEqualToEmptyEditor, toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schema: EditorSchema,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schema)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\nfunction diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  if (!child) {\n    return false\n  }\n\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block.node) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child.node)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.node.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.node.text, newValue), 5)\n\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({\n        type: 'insert_text',\n        path: [block.index, child.index],\n        offset,\n        text,\n      })\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({\n        type: 'remove_text',\n        path: [block.index, child.index],\n        offset: offset,\n        text,\n      })\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schema: EditorSchema,\n) {\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    return false\n  }\n\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes: schema},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = block.index\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n\n    const editorWasEmptyBefore = isEqualToEmptyEditor(editor.children, schema)\n\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n\n    if (\n      editorWasEmptyBefore &&\n      typeof patch.path[0] === 'number' &&\n      patch.path[0] === 0\n    ) {\n      Transforms.removeNodes(editor, {\n        at: [position === 'before' ? targetBlockIndex + 1 : targetBlockIndex],\n      })\n    }\n\n    return true\n  }\n\n  // Insert children\n  const {items, position} = patch\n\n  const targetChild = findBlockChild(block, patch.path)\n\n  if (!targetChild) {\n    return false\n  }\n\n  const childrenToInsert = toSlateValue(\n    [{...block.node, children: items as PortableTextChild[]}],\n    {schemaTypes: schema},\n    KEY_TO_SLATE_ELEMENT.get(editor),\n  )\n  const normalizedIdx =\n    position === 'after' ? targetChild.index + 1 : targetChild.index\n  const childInsertPath = [block.index, normalizedIdx]\n\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  const isTextBlock = editor.isTextBlock(block.node)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    return false\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  // If this is targeting a text block child\n  if (isTextBlock && child) {\n    if (Text.isText(child.node)) {\n      if (Text.isText(value)) {\n        const oldText = child.node.text\n        const newText = value.text\n        if (oldText !== newText) {\n          editor.apply({\n            type: 'remove_text',\n            path: [block.index, child.index],\n            offset: 0,\n            text: oldText,\n          })\n          editor.apply({\n            type: 'insert_text',\n            path: [block.index, child.index],\n            offset: 0,\n            text: newText,\n          })\n          // call OnChange here to emit the new selection\n          // the user's selection might be interfering with\n          editor.onChange()\n        }\n      } else {\n        // Setting non-text span property\n\n        const propPath = patch.path.slice(3)\n        const propEntry = propPath.at(0)\n        const reservedProps = ['_key', '_type', 'text']\n\n        if (propEntry === undefined) {\n          return false\n        }\n\n        if (\n          typeof propEntry === 'string' &&\n          reservedProps.includes(propEntry)\n        ) {\n          return false\n        }\n\n        const newNode = applyAll(child.node, [\n          {\n            ...patch,\n            path: propPath,\n          },\n        ])\n\n        Transforms.setNodes(editor, newNode, {at: [block.index, child.index]})\n      }\n    } else {\n      // Setting inline object property\n\n      const propPath = patch.path.slice(3)\n      const reservedProps = ['_key', '_type', 'children', '__inline']\n      const propEntry = propPath.at(0)\n\n      if (propEntry === undefined) {\n        return false\n      }\n\n      if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n        return false\n      }\n\n      // If the child is an inline object, we need to apply the patch to the\n      // `value` property object.\n      const value =\n        'value' in child.node && typeof child.node.value === 'object'\n          ? child.node.value\n          : {}\n\n      const newValue = applyAll(value, [\n        {\n          ...patch,\n          path: patch.path.slice(3),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...child.node, value: newValue},\n        {at: [block.index, child.index]},\n      )\n    }\n\n    return true\n  } else if (Element.isElement(block.node) && patch.path.length === 1) {\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block.node || {\n      children: undefined,\n    }\n\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: [block.index],\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    const blockNode = block.node\n\n    blockNode.children.forEach((child, childIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: [block.index, blockNode.children.length - 1 - childIndex],\n        node: child,\n      })\n    })\n\n    if (Array.isArray(children)) {\n      children.forEach((child, childIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: [block.index, childIndex],\n          node: child,\n        })\n      })\n    }\n  } else if (block && 'value' in block.node) {\n    if (patch.path.length > 1 && patch.path[1] !== 'children') {\n      const newVal = applyAll(block.node.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...block.node, value: newVal},\n        {at: [block.index]},\n      )\n    } else {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n\n    const children = Node.children(editor, [], {\n      reverse: true,\n    })\n\n    for (const [_, path] of children) {\n      Transforms.removeNodes(editor, {at: path})\n    }\n\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    return true\n  }\n\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    Transforms.removeNodes(editor, {at: [block.index]})\n\n    return true\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  // Unset on text block children\n  if (editor.isTextBlock(block.node) && child) {\n    if (patch.path[1] === 'children' && patch.path.length === 3) {\n      Transforms.removeNodes(editor, {at: [block.index, child.index]})\n\n      return true\n    }\n  }\n\n  if (child && !Text.isText(child.node)) {\n    // Unsetting inline object property\n\n    const propPath = patch.path.slice(3)\n    const propEntry = propPath.at(0)\n    const reservedProps = ['_key', '_type', 'children', '__inline']\n\n    if (propEntry === undefined) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n      // All custom properties are stored on the `value` property object.\n      // If you try to unset any of the other top-level properties it's a\n      // no-op.\n      return false\n    }\n\n    const value =\n      'value' in child.node && typeof child.node.value === 'object'\n        ? child.node.value\n        : {}\n\n    const newValue = applyAll(value, [\n      {\n        ...patch,\n        path: patch.path.slice(3),\n      },\n    ])\n\n    Transforms.setNodes(\n      editor,\n      {...child.node, value: newValue},\n      {at: [block.index, child.index]},\n    )\n\n    return true\n  }\n\n  if (child && Text.isText(child.node)) {\n    const propPath = patch.path.slice(3)\n    const propEntry = propPath.at(0)\n    const reservedProps = ['_key', '_type']\n\n    if (propEntry === undefined) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && propEntry === 'text') {\n      editor.apply({\n        type: 'remove_text',\n        path: [block.index, child.index],\n        offset: 0,\n        text: child.node.text,\n      })\n\n      return true\n    }\n\n    const newNode = applyAll(child.node, [\n      {\n        ...patch,\n        path: propPath,\n      },\n    ])\n    const newKeys = Object.keys(newNode)\n\n    const removedProperties = Object.keys(child.node).filter(\n      (property) => !newKeys.includes(property),\n    )\n\n    Transforms.unsetNodes(editor, removedProperties, {\n      at: [block.index, child.index],\n    })\n\n    return true\n  }\n\n  if (!child) {\n    if ('value' in block.node) {\n      const newVal = applyAll(block.node.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...block.node, value: newVal},\n        {at: [block.index]},\n      )\n\n      return true\n    }\n\n    return false\n  }\n\n  return false\n}\n\nfunction findBlock(\n  children: Descendant[],\n  path: Path,\n): {node: Descendant; index: number} | undefined {\n  let blockIndex = -1\n\n  const block = children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n\n    if (isMatch) {\n      blockIndex = index\n    }\n\n    return isMatch\n  })\n\n  if (!block) {\n    return undefined\n  }\n\n  return {node: block, index: blockIndex}\n}\n\nfunction findBlockChild(\n  block: {node: Descendant; index: number},\n  path: Path,\n): {node: Descendant; index: number} | undefined {\n  const blockNode = block.node\n\n  if (!Element.isElement(blockNode) || path[1] !== 'children') {\n    return undefined\n  }\n\n  let childIndex = -1\n\n  const child = blockNode.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n\n    if (isMatch) {\n      childIndex = index\n    }\n\n    return isMatch\n  })\n\n  if (!child) {\n    return undefined\n  }\n\n  return {\n    node: child,\n    index: childIndex,\n  }\n}\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {isSpan, isTextBlock} from './parse-blocks'\nimport {fromSlateValue} from './values'\n\nexport function insertTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block =\n    isTextBlock({schema}, children[operation.path[0]]) &&\n    children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const textChild =\n    isTextBlock({schema}, block) &&\n    isSpan({schema}, block.children[operation.path[1]]) &&\n    (block.children[operation.path[1]] as PortableTextSpan)\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const prevBlock = beforeValue[operation.path[0]]\n  const prevChild =\n    isTextBlock({schema}, prevBlock) && prevBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevChild) ? prevChild.text : ''\n  const patch = diffMatchPatch(prevText, textChild.text, path)\n  return patch.value.length ? [patch] : []\n}\n\nexport function removeTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: RemoveTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const child =\n    (isTextBlock({schema}, block) && block.children[operation.path[1]]) ||\n    undefined\n  const textChild: PortableTextSpan | undefined = isSpan({schema}, child)\n    ? child\n    : undefined\n  if (child && !textChild) {\n    throw new Error('Expected span')\n  }\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const beforeBlock = beforeValue[operation.path[0]]\n  const prevTextChild =\n    isTextBlock({schema}, beforeBlock) &&\n    beforeBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevTextChild) && prevTextChild.text\n  const patch = diffMatchPatch(prevText || '', textChild.text, path)\n  return patch.value ? [patch] : []\n}\n\nexport function setNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SetNodeOperation,\n): Array<Patch> {\n  if (operation.path.length === 1) {\n    const block = children[operation.path[0]]\n    if (typeof block._key !== 'string') {\n      throw new Error('Expected block to have a _key')\n    }\n    const setNode = omitBy(\n      {...children[operation.path[0]], ...operation.newProperties},\n      isUndefined,\n    ) as unknown as Descendant\n    return [\n      set(fromSlateValue([setNode], schema.block.name)[0], [\n        {_key: block._key},\n      ]),\n    ]\n  } else if (operation.path.length === 2) {\n    const block = children[operation.path[0]]\n    if (isTextBlock({schema}, block)) {\n      const child = block.children[operation.path[1]]\n      if (child) {\n        const blockKey = block._key\n        const childKey = child._key\n        const patches: Patch[] = []\n        const keys = Object.keys(operation.newProperties)\n        keys.forEach((keyName) => {\n          // Special case for setting _key on a child. We have to target it by index and not the _key.\n          if (keys.length === 1 && keyName === '_key') {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                block.children.indexOf(child),\n                keyName,\n              ]),\n            )\n          } else {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                {_key: childKey},\n                keyName,\n              ]),\n            )\n          }\n        })\n        return patches\n      }\n      throw new Error('Could not find a valid child')\n    }\n    throw new Error('Could not find a valid block')\n  } else {\n    throw new Error(\n      `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n    )\n  }\n}\n\nexport function insertNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    const position = operation.path[0] === 0 ? 'before' : 'after'\n    const beforeBlock = beforeValue[operation.path[0] - 1]\n    const targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key\n    if (targetKey) {\n      return [\n        insert(\n          [\n            fromSlateValue(\n              [operation.node as Descendant],\n              schema.block.name,\n            )[0],\n          ],\n          position,\n          [{_key: targetKey}],\n        ),\n      ]\n    }\n    return [\n      setIfMissing(beforeValue, []),\n      insert(\n        [fromSlateValue([operation.node as Descendant], schema.block.name)[0]],\n        'before',\n        [operation.path[0]],\n      ),\n    ]\n  } else if (\n    isTextBlock({schema}, block) &&\n    operation.path.length === 2 &&\n    children[operation.path[0]]\n  ) {\n    const position =\n      block.children.length === 0 || !block.children[operation.path[1] - 1]\n        ? 'before'\n        : 'after'\n    const node = {...operation.node} as Descendant\n    if (!node._type && Text.isText(node)) {\n      node._type = 'span'\n      node.marks = []\n    }\n    const blk = fromSlateValue(\n      [\n        {\n          _key: 'bogus',\n          _type: schema.block.name,\n          children: [node],\n        },\n      ],\n      schema.block.name,\n    )[0] as PortableTextTextBlock\n    const child = blk.children[0]\n    return [\n      insert([child], position, [\n        {_key: block._key},\n        'children',\n        block.children.length <= 1 || !block.children[operation.path[1] - 1]\n          ? 0\n          : {_key: block.children[operation.path[1] - 1]._key},\n      ]),\n    ]\n  }\n  return []\n}\n\nexport function splitNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SplitNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n  const splitBlock = children[operation.path[0]]\n  if (!isTextBlock({schema}, splitBlock)) {\n    throw new Error(\n      `Block with path ${JSON.stringify(\n        operation.path[0],\n      )} is not a text block and can't be split`,\n    )\n  }\n  if (operation.path.length === 1) {\n    const oldBlock = beforeValue[operation.path[0]]\n    if (isTextBlock({schema}, oldBlock)) {\n      const targetValue = fromSlateValue(\n        [children[operation.path[0] + 1]],\n        schema.block.name,\n      )[0]\n      if (targetValue) {\n        patches.push(insert([targetValue], 'after', [{_key: splitBlock._key}]))\n        const spansToUnset = oldBlock.children.slice(operation.position)\n        spansToUnset.forEach((span) => {\n          const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n          patches.push(unset(path))\n        })\n      }\n    }\n    return patches\n  }\n  if (operation.path.length === 2) {\n    const splitSpan = splitBlock.children[operation.path[1]]\n    if (isSpan({schema}, splitSpan)) {\n      const targetSpans = (\n        fromSlateValue(\n          [\n            {\n              ...splitBlock,\n              children: splitBlock.children.slice(\n                operation.path[1] + 1,\n                operation.path[1] + 2,\n              ),\n            } as Descendant,\n          ],\n          schema.block.name,\n        )[0] as PortableTextTextBlock\n      ).children\n\n      patches.push(\n        insert(targetSpans, 'after', [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n        ]),\n      )\n      patches.push(\n        set(splitSpan.text, [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n          'text',\n        ]),\n      )\n    }\n    return patches\n  }\n  return patches\n}\n\nexport function removeNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: RemoveNodeOperation,\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    // Remove a single block\n    if (block && block._key) {\n      return [unset([{_key: block._key}])]\n    }\n    throw new Error('Block not found')\n  } else if (isTextBlock({schema}, block) && operation.path.length === 2) {\n    const spanToRemove = block.children[operation.path[1]]\n\n    if (spanToRemove) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === operation.node._key,\n      )\n\n      if (spansMatchingKey.length > 1) {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n        return []\n      }\n\n      return [\n        unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n      ]\n    }\n    return []\n  } else {\n    return []\n  }\n}\n\nexport function mergeNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: MergeNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n\n  const block = beforeValue[operation.path[0]]\n  const updatedBlock = children[operation.path[0]]\n\n  if (operation.path.length === 1) {\n    if (block?._key) {\n      const newBlock = fromSlateValue(\n        [children[operation.path[0] - 1]],\n        schema.block.name,\n      )[0]\n      patches.push(set(newBlock, [{_key: newBlock._key}]))\n      patches.push(unset([{_key: block._key}]))\n    } else {\n      throw new Error('Target key not found!')\n    }\n  } else if (\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, updatedBlock) &&\n    operation.path.length === 2\n  ) {\n    const updatedSpan =\n      updatedBlock.children[operation.path[1] - 1] &&\n      isSpan({schema}, updatedBlock.children[operation.path[1] - 1])\n        ? updatedBlock.children[operation.path[1] - 1]\n        : undefined\n    const removedSpan =\n      block.children[operation.path[1]] &&\n      isSpan({schema}, block.children[operation.path[1]])\n        ? block.children[operation.path[1]]\n        : undefined\n\n    if (updatedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === updatedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          set(updatedSpan.text, [\n            {_key: block._key},\n            'children',\n            {_key: updatedSpan._key},\n            'text',\n          ]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n\n    if (removedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === removedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n  }\n  return patches\n}\n\nexport function moveNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: MoveNodeOperation,\n): Array<Patch> {\n  const patches: Patch[] = []\n  const block = beforeValue[operation.path[0]]\n  const targetBlock = beforeValue[operation.newPath[0]]\n\n  if (!targetBlock) {\n    return patches\n  }\n\n  if (operation.path.length === 1) {\n    const position: InsertPosition =\n      operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n    patches.push(unset([{_key: block._key}]))\n    patches.push(\n      insert([fromSlateValue([block], schema.block.name)[0]], position, [\n        {_key: targetBlock._key},\n      ]),\n    )\n  } else if (\n    operation.path.length === 2 &&\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, targetBlock)\n  ) {\n    const child = block.children[operation.path[1]]\n    const targetChild = targetBlock.children[operation.newPath[1]]\n    const position =\n      operation.newPath[1] === targetBlock.children.length ? 'after' : 'before'\n    const childToInsert = (\n      fromSlateValue([block], schema.block.name)[0] as PortableTextTextBlock\n    ).children[operation.path[1]]\n    patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n    patches.push(\n      insert([childToInsert], position, [\n        {_key: targetBlock._key},\n        'children',\n        {_key: targetChild._key},\n      ]),\n    )\n  }\n  return patches\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {Editor, type Descendant, type Operation} from 'slate'\nimport {createApplyPatch} from '../../internal-utils/applyPatch'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  insertNodePatch,\n  insertTextPatch,\n  mergeNodePatch,\n  moveNodePatch,\n  removeNodePatch,\n  removeTextPatch,\n  setNodePatch,\n  splitNodePatch,\n} from '../../internal-utils/operation-to-patches'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../internal-utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../internal-utils/weakMaps'\nimport {withRemoteChanges} from '../../internal-utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../internal-utils/withoutPatching'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {getCurrentOperationId} from '../with-applying-behavior-operations'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\ninterface Options {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  relayActor,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(editorActor.getSnapshot().context.schema)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              for (const patch of patches) {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n\n                try {\n                  changed = applyPatch(editor, patch)\n                } catch (error) {\n                  console.error(\n                    `Applying patch ${JSON.stringify(patch)} failed due to: ${error.message}`,\n                  )\n                }\n              }\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(\n        previousChildren,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(\n        editor.children,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...insertTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...removeTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...removeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...splitNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...insertNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...setNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n            ),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...mergeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...moveNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        relayActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            editorActor.getSnapshot().context.schema.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        for (const patch of patches) {\n          editorActor.send({\n            type: 'internal.patch',\n            patch: {...patch, origin: 'local'},\n            operationId: getCurrentOperationId(editor),\n            value: fromSlateValue(\n              editor.children,\n              editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n          })\n        }\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = editorActor.getSnapshot().context.schema.styles[0].name\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    return editor\n  }\n}\n","import type {BaseRange} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../internal-utils/weakMaps'\nimport type {EditorSelection, PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection | null = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            ptRange = slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor,\n              range: editor.selection,\n            })\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'update selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'update selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      onChange()\n      if (!editorActor.getSnapshot().matches({setup: 'setting up'})) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import type {\n  PortableTextListBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  isListBlock,\n  isSpan,\n  isTextBlock,\n} from '../../internal-utils/parse-blocks'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n}: {\n  editorActor: EditorActor\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return isTextBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isSpan(editorActor.getSnapshot().context, value)\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return isListBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        editorActor.getSnapshot().context.schema.block.name !== element._type &&\n        (editorActor\n          .getSnapshot()\n          .context.schema.blockObjects.map((obj) => obj.name)\n          .includes(element._type) ||\n          editorActor\n            .getSnapshot()\n            .context.schema.inlineObjects.map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = editorActor\n        .getSnapshot()\n        .context.schema.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {\n            ...span,\n            _type: editorActor.getSnapshot().context.schema.span.name,\n            _key: key,\n          },\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {toSlateValue} from '../../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\ninterface Options {\n  editorActor: EditorActor\n}\n\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: editorActor.getSnapshot().context.schema.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style:\n              editorActor.getSnapshot().context.schema.styles[0].name ||\n              'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  editorActor\n                    .getSnapshot()\n                    .context.schema.decorators.find(\n                      ({name}) => name === decorator,\n                    ),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import {Range} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {getNextSpan, getPreviousSpan} from './sibling-utils'\nimport {getFocusBlock, getFocusSpan, getSelectedSpans} from './slate-utils'\n\nexport type MarkState = {\n  state: 'changed' | 'unchanged'\n  marks: Array<string>\n}\n\n/**\n * Given that text is inserted at the current position, what marks should\n * be applied?\n */\nexport function getMarkState({\n  schema,\n  editor,\n}: {\n  schema: EditorSchema\n  editor: PortableTextSlateEditor\n}): MarkState | undefined {\n  if (!editor.selection) {\n    return undefined\n  }\n\n  const [block, blockPath] = getFocusBlock({\n    editor,\n  })\n  const [span, spanPath] = getFocusSpan({\n    editor,\n  })\n\n  if (!block || !editor.isTextBlock(block) || !span) {\n    return undefined\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    const selectedSpans = getSelectedSpans({editor})\n\n    let index = 0\n    let marks: Array<string> = []\n\n    for (const [span] of selectedSpans) {\n      if (index === 0) {\n        marks = span.marks ?? []\n      } else {\n        if (\n          span.marks?.length === 0 ||\n          (span.marks ?? [])?.some((mark) => !marks.includes(mark))\n        ) {\n          marks = []\n        }\n      }\n\n      index++\n    }\n\n    return {\n      state: 'unchanged',\n      marks,\n    }\n  }\n\n  const decorators = schema.decorators.map((decorator) => decorator.name)\n  const marks = span.marks ?? []\n  const marksWithoutAnnotations = marks.filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  const spanHasAnnotations = marks.length > marksWithoutAnnotations.length\n\n  const spanIsEmpty = span.text.length === 0\n\n  const atTheBeginningOfSpan = editor.selection.anchor.offset === 0\n  const atTheEndOfSpan = editor.selection.anchor.offset === span.text.length\n\n  const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n  const nextSpan = getNextSpan({editor, blockPath, spanPath})\n  const nextSpanAnnotations =\n    nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n  const spanAnnotations = marks.filter((mark) => !decorators.includes(mark))\n\n  const previousSpanHasAnnotations = previousSpan\n    ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n    : false\n  const previousSpanHasSameAnnotations = previousSpan\n    ? previousSpan.marks\n        ?.filter((mark) => !decorators.includes(mark))\n        .every((mark) => marks.includes(mark))\n    : false\n  const previousSpanHasSameAnnotation = previousSpan\n    ? previousSpan.marks?.some(\n        (mark) => !decorators.includes(mark) && marks.includes(mark),\n      )\n    : false\n\n  const previousSpanHasSameMarks = previousSpan\n    ? previousSpan.marks?.every((mark) => marks.includes(mark))\n    : false\n  const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n    nextSpanAnnotations?.includes(mark),\n  )\n\n  if (spanHasAnnotations && !spanIsEmpty) {\n    if (atTheBeginningOfSpan) {\n      if (previousSpanHasSameMarks) {\n        return {\n          state: 'changed',\n          marks: previousSpan?.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotations) {\n        return {\n          state: 'changed',\n          marks: previousSpan?.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotation) {\n        return {\n          state: 'unchanged',\n          marks: span.marks ?? [],\n        }\n      } else if (!previousSpan) {\n        return {\n          state: 'changed',\n          marks: [],\n        }\n      }\n    }\n\n    if (atTheEndOfSpan) {\n      if (\n        (nextSpan &&\n          nextSpanSharesSomeAnnotations &&\n          nextSpanAnnotations.length < spanAnnotations.length) ||\n        !nextSpanSharesSomeAnnotations\n      ) {\n        return {\n          state: 'changed',\n          marks: nextSpan?.marks ?? [],\n        }\n      }\n\n      if (!nextSpan) {\n        return {\n          state: 'changed',\n          marks: [],\n        }\n      }\n    }\n  }\n\n  if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n    if (previousSpanHasAnnotations) {\n      return {\n        state: 'changed',\n        marks: [],\n      }\n    } else {\n      return {\n        state: 'changed',\n        marks: (previousSpan?.marks ?? []).filter((mark) =>\n          decorators.includes(mark),\n        ),\n      }\n    }\n  }\n\n  return {\n    state: 'unchanged',\n    marks: span.marks ?? [],\n  }\n}\n","import {getMarkState} from '../../internal-utils/mark-state'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorContext} from '../editor-snapshot'\n\nexport function pluginUpdateMarkState(\n  context: Pick<EditorContext, 'schema'>,\n  editor: PortableTextSlateEditor,\n) {\n  const {apply} = editor\n\n  editor.apply = (operation) => {\n    apply(operation)\n\n    editor.markState = getMarkState({\n      editor,\n      schema: context.schema,\n    })\n  }\n\n  return editor\n}\n","import type {EditorSchema} from '../editor/editor-schema'\nimport {isTypedObject} from './asserters'\n\ntype Path = Array<number>\n\nexport type PortableTextNode<TEditorSchema extends EditorSchema> =\n  | EditorNode<TEditorSchema>\n  | TextBlockNode<TEditorSchema>\n  | SpanNode<TEditorSchema>\n  | PartialSpanNode\n  | ObjectNode\n\n//////////\n\nexport type EditorNode<TEditorSchema extends EditorSchema> = {\n  children: Array<TextBlockNode<TEditorSchema> | ObjectNode>\n}\n\nexport function isEditorNode<TEditorSchema extends EditorSchema>(\n  node: unknown,\n): node is EditorNode<TEditorSchema> {\n  if (typeof node === 'object' && node !== null) {\n    return (\n      !('_type' in node) && 'children' in node && Array.isArray(node.children)\n    )\n  }\n\n  return false\n}\n\n//////////\n\nexport type TextBlockNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type: TEditorSchema['block']['name']\n  children: Array<SpanNode<TEditorSchema> | ObjectNode>\n  [other: string]: unknown\n}\n\nexport function isTextBlockNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is TextBlockNode<TEditorSchema> {\n  return isTypedObject(node) && node._type === context.schema.block.name\n}\n\n//////////\n\nexport type SpanNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type?: TEditorSchema['span']['name']\n  text: string\n  [other: string]: unknown\n}\n\nexport function isSpanNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is SpanNode<TEditorSchema> {\n  if (typeof node !== 'object' || node === null) {\n    return false\n  }\n\n  if ('children' in node) {\n    return false\n  }\n\n  if ('_type' in node) {\n    return node._type === context.schema.span.name\n  }\n\n  return 'text' in node\n}\n\n//////////\n\nexport type PartialSpanNode = {\n  text: string\n  [other: string]: unknown\n}\n\nexport function isPartialSpanNode(node: unknown): node is PartialSpanNode {\n  return (\n    typeof node === 'object' &&\n    node !== null &&\n    'text' in node &&\n    typeof node.text === 'string'\n  )\n}\n\n//////////\n\nexport type ObjectNode = {\n  _type: string\n  _key: string\n  [other: string]: unknown\n}\n\nexport function isObjectNode(\n  context: {schema: EditorSchema},\n  node: unknown,\n): node is ObjectNode {\n  return (\n    !isEditorNode(node) &&\n    !isTextBlockNode(context, node) &&\n    !isSpanNode(context, node) &&\n    !isPartialSpanNode(node)\n  )\n}\n\n/**\n *\n */\nexport function getBlock<TEditorSchema extends EditorSchema>(\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): TextBlockNode<TEditorSchema> | ObjectNode | undefined {\n  const index = path.at(0)\n\n  if (index === undefined || path.length !== 1) {\n    return undefined\n  }\n\n  return root.children.at(index)\n}\n\n/**\n * A \"node\" can either be\n * 1. The root (path length is 0)\n * 2. A block (path length is 1)\n * 3. A span (path length is 2)\n * 4. Or an inline object (path length is 2)\n */\nexport function getNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): PortableTextNode<TEditorSchema> | undefined {\n  if (path.length === 0) {\n    return root\n  }\n\n  if (path.length === 1) {\n    return getBlock(root, path)\n  }\n\n  if (path.length === 2) {\n    const block = getBlock(root, path.slice(0, 1))\n\n    if (!block || !isTextBlockNode(context, block)) {\n      return undefined\n    }\n\n    const child = block.children.at(path[1])\n\n    if (!child) {\n      return undefined\n    }\n\n    return child\n  }\n}\n\nexport function getSpan<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  const node = getNode(context, root, path)\n\n  if (node && isSpanNode(context, node)) {\n    return node\n  }\n\n  return undefined\n}\n\n/**\n * A parent can either be the root or a text block\n */\nexport function getParent<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  if (path.length === 0) {\n    return undefined\n  }\n\n  const parentPath = path.slice(0, -1)\n\n  if (parentPath.length === 0) {\n    return root\n  }\n\n  const blockIndex = parentPath.at(0)\n\n  if (blockIndex === undefined || parentPath.length !== 1) {\n    return undefined\n  }\n\n  const block = root.children.at(blockIndex)\n\n  if (block && isTextBlockNode(context, block)) {\n    return block\n  }\n\n  return undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {createDraft, finishDraft, type WritableDraft} from 'immer'\nimport {Element, Path, type Node, type Operation} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {OmitFromUnion} from '../type-utils'\nimport {\n  getBlock,\n  getNode,\n  getParent,\n  getSpan,\n  isEditorNode,\n  isObjectNode,\n  isPartialSpanNode,\n  isSpanNode,\n  isTextBlockNode,\n  type PortableTextNode,\n  type SpanNode,\n  type TextBlockNode,\n} from './portable-text-node'\n\nexport function applyOperationToPortableText(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  value: Array<PortableTextBlock>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  const draft = createDraft({children: value})\n\n  try {\n    applyOperationToPortableTextDraft(context, draft, operation)\n  } catch (e) {\n    console.error(e)\n  }\n\n  return finishDraft(draft).children\n}\n\nfunction applyOperationToPortableTextDraft(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  root: WritableDraft<{\n    children: Array<PortableTextBlock>\n  }>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  switch (operation.type) {\n    case 'insert_node': {\n      const {path, node: insertedNode} = operation\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (index > parent.children.length) {\n        break\n      }\n\n      if (path.length === 1) {\n        // Inserting block at the root\n\n        if (isTextBlockNode(context, insertedNode)) {\n          // Text blocks can be inserted as is\n\n          parent.children.splice(index, 0, {\n            ...insertedNode,\n            children: insertedNode.children.map((child) => {\n              if ('__inline' in child) {\n                // Except for inline object children which need to have their\n                // `value` spread onto the block\n                return {\n                  _key: child._key,\n                  _type: child._type,\n                  ...('value' in child && typeof child.value === 'object'\n                    ? child.value\n                    : {}),\n                }\n              }\n\n              return child\n            }),\n          })\n\n          break\n        }\n\n        if (Element.isElement(insertedNode) && !('__inline' in insertedNode)) {\n          // Void blocks have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      if (path.length === 2) {\n        // Inserting children into blocks\n\n        if (!isTextBlockNode(context, parent)) {\n          // Only text blocks can have children\n          break\n        }\n\n        if (isPartialSpanNode(insertedNode)) {\n          // Text nodes can be inserted as is\n\n          parent.children.splice(index, 0, insertedNode)\n          break\n        }\n\n        if ('__inline' in insertedNode) {\n          // Void children have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      break\n    }\n\n    case 'insert_text': {\n      const {path, offset, text} = operation\n      if (text.length === 0) break\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset)\n      span.text = before + text + after\n\n      break\n    }\n\n    case 'merge_node': {\n      const {path} = operation\n      const node = getNode(context, root, path)\n      const prevPath = Path.previous(path)\n      const prev = getNode(context, root, prevPath)\n      const parent = getParent(context, root, path)\n\n      if (!node || !prev || !parent) {\n        break\n      }\n\n      const index = path[path.length - 1]\n\n      if (isPartialSpanNode(node) && isPartialSpanNode(prev)) {\n        prev.text += node.text\n      } else if (\n        isTextBlockNode(context, node) &&\n        isTextBlockNode(context, prev)\n      ) {\n        prev.children.push(...node.children)\n      } else {\n        break\n      }\n\n      parent.children.splice(index, 1)\n\n      break\n    }\n\n    case 'move_node': {\n      const {path, newPath} = operation\n\n      if (Path.isAncestor(path, newPath)) {\n        break\n      }\n\n      const node = getNode(context, root, path)\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!node || !parent) {\n        break\n      }\n\n      // This is tricky, but since the `path` and `newPath` both refer to\n      // the same snapshot in time, there's a mismatch. After either\n      // removing the original position, the second step's path can be out\n      // of date. So instead of using the `op.newPath` directly, we\n      // transform `op.path` to ascertain what the `newPath` would be after\n      // the operation was applied.\n      parent.children.splice(index, 1)\n      const truePath = Path.transform(path, operation)!\n      const newParent = getNode(context, root, Path.parent(truePath))\n      const newIndex = truePath[truePath.length - 1]\n\n      if (!newParent) {\n        break\n      }\n\n      if (!('children' in newParent)) {\n        break\n      }\n\n      if (!Array.isArray(newParent.children)) {\n        break\n      }\n\n      newParent.children.splice(newIndex, 0, node)\n\n      break\n    }\n\n    case 'remove_node': {\n      const {path} = operation\n      const index = path[path.length - 1]\n      const parent = getParent(context, root, path)\n      parent?.children.splice(index, 1)\n\n      break\n    }\n\n    case 'remove_text': {\n      const {path, offset, text} = operation\n\n      if (text.length === 0) {\n        break\n      }\n\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset + text.length)\n      span.text = before + after\n\n      break\n    }\n\n    case 'set_node': {\n      const {path, properties, newProperties} = operation\n\n      const node = getNode(context, root, path)\n\n      if (!node) {\n        break\n      }\n\n      if (isEditorNode(node)) {\n        break\n      }\n\n      if (isObjectNode(context, node)) {\n        const valueBefore = (\n          'value' in properties && typeof properties.value === 'object'\n            ? properties.value\n            : {}\n        ) as Partial<Node>\n        const valueAfter = (\n          'value' in newProperties && typeof newProperties.value === 'object'\n            ? newProperties.value\n            : {}\n        ) as Partial<Node>\n\n        for (const key in newProperties) {\n          if (key === 'value') {\n            continue\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in properties) {\n          if (key === 'value') {\n            continue\n          }\n\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        for (const key in valueAfter) {\n          const value = valueAfter[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in valueBefore) {\n          if (!valueAfter.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isTextBlockNode(context, node)) {\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof Partial<Node>>key]\n          } else {\n            node[<keyof Partial<Node>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof Partial<Node>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isPartialSpanNode(node)) {\n        for (const key in newProperties) {\n          if (key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      break\n    }\n\n    case 'split_node': {\n      const {path, position, properties} = operation\n\n      if (path.length === 0) {\n        break\n      }\n\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (isEditorNode(parent)) {\n        const block = getBlock(root, path)\n\n        if (!block || !isTextBlockNode(context, block)) {\n          break\n        }\n\n        const before = block.children.slice(0, position)\n        const after = block.children.slice(position)\n        block.children = before\n\n        // _key is deliberately left out\n        const newTextBlockNode = {\n          ...properties,\n          children: after,\n          _type: context.schema.block.name,\n        } as unknown as TextBlockNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newTextBlockNode)\n\n        break\n      }\n\n      if (isTextBlockNode(context, parent)) {\n        const node = getNode(context, root, path)\n\n        if (!node || !isSpanNode(context, node)) {\n          break\n        }\n\n        const before = node.text.slice(0, position)\n        const after = node.text.slice(position)\n        node.text = before\n\n        // _key is deliberately left out\n        const newSpanNode = {\n          ...properties,\n          text: after,\n        } as unknown as SpanNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newSpanNode)\n      }\n\n      break\n    }\n  }\n\n  return root\n}\n","import {applyOperationToPortableText} from '../../internal-utils/apply-operation-to-portable-text'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorContext} from '../editor-snapshot'\n\nexport function pluginUpdateValue(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  editor: PortableTextSlateEditor,\n) {\n  const {apply} = editor\n\n  editor.apply = (operation) => {\n    if (operation.type === 'set_selection') {\n      apply(operation)\n      return\n    }\n\n    editor.value = applyOperationToPortableText(\n      context,\n      editor.value,\n      operation,\n    )\n\n    apply(operation)\n  }\n\n  return editor\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\nimport {pluginUpdateMarkState} from './slate-plugin.update-mark-state'\nimport {pluginUpdateValue} from './slate-plugin.update-value'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor, relayActor} = options\n  const withObjectKeys = createWithObjectKeys(editorActor)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    relayActor,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor)\n  const withPortableTextBlockStyle =\n    createWithPortableTextBlockStyle(editorActor)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n  })\n  const withPortableTextSelections =\n    createWithPortableTextSelections(editorActor)\n  const withEventListeners = createWithEventListeners(editorActor)\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPlaceholderBlock(\n              withUtils(\n                withMaxBlocks(\n                  withUndoRedo(\n                    withPatches(\n                      withPortableTextSelections(\n                        pluginUpdateValue(\n                          editorActor.getSnapshot().context,\n                          pluginUpdateMarkState(\n                            editorActor.getSnapshot().context,\n                            e,\n                          ),\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport {createPlaceholderBlock} from '../internal-utils/create-placeholder-block'\nimport {debugWithName} from '../internal-utils/debug'\nimport {toSlateValue} from '../internal-utils/values'\nimport {\n  KEY_TO_SLATE_ELEMENT,\n  KEY_TO_VALUE_ELEMENT,\n} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\nimport type {RelayActor} from './relay-machine'\n\nconst debug = debugWithName('setup')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  debug('Creating new Slate editor instance')\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    relayActor: config.relayActor,\n    subscriptions: config.subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  instance.decoratorState = {}\n  instance.markState = undefined\n  instance.value = [\n    createPlaceholderBlock(config.editorActor.getSnapshot().context),\n  ]\n\n  const initialValue = toSlateValue(instance.value, {\n    schemaTypes: config.editorActor.getSnapshot().context.schema,\n  })\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  return slateEditor\n}\n","import * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst addAnnotationOnCollapsedSelection = defineBehavior({\n  on: 'annotation.add',\n  guard: ({snapshot}) => {\n    if (!selectors.isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const caretWordSelection = selectors.getCaretWordSelection(snapshot)\n\n    if (\n      !caretWordSelection ||\n      !selectors.isSelectionExpanded({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: caretWordSelection,\n        },\n      })\n    ) {\n      return false\n    }\n\n    return {caretWordSelection}\n  },\n  actions: [\n    ({event}, {caretWordSelection}) => [\n      raise({type: 'select', at: caretWordSelection}),\n      raise({type: 'annotation.add', annotation: event.annotation}),\n    ],\n  ],\n})\n\nexport const coreAnnotationBehaviors = {\n  addAnnotationOnCollapsedSelection,\n}\n","export interface KeyboardEventLike {\n  key: string\n  keyCode?: number\n  altKey: boolean\n  ctrlKey: boolean\n  metaKey: boolean\n  shiftKey: boolean\n}\n\ninterface HotKey {\n  keyCode?: number | undefined\n  key?: string | undefined\n  altKey: boolean | null\n  ctrlKey: boolean | null\n  metaKey: boolean | null\n  shiftKey: boolean | null\n}\n\nconst IS_MAC =\n  typeof window !== 'undefined' &&\n  /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent)\n\ntype Modifier = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n\nconst modifiers: Record<string, Modifier | undefined> = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey',\n}\n\nconst aliases: Record<string, string | undefined> = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta',\n}\n\nconst keyCodes: Record<string, number | undefined> = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'escape': 27,\n  ' ': 32,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'arrowleft': 37,\n  'arrowup': 38,\n  'arrowright': 39,\n  'arrowdown': 40,\n  'insert': 45,\n  'delete': 46,\n  'meta': 91,\n  'numlock': 144,\n  'scrolllock': 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'f13': 124,\n  'f14': 125,\n  'f15': 126,\n  'f16': 127,\n  'f17': 128,\n  'f18': 129,\n  'f19': 130,\n  'f20': 131,\n}\n\nexport function isHotkey(hotkey: string, event: KeyboardEventLike): boolean {\n  return compareHotkey(parseHotkey(hotkey), event)\n}\n\nfunction parseHotkey(hotkey: string): HotKey {\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n  const parsedHotkey: HotKey = {\n    altKey: false,\n    ctrlKey: false,\n    metaKey: false,\n    shiftKey: false,\n  }\n\n  // Special case to handle the `+` key since we use it as a separator.\n  const hotkeySegments = hotkey.replace('++', '+add').split('+')\n\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional =\n      rawHotkeySegment.endsWith('?') && rawHotkeySegment.length > 1\n    const hotkeySegment = optional\n      ? rawHotkeySegment.slice(0, -1)\n      : rawHotkeySegment\n    const keyName = toKeyName(hotkeySegment)\n    const modifier = modifiers[keyName]\n    const alias = aliases[hotkeySegment]\n    const code = keyCodes[keyName]\n\n    if (\n      hotkeySegment.length > 1 &&\n      modifier === undefined &&\n      alias === undefined &&\n      code === undefined\n    ) {\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`)\n    }\n\n    if (hotkeySegments.length === 1 || modifier === undefined) {\n      parsedHotkey.key = keyName\n      parsedHotkey.keyCode = toKeyCode(hotkeySegment)\n    }\n\n    if (modifier !== undefined) {\n      parsedHotkey[modifier] = optional ? null : true\n    }\n  }\n\n  return parsedHotkey\n}\n\nfunction compareHotkey(\n  parsedHotkey: HotKey,\n  event: KeyboardEventLike,\n): boolean {\n  const matchingModifiers =\n    (parsedHotkey.altKey != null\n      ? parsedHotkey.altKey === event.altKey\n      : true) &&\n    (parsedHotkey.ctrlKey != null\n      ? parsedHotkey.ctrlKey === event.ctrlKey\n      : true) &&\n    (parsedHotkey.metaKey != null\n      ? parsedHotkey.metaKey === event.metaKey\n      : true) &&\n    (parsedHotkey.shiftKey != null\n      ? parsedHotkey.shiftKey === event.shiftKey\n      : true)\n\n  if (!matchingModifiers) {\n    return false\n  }\n\n  if (parsedHotkey.keyCode !== undefined && event.keyCode !== undefined) {\n    if (parsedHotkey.keyCode === 91 && event.keyCode === 93) {\n      return true\n    }\n\n    return parsedHotkey.keyCode === event.keyCode\n  }\n\n  return (\n    parsedHotkey.keyCode === event.keyCode ||\n    parsedHotkey.key === event.key.toLowerCase()\n  )\n}\n\nfunction toKeyCode(name: string): number {\n  const keyName = toKeyName(name)\n  const keyCode = keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0)\n\n  return keyCode\n}\n\nfunction toKeyName(name: string): string {\n  const keyName = name.toLowerCase()\n\n  return aliases[keyName] ?? keyName\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst arrowDownOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowDown = isHotkey('ArrowDown', event.originEvent)\n\n    if (!isArrowDown) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    return focusBlockObject && !nextBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst arrowUpOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowUp = isHotkey('ArrowUp', event.originEvent)\n\n    if (!isArrowUp) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    return focusBlockObject && !previousBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n      }),\n    ],\n  ],\n})\n\nconst breakingBlockObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    return collapsedSelection && focusBlockObject !== undefined\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst clickingAboveLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const previousBlock = selectors.getPreviousBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'start' &&\n      focusBlockObject &&\n      !previousBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst clickingBelowLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const nextBlock = selectors.getNextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'end' &&\n      focusBlockObject &&\n      !nextBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete.forward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  clickingAboveLonelyBlockObject,\n  clickingBelowLonelyBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDecoratorBehaviors = {\n  strongShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+b', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'strong',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'strong'})]],\n  }),\n  emShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+i', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'em',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'em'})]],\n  }),\n  underlineShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+u', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'underline',\n      ),\n    actions: [\n      () => [raise({type: 'decorator.toggle', decorator: 'underline'})],\n    ],\n  }),\n  codeShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey(\"mod+'\", event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'code',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'code'})]],\n  }),\n}\n","import * as selectors from '../selectors'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDndBehaviors = [\n  /**\n   * When dragging over the drag origin, we don't want to show the caret in the\n   * text.\n   */\n  defineBehavior({\n    on: 'drag.dragover',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = snapshot.beta.internalDrag?.origin\n      const draggingOverDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(event.position.selection)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      return draggingOverDragOrigin\n    },\n    actions: [],\n  }),\n]\n","import * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst breakingAtTheEndOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const atTheEndOfBlock =\n      selectors.isAtTheEndOfBlock(focusTextBlock)(snapshot)\n\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    if (atTheEndOfBlock) {\n      return {focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {focusListItem, focusLevel}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n          markDefs: [],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst breakingAtTheStartOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    const focusDecorators = focusSpan?.node.marks?.filter(\n      (mark) =>\n        snapshot.context.schema.decorators.some(\n          (decorator) => decorator.name === mark,\n        ) ?? [],\n    )\n    const focusAnnotations =\n      focusSpan?.node.marks?.filter(\n        (mark) =>\n          !snapshot.context.schema.decorators.some(\n            (decorator) => decorator.name === mark,\n          ),\n      ) ?? []\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    const atTheStartOfBlock =\n      selectors.isAtTheStartOfBlock(focusTextBlock)(snapshot)\n\n    if (atTheStartOfBlock) {\n      return {focusAnnotations, focusDecorators, focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    (\n      {snapshot},\n      {focusAnnotations, focusDecorators, focusListItem, focusLevel},\n    ) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              marks: focusAnnotations.length === 0 ? focusDecorators : [],\n              text: '',\n            },\n          ],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'before',\n        select: 'none',\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireDocument = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const firstBlock = selectors.getFirstBlock(snapshot)\n    const lastBlock = selectors.getLastBlock(snapshot)\n\n    if (!firstBlock || !lastBlock) {\n      return false\n    }\n\n    const firstBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: firstBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const lastBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: lastBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(firstBlockStartPoint, selectionStartPoint) &&\n      utils.isEqualSelectionPoints(lastBlockEndPoint, selectionEndPoint)\n    ) {\n      return {selection: snapshot.context.selection}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selection}) => [\n      raise({\n        type: 'delete',\n        at: selection,\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireBlocks = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return false\n    }\n\n    const startBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const endBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(selectionStartPoint, startBlockStartPoint) &&\n      utils.isEqualSelectionPoints(selectionEndPoint, endBlockEndPoint)\n    ) {\n      return {selectedBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {selectedBlocks}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n      ...selectedBlocks.map((block) =>\n        raise({\n          type: 'delete.block',\n          at: block.path,\n        }),\n      ),\n    ],\n  ],\n})\n\nexport const coreInsertBreakBehaviors = {\n  breakingAtTheEndOfTextBlock,\n  breakingAtTheStartOfTextBlock,\n  breakingEntireDocument,\n  breakingEntireBlocks,\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {isListBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst MAX_LIST_LEVEL = 10\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (atTheBeginningOfBLock && focusTextBlock.node.level === 1) {\n      return {focusTextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      raise({\n        type: 'block.set',\n        props: {level},\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst clearListOnEnter = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (\n      !selectionCollapsed ||\n      !focusListBlock ||\n      !isEmptyTextBlock(snapshot.context, focusListBlock.node)\n    ) {\n      return false\n    }\n\n    return {focusListBlock}\n  },\n  actions: [\n    (_, {focusListBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusListBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst indentListOnTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isTab = isHotkey('Tab', event.originEvent)\n\n    if (!isTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level + 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nconst unindentListOnShiftTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isShiftTab = isHotkey('Shift+Tab', event.originEvent)\n\n    if (!isShiftTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level - 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nexport const coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n}\n","import {corePriority} from '../priority/priority.core'\nimport {coreAnnotationBehaviors} from './behavior.core.annotations'\nimport {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreDecoratorBehaviors} from './behavior.core.decorators'\nimport {coreDndBehaviors} from './behavior.core.dnd'\nimport {coreInsertBreakBehaviors} from './behavior.core.insert-break'\nimport {coreListBehaviors} from './behavior.core.lists'\n\nexport const coreBehaviorsConfig = [\n  coreAnnotationBehaviors.addAnnotationOnCollapsedSelection,\n  coreDecoratorBehaviors.strongShortcut,\n  coreDecoratorBehaviors.emShortcut,\n  coreDecoratorBehaviors.underlineShortcut,\n  coreDecoratorBehaviors.codeShortcut,\n  ...coreDndBehaviors,\n  coreBlockObjectBehaviors.clickingAboveLonelyBlockObject,\n  coreBlockObjectBehaviors.clickingBelowLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject,\n  coreBlockObjectBehaviors.breakingBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n  coreListBehaviors.clearListOnBackspace,\n  coreListBehaviors.unindentListOnBackspace,\n  coreListBehaviors.clearListOnEnter,\n  coreListBehaviors.indentListOnTab,\n  coreListBehaviors.unindentListOnShiftTab,\n  coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock,\n  coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock,\n  coreInsertBreakBehaviors.breakingEntireDocument,\n  coreInsertBreakBehaviors.breakingEntireBlocks,\n].map((behavior) => ({\n  behavior,\n  priority: corePriority,\n}))\n","import {isActiveAnnotation} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractAnnotationBehaviors = [\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.remove', annotation: event.annotation}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      !isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.add', annotation: event.annotation}),\n      ],\n    ],\n  }),\n]\n","import {isActiveDecorator} from '../selectors'\nimport {blockOffsetsToSelection} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDecoratorBehaviors = [\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => isActiveDecorator(event.decorator)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'decorator.remove', decorator: event.decorator}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => {\n      const manualSelection = event.at\n        ? blockOffsetsToSelection({\n            context: snapshot.context,\n            offsets: event.at,\n          })\n        : null\n\n      if (manualSelection) {\n        return !isActiveDecorator(event.decorator)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: manualSelection,\n          },\n        })\n      }\n\n      return !isActiveDecorator(event.decorator)(snapshot)\n    },\n    actions: [\n      ({event}) => [\n        raise({\n          ...event,\n          type: 'decorator.add',\n        }),\n      ],\n    ],\n  }),\n]\n","import * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDeleteBehaviors = [\n  defineBehavior({\n    on: 'delete.backward',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      return {selection: snapshot.context.selection}\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          direction: 'backward',\n          unit: event.unit,\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.forward',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      return {selection: snapshot.context.selection}\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          direction: 'forward',\n          unit: event.unit,\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.block',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'delete',\n          at: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.text',\n    guard: ({snapshot, event}) => {\n      const selection = utils.blockOffsetsToSelection({\n        context: snapshot.context,\n        offsets: event.at,\n      })\n\n      if (!selection) {\n        return false\n      }\n\n      const trimmedSelection = selectors.getTrimmedSelection({\n        beta: {\n          activeAnnotations: [],\n          activeDecorators: [],\n          hasTag: () => false,\n          internalDrag: undefined,\n        },\n        context: {\n          converters: [],\n          schema: snapshot.context.schema,\n          keyGenerator: snapshot.context.keyGenerator,\n          readOnly: false,\n          value: snapshot.context.value,\n          selection,\n        },\n      })\n\n      if (!trimmedSelection) {\n        return false\n      }\n\n      return {\n        selection: trimmedSelection,\n      }\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n]\n","import {getFocusTextBlock} from '../selectors'\nimport {isEmptyTextBlock} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractInsertBehaviors = [\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'before',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'before' : 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'after',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'auto') {\n        return false\n      }\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      return {focusTextBlock}\n    },\n    actions: [\n      ({snapshot, event}, {focusTextBlock}) =>\n        event.blocks.length === 1\n          ? [\n              raise({\n                type: 'insert.block',\n                block: event.blocks[0],\n                placement: 'auto',\n                select: 'end',\n              }),\n            ]\n          : isEmptyTextBlock(snapshot.context, focusTextBlock.node)\n            ? event.blocks.map((block, index) =>\n                raise({\n                  type: 'insert.block',\n                  block,\n                  placement: index === 0 ? 'auto' : 'after',\n                  select: 'end',\n                }),\n              )\n            : event.blocks.flatMap((block, index) =>\n                index === 0\n                  ? [\n                      raise({\n                        type: 'split',\n                      }),\n                      raise({\n                        type: 'select.previous block',\n                        select: 'end',\n                      }),\n                      raise({\n                        type: 'insert.block',\n                        block,\n                        placement: 'auto',\n                        select: 'end',\n                      }),\n                    ]\n                  : index === event.blocks.length - 1\n                    ? [\n                        raise({\n                          type: 'select.next block',\n                          select: 'start',\n                        }),\n                        raise({\n                          type: 'insert.block',\n                          block,\n                          placement: 'auto',\n                          select: 'end',\n                        }),\n                      ]\n                    : [\n                        raise({\n                          type: 'insert.block',\n                          block,\n                          placement: 'after',\n                          select: 'end',\n                        }),\n                      ],\n              ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'auto',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'auto' : 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.break',\n    actions: [() => [raise({type: 'split'})]],\n  }),\n  defineBehavior({\n    on: 'insert.soft break',\n    actions: [() => [raise({type: 'insert.text', text: '\\n'})]],\n  }),\n]\n","export const keyIs = {\n  lineBreak: (event) => event.key === 'Enter' && event.shiftKey,\n} satisfies Record<string, KeyboardEventPredicate>\n\ntype KeyboardEventPredicate = (\n  event: Pick<\n    KeyboardEvent,\n    'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n  >,\n) => boolean\n","import {keyIs} from '../internal-utils/key-is'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractKeyboardBehaviors = [\n  /**\n   * On WebKit, Shift+Enter results in an `insertParagraph` input event rather\n   * than an `insertLineBreak` input event. This Behavior makes sure we catch\n   * that `keyboard.keydown` event beforehand and raise an `insert.soft break` manually.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) => keyIs.lineBreak(event.originEvent),\n    actions: [() => [raise({type: 'insert.soft break'})]],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveListItem} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractListItemBehaviors = [\n  defineBehavior({\n    on: 'list item.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              level: 1,\n              listItem: event.listItem,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['level', 'listItem'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'list item.remove', listItem: event.listItem}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => !isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [raise({type: 'list item.add', listItem: event.listItem})],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractMoveBehaviors = [\n  defineBehavior({\n    on: 'move.block up',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (previousBlock) {\n        return {previousBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {previousBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: previousBlock.path,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'move.block down',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (nextBlock) {\n        return {nextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {nextBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: nextBlock.path,\n        }),\n      ],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {getBlockEndPoint, getBlockStartPoint} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSelectBehaviors = [\n  defineBehavior({\n    on: 'select.previous block',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock(snapshot)\n\n      if (!previousBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint({\n              context: snapshot.context,\n              block: previousBlock,\n            })\n          : getBlockStartPoint({\n              context: snapshot.context,\n              block: previousBlock,\n            })\n\n      return {\n        selection: {\n          anchor: point,\n          focus: point,\n        },\n      }\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.next block',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock(snapshot)\n\n      if (!nextBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint({\n              context: snapshot.context,\n              block: nextBlock,\n            })\n          : getBlockStartPoint({\n              context: snapshot.context,\n              block: nextBlock,\n            })\n\n      return {selection: {anchor: point, focus: point}}\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n]\n","import {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {getSelectionStartPoint, isSelectionCollapsed} from '../utils'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {sliceBlocks} from '../utils/util.slice-blocks'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSplitBehaviors = [\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      const selectionStartPoint = getSelectionStartPoint(\n        snapshot.context.selection,\n      )\n      const selectionEndPoint = getSelectionEndPoint(snapshot.context.selection)\n\n      const focusTextBlock = selectors.getFocusTextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: selectionStartPoint,\n            focus: selectionEndPoint,\n          },\n        },\n      })\n\n      if (focusTextBlock) {\n        const blockEndPoint = getBlockEndPoint({\n          context: snapshot.context,\n          block: focusTextBlock,\n        })\n        const newTextBlockSelection = {\n          anchor: selectionEndPoint,\n          focus: blockEndPoint,\n        }\n        const newTextBlock = parseBlock({\n          block: sliceBlocks({\n            context: {\n              ...snapshot.context,\n              selection: newTextBlockSelection,\n            },\n            blocks: [focusTextBlock.node],\n          }).at(0),\n          context: snapshot.context,\n          options: {refreshKeys: true, validateFields: true},\n        })\n\n        if (!newTextBlock || !isTextBlock(snapshot.context, newTextBlock)) {\n          return false\n        }\n\n        return {\n          newTextBlock,\n          newTextBlockSelection,\n          selection: {\n            anchor: selectionStartPoint,\n            focus: blockEndPoint,\n          },\n        }\n      }\n\n      const focusBlockObject = selectors.getFocusBlockObject({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: selectionStartPoint,\n            focus: selectionEndPoint,\n          },\n        },\n      })\n\n      if (focusBlockObject) {\n        const newTextBlock = parseBlock({\n          block: {\n            _type: snapshot.context.schema.block.name,\n            children: [],\n          },\n          context: snapshot.context,\n          options: {refreshKeys: true, validateFields: true},\n        })\n\n        if (!newTextBlock) {\n          return false\n        }\n\n        return {\n          newTextBlock,\n          newTextBlockSelection: {\n            anchor: selectionEndPoint,\n            focus: selectionEndPoint,\n          },\n          selection: snapshot.context.selection,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {newTextBlock, selection}) =>\n        isSelectionCollapsed(selection)\n          ? [\n              raise({\n                type: 'insert.block',\n                block: newTextBlock,\n                placement: 'after',\n                select: 'start',\n              }),\n            ]\n          : [\n              raise({\n                type: 'delete',\n                at: selection,\n              }),\n              raise({\n                type: 'insert.block',\n                block: newTextBlock,\n                placement: 'after',\n                select: 'start',\n              }),\n            ],\n    ],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveStyle} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractStyleBehaviors = [\n  defineBehavior({\n    on: 'style.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              style: event.style,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['style'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.remove', style: event.style})]],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => !isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.add', style: event.style})]],\n  }),\n]\n","import type {ConverterEvent} from '../converters/converter.types'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport type {PickFromUnion} from '../type-utils'\nimport {getTextBlockText} from '../utils'\nimport {abstractAnnotationBehaviors} from './behavior.abstract.annotation'\nimport {abstractDecoratorBehaviors} from './behavior.abstract.decorator'\nimport {abstractDeleteBehaviors} from './behavior.abstract.delete'\nimport {abstractInsertBehaviors} from './behavior.abstract.insert'\nimport {abstractKeyboardBehaviors} from './behavior.abstract.keyboard'\nimport {abstractListItemBehaviors} from './behavior.abstract.list-item'\nimport {abstractMoveBehaviors} from './behavior.abstract.move'\nimport {abstractSelectBehaviors} from './behavior.abstract.select'\nimport {abstractSplitBehaviors} from './behavior.abstract.split'\nimport {abstractStyleBehaviors} from './behavior.abstract.style'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst raiseDeserializationSuccessOrFailure = defineBehavior({\n  on: 'deserialize',\n  guard: ({snapshot, event}) => {\n    let success:\n      | PickFromUnion<ConverterEvent, 'type', 'deserialization.success'>\n      | undefined\n    const failures: Array<\n      PickFromUnion<ConverterEvent, 'type', 'deserialization.failure'>\n    > = []\n\n    for (const converter of snapshot.context.converters) {\n      const data = event.originEvent.originEvent.dataTransfer.getData(\n        converter.mimeType,\n      )\n\n      if (!data) {\n        continue\n      }\n\n      const deserializeEvent = converter.deserialize({\n        snapshot,\n        event: {type: 'deserialize', data},\n      })\n\n      if (deserializeEvent.type === 'deserialization.success') {\n        success = deserializeEvent\n        break\n      } else {\n        failures.push(deserializeEvent)\n      }\n    }\n\n    if (!success) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: '*/*',\n        reason: failures.map((failure) => failure.reason).join(', '),\n      } as const\n    }\n\n    return success\n  },\n  actions: [\n    ({event}, deserializeEvent) => [\n      raise({\n        ...deserializeEvent,\n        originEvent: event.originEvent,\n      }),\n    ],\n  ],\n})\n\nconst raiseSerializationSuccessOrFailure = defineBehavior({\n  on: 'serialize',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.converters.length === 0) {\n      return false\n    }\n\n    const serializeEvents = snapshot.context.converters.map((converter) =>\n      converter.serialize({\n        snapshot,\n        event: {\n          ...event,\n          originEvent: event.originEvent.type,\n        },\n      }),\n    )\n\n    if (serializeEvents.length === 0) {\n      return false\n    }\n\n    return serializeEvents\n  },\n  actions: [\n    ({event}, serializeEvents) =>\n      serializeEvents.map((serializeEvent) => {\n        return raise({\n          ...serializeEvent,\n          originEvent: event.originEvent,\n        })\n      }),\n  ],\n})\n\nexport const abstractBehaviors = [\n  defineBehavior({\n    on: 'clipboard.copy',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.copy',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection\n        ? {\n            selection: snapshot.context.selection,\n          }\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.dragstart',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.success',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            event.originEvent.originEvent.dataTransfer.setData(\n              event.mimeType,\n              event.data,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Serialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = snapshot.beta.internalDrag?.origin\n      const dropPosition = event.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n      return droppingOnDragOrigin\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'drag.drop',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'select',\n          at: event.position.selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      if (\n        event.originEvent.type !== 'drag.drop' ||\n        snapshot.beta.internalDrag === undefined\n      ) {\n        return false\n      }\n\n      const dragOrigin = snapshot.beta.internalDrag.origin\n      const dropPosition = event.originEvent.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection,\n        },\n      })\n\n      const draggedBlocks = selectors.getSelectedBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection,\n        },\n      })\n\n      if (!droppingOnDragOrigin) {\n        return {\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          originEvent: event.originEvent,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (\n        {event},\n        {draggingEntireBlocks, draggedBlocks, dragOrigin, originEvent},\n      ) => [\n        ...(draggingEntireBlocks\n          ? draggedBlocks.map((block) =>\n              raise({\n                type: 'delete.block',\n                at: block.path,\n              }),\n            )\n          : [\n              raise({\n                type: 'delete',\n                at: dragOrigin.selection,\n              }),\n            ]),\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: draggingEntireBlocks\n            ? originEvent.position.block === 'start'\n              ? 'before'\n              : originEvent.position.block === 'end'\n                ? 'after'\n                : 'auto'\n            : 'auto',\n        }),\n      ],\n    ],\n  }),\n  /**\n   * If we are pasting text/plain into a text block then we can probably\n   * assume that the intended behavior is that the pasted text inherits\n   * formatting from the text it's pasted into.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (\n        focusTextBlock &&\n        event.mimeType === 'text/plain' &&\n        event.originEvent.type === 'clipboard.paste'\n      ) {\n        const activeDecorators = snapshot.beta.activeDecorators\n        const activeAnnotations = selectors.getActiveAnnotations(snapshot)\n\n        return {\n          activeAnnotations,\n          activeDecorators,\n          textRuns: event.data.flatMap((block) =>\n            isTextBlock(snapshot.context, block)\n              ? [getTextBlockText(block)]\n              : [],\n          ),\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {activeAnnotations, activeDecorators, textRuns}) =>\n        textRuns.flatMap((textRun, index) =>\n          index !== textRuns.length - 1\n            ? [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n                raise({type: 'insert.break'}),\n              ]\n            : [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n              ],\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: 'auto',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Deserialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection &&\n        selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'input.*',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  ...abstractAnnotationBehaviors,\n  ...abstractDecoratorBehaviors,\n  ...abstractDeleteBehaviors,\n  ...abstractInsertBehaviors,\n  ...abstractKeyboardBehaviors,\n  ...abstractListItemBehaviors,\n  ...abstractMoveBehaviors,\n  ...abstractStyleBehaviors,\n  ...abstractSelectBehaviors,\n  ...abstractSplitBehaviors,\n  raiseDeserializationSuccessOrFailure,\n  raiseSerializationSuccessOrFailure,\n]\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport type {MIMEType} from '../internal-utils/mime-type'\nimport type {OmitFromUnion, PickFromUnion, StrictExtract} from '../type-utils'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {BlockWithOptionalKey} from '../types/block-with-optional-key'\nimport type {EditorSelection} from '../types/editor'\n\n/**\n * @beta\n */\nexport type BehaviorEvent =\n  | SyntheticBehaviorEvent\n  | NativeBehaviorEvent\n  | CustomBehaviorEvent\n\nexport type BehaviorEventTypeNamespace =\n  | SyntheticBehaviorEventNamespace\n  | NativeBehaviorEventNamespace\n  | CustomBehaviorEventNamespace\n\ntype NamespacedBehaviorEventType<\n  TNamespace extends BehaviorEventTypeNamespace | '',\n> = TNamespace extends ''\n  ? BehaviorEvent['type']\n  : Extract<BehaviorEvent['type'], TNamespace | `${TNamespace}.${string}`>\n\n/**************************************\n * External events\n **************************************/\n\ntype ExternalBehaviorEventNamespace = 'blur' | 'focus' | 'insert'\n\ntype ExternalBehaviorEventType<\n  TNamespace extends ExternalBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\nexport type ExternalBehaviorEvent =\n  | {\n      type: ExternalBehaviorEventType<'blur'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'focus'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'insert', 'block object'>\n      placement: InsertPlacement\n      blockObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | SyntheticBehaviorEvent\n  | CustomBehaviorEvent\n\n/**************************************\n * Synthetic events\n **************************************/\n\nconst syntheticBehaviorEventTypes = [\n  'annotation.add',\n  'annotation.remove',\n  'block.set',\n  'block.unset',\n  'decorator.add',\n  'decorator.remove',\n  'delete',\n  'history.redo',\n  'history.undo',\n  'insert.inline object',\n  'insert.block',\n  'insert.span',\n  'insert.text',\n  'move.backward',\n  'move.block',\n  'move.forward',\n  'select',\n] as const\n\ntype SyntheticBehaviorEventType =\n  | (typeof syntheticBehaviorEventTypes)[number]\n  | (typeof abstractBehaviorEventTypes)[number]\n\ntype SyntheticBehaviorEventNamespace =\n  ExtractNamespace<SyntheticBehaviorEventType>\n\n/**\n * @beta\n */\nexport type SyntheticBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.add'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.remove'>\n      annotation: {\n        name: string\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.set'>\n      at: [KeyedSegment]\n      props: Record<string, unknown>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.unset'>\n      at: [KeyedSegment]\n      props: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.add'>\n      decorator: string\n      at?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.remove'>\n      decorator: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete'>\n      at: NonNullable<EditorSelection>\n      /**\n       * Defaults to forward deletion.\n       */\n      direction?: 'backward' | 'forward'\n      /**\n       * Defaults to character deletion.\n       */\n      unit?: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.redo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.undo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.inline object'>\n      inlineObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.block'>\n      block: BlockWithOptionalKey\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.span'>\n      text: string\n      annotations?: Array<{\n        name: string\n        value: {[prop: string]: unknown}\n      }>\n      decorators?: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.text'>\n      text: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.backward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block'>\n      at: [KeyedSegment]\n      to: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.forward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select'>\n      at: EditorSelection\n    }\n  | AbstractBehaviorEvent\n\nexport type InsertPlacement = 'auto' | 'after' | 'before'\n\nexport function isSyntheticBehaviorEvent(\n  event: BehaviorEvent,\n): event is OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> {\n  return (\n    !isCustomBehaviorEvent(event) &&\n    !isNativeBehaviorEvent(event) &&\n    !isAbstractBehaviorEvent(event)\n  )\n}\n\n/**************************************\n * Abstract events\n **************************************/\n\nconst abstractBehaviorEventTypes = [\n  'annotation.toggle',\n  'decorator.toggle',\n  'delete.backward',\n  'delete.block',\n  'delete.forward',\n  'delete.text',\n  'deserialize',\n  'deserialization.success',\n  'deserialization.failure',\n  'insert.blocks',\n  'insert.break',\n  'insert.soft break',\n  'list item.add',\n  'list item.remove',\n  'list item.toggle',\n  'move.block down',\n  'move.block up',\n  'select.previous block',\n  'select.next block',\n  'serialize',\n  'serialization.success',\n  'serialization.failure',\n  'split',\n  'style.add',\n  'style.remove',\n  'style.toggle',\n] as const\n\nexport type AbstractBehaviorEventType =\n  (typeof abstractBehaviorEventTypes)[number]\n\ntype AbstractBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.toggle'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.toggle'>\n      decorator: string\n      at?: {anchor: BlockOffset; focus: BlockOffset}\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.backward'>\n      unit: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.block'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.forward'>\n      unit: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.text'>\n      at: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialize'>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialize'>\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.success'>\n      mimeType: MIMEType\n      data: Array<PortableTextBlock>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.success'>\n      mimeType: MIMEType\n      data: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.blocks'>\n      blocks: Array<BlockWithOptionalKey>\n      placement: InsertPlacement\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.soft break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.add'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.remove'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.toggle'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block down'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block up'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.previous block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.next block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'split'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.add'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.remove'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.toggle'>\n      style: string\n    }\n\nexport function isAbstractBehaviorEvent(\n  event: BehaviorEvent,\n): event is AbstractBehaviorEvent {\n  return (abstractBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**************************************\n * Native events\n **************************************/\n\nconst nativeBehaviorEventTypes = [\n  'clipboard.copy',\n  'clipboard.cut',\n  'clipboard.paste',\n  'drag.dragstart',\n  'drag.drag',\n  'drag.dragend',\n  'drag.dragenter',\n  'drag.dragover',\n  'drag.dragleave',\n  'drag.drop',\n  'input.*',\n  'keyboard.keydown',\n  'keyboard.keyup',\n  'mouse.click',\n] as const\n\ntype NativeBehaviorEventType = (typeof nativeBehaviorEventTypes)[number]\n\ntype NativeBehaviorEventNamespace = ExtractNamespace<NativeBehaviorEventType>\n\nexport function isNativeBehaviorEvent(\n  event: BehaviorEvent,\n): event is NativeBehaviorEvent {\n  return (nativeBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**\n * @beta\n */\nexport type NativeBehaviorEvent =\n  | ClipboardBehaviorEvent\n  | DragBehaviorEvent\n  | InputBehaviorEvent\n  | KeyboardBehaviorEvent\n  | MouseBehaviorEvent\n\ntype ClipboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.copy'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.cut'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.paste'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n\ntype DragBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragstart'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drag'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragend'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragenter'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragover'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drop'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragleave'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n\n/**\n * Used to represent native InputEvents that hold a DataTransfer object.\n *\n * These can either be one of:\n *\n * - insertFromPaste\n * - insertFromPasteAsQuotation\n * - insertFromDrop\n * - insertReplacementText\n * - insertFromYank\n */\nexport type InputBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'input.*'>\n  originEvent: {\n    dataTransfer: DataTransfer\n  }\n}\n\nexport type KeyboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keydown'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keyup'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n\nexport type MouseBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'mouse.click'>\n  position: EventPosition\n}\n\n/**************************************\n * Custom events\n **************************************/\n\ntype CustomBehaviorEventNamespace = 'custom'\n\ntype CustomBehaviorEventType<\n  TNamespace extends CustomBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\n/**\n * @beta\n */\nexport type CustomBehaviorEvent<\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n  TType extends string = string,\n  TInternalType extends CustomBehaviorEventType<\n    'custom',\n    TType\n  > = CustomBehaviorEventType<'custom', TType>,\n> = {\n  type: TInternalType\n} & TPayload\n\nexport function isCustomBehaviorEvent(\n  event: BehaviorEvent,\n): event is CustomBehaviorEvent {\n  return event.type.startsWith('custom.')\n}\n\n/**************************************\n * Resolve behavior event\n **************************************/\n\nexport type ResolveBehaviorEvent<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n> = TBehaviorEventType extends '*'\n  ? BehaviorEvent\n  : TBehaviorEventType extends `${infer TNamespace}.*`\n    ? TNamespace extends BehaviorEventTypeNamespace\n      ? PickFromUnion<\n          BehaviorEvent,\n          'type',\n          NamespacedBehaviorEventType<TNamespace>\n        >\n      : never\n    : TBehaviorEventType extends `custom.${infer TType}`\n      ? CustomBehaviorEvent<TPayload, TType>\n      : TBehaviorEventType extends BehaviorEvent['type']\n        ? PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n        : never\n\ntype ExtractNamespace<TType extends string> =\n  TType extends `${infer Namespace}.${string}` ? Namespace : TType\n","import type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {withApplyingBehaviorOperations} from '../editor/with-applying-behavior-operations'\nimport {withUndoStep} from '../editor/with-undo-step'\nimport {debugWithName} from '../internal-utils/debug'\nimport {performOperation} from '../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {abstractBehaviors} from './behavior.abstract'\nimport type {BehaviorAction} from './behavior.types.action'\nimport type {Behavior} from './behavior.types.behavior'\nimport {\n  isAbstractBehaviorEvent,\n  isCustomBehaviorEvent,\n  isNativeBehaviorEvent,\n  isSyntheticBehaviorEvent,\n  type BehaviorEvent,\n} from './behavior.types.event'\n\nconst debug = debugWithName('behaviors:event')\n\nfunction eventCategory(event: BehaviorEvent) {\n  return isNativeBehaviorEvent(event)\n    ? 'native'\n    : isAbstractBehaviorEvent(event)\n      ? 'synthetic'\n      : isCustomBehaviorEvent(event)\n        ? 'custom'\n        : 'synthetic'\n}\n\nexport function performEvent({\n  mode,\n  behaviors,\n  remainingEventBehaviors,\n  event,\n  editor,\n  keyGenerator,\n  schema,\n  getSnapshot,\n  nativeEvent,\n}: {\n  mode: 'raise' | 'execute' | 'forward'\n  behaviors: Array<Behavior>\n  remainingEventBehaviors: Array<Behavior>\n  event: BehaviorEvent\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  schema: EditorSchema\n  getSnapshot: () => EditorSnapshot\n  nativeEvent:\n    | {\n        preventDefault: () => void\n      }\n    | undefined\n}) {\n  debug(`(${mode}:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n  const eventBehaviors = [\n    ...remainingEventBehaviors,\n    ...abstractBehaviors,\n  ].filter((behavior) => {\n    // Catches all events\n    if (behavior.on === '*') {\n      return true\n    }\n\n    const [listenedNamespace] =\n      behavior.on.includes('*') && behavior.on.includes('.')\n        ? behavior.on.split('.')\n        : [undefined]\n    const [eventNamespace] = event.type.includes('.')\n      ? event.type.split('.')\n      : [undefined]\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select.block` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace !== undefined &&\n      listenedNamespace === eventNamespace\n    ) {\n      return true\n    }\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace === undefined &&\n      listenedNamespace === event.type\n    ) {\n      return true\n    }\n\n    return behavior.on === event.type\n  })\n\n  if (eventBehaviors.length === 0 && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    withApplyingBehaviorOperations(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {\n          keyGenerator,\n          schema,\n        },\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n\n    return\n  }\n\n  const guardSnapshot = getSnapshot()\n\n  let nativeEventPrevented = false\n  let defaultBehaviorOverwritten = false\n  let eventBehaviorIndex = -1\n\n  for (const eventBehavior of eventBehaviors) {\n    eventBehaviorIndex++\n\n    let shouldRun = false\n\n    try {\n      shouldRun =\n        eventBehavior.guard === undefined ||\n        eventBehavior.guard({\n          snapshot: guardSnapshot,\n          event,\n        })\n    } catch (error) {\n      console.error(\n        new Error(\n          `Evaluating guard for \"${event.type}\" failed due to: ${error.message}`,\n        ),\n      )\n    }\n\n    if (!shouldRun) {\n      continue\n    }\n\n    // This Behavior now \"owns\" the event and we can consider the default\n    // action prevented\n    defaultBehaviorOverwritten = true\n\n    for (const actionSet of eventBehavior.actions) {\n      const actionsSnapshot = getSnapshot()\n\n      let actions: Array<BehaviorAction> = []\n\n      try {\n        actions = actionSet(\n          {\n            snapshot: actionsSnapshot,\n            event,\n          },\n          shouldRun,\n        )\n      } catch (error) {\n        console.error(\n          new Error(\n            `Evaluating actions for \"${event.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n\n      if (actions.length === 0) {\n        continue\n      }\n\n      if (actions.some((action) => action.type === 'execute')) {\n        // Since at least one action is about to `execute` changes in the editor,\n        // we set up a new undo step.\n        // All actions performed recursively from now will be squashed into this\n        // undo step\n        withUndoStep(editor, () => {\n          for (const action of actions) {\n            if (action.type === 'effect') {\n              nativeEventPrevented = true\n\n              try {\n                action.effect()\n              } catch (error) {\n                console.error(\n                  new Error(\n                    `Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`,\n                  ),\n                )\n              }\n\n              continue\n            }\n\n            if (action.type === 'forward') {\n              const remainingEventBehaviors = eventBehaviors.slice(\n                eventBehaviorIndex + 1,\n              )\n\n              performEvent({\n                mode: 'forward',\n                behaviors,\n                remainingEventBehaviors: remainingEventBehaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n              })\n\n              continue\n            }\n\n            if (action.type === 'raise') {\n              nativeEventPrevented = true\n\n              performEvent({\n                mode: 'raise',\n                behaviors,\n                remainingEventBehaviors: behaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n              })\n\n              continue\n            }\n\n            nativeEventPrevented = true\n\n            performEvent({\n              mode: 'execute',\n              behaviors,\n              remainingEventBehaviors: isAbstractBehaviorEvent(action.event)\n                ? behaviors\n                : [],\n              event: action.event,\n              editor,\n              keyGenerator,\n              schema,\n              getSnapshot,\n              nativeEvent: undefined,\n            })\n          }\n        })\n\n        continue\n      }\n\n      for (const action of actions) {\n        if (action.type === 'effect') {\n          nativeEventPrevented = true\n\n          try {\n            action.effect()\n          } catch (error) {\n            console.error(\n              new Error(\n                `Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`,\n              ),\n            )\n          }\n\n          continue\n        }\n\n        if (action.type === 'forward') {\n          const remainingEventBehaviors = eventBehaviors.slice(\n            eventBehaviorIndex + 1,\n          )\n\n          performEvent({\n            mode: 'forward',\n            behaviors,\n            remainingEventBehaviors: remainingEventBehaviors,\n            event: action.event,\n            editor,\n            keyGenerator,\n            schema,\n            getSnapshot,\n            nativeEvent,\n          })\n\n          continue\n        }\n\n        if (action.type === 'raise') {\n          nativeEventPrevented = true\n\n          performEvent({\n            mode: 'raise',\n            behaviors,\n            remainingEventBehaviors: behaviors,\n            event: action.event,\n            editor,\n            keyGenerator,\n            schema,\n            getSnapshot,\n            nativeEvent,\n          })\n\n          continue\n        }\n\n        if (action.type === 'execute') {\n          console.error('Unexpected action type: `execute`')\n        }\n      }\n    }\n\n    break\n  }\n\n  if (!defaultBehaviorOverwritten && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    withApplyingBehaviorOperations(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {keyGenerator, schema},\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n  } else if (nativeEventPrevented) {\n    nativeEvent?.preventDefault()\n  }\n}\n","import type {EditorPriority} from './priority.types'\n\nexport function sortByPriority<\n  T extends {\n    priority?: EditorPriority\n  },\n>(items: Array<T>): Array<T> {\n  if (items.length === 0) {\n    return []\n  }\n\n  // Separate items with and without priority\n  const itemsWithPriority = items.filter(\n    (item): item is T & {priority: EditorPriority} =>\n      item.priority !== undefined,\n  )\n  const itemsWithoutPriority = items.filter(\n    (item) => item.priority === undefined,\n  )\n\n  if (itemsWithPriority.length === 0) {\n    return items\n  }\n\n  // Create a map of items by their priority ID\n  const itemsByPriorityId = new Map(\n    itemsWithPriority.map((item) => [item.priority.id, item]),\n  )\n\n  // Build the dependency graph\n  const graph = new Map<string, Set<string>>()\n  const inDegree = new Map<string, number>()\n\n  // Helper function to ensure a node exists in the graph\n  function ensureNode(id: string) {\n    if (!graph.has(id)) {\n      graph.set(id, new Set())\n      inDegree.set(id, 0)\n    }\n  }\n\n  // Initialize graph and in-degree for all items\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    ensureNode(id)\n  }\n\n  // Helper function to add an edge to the graph\n  function addEdge(fromId: string, toId: string) {\n    if (!graph.has(fromId) || !graph.has(toId)) return\n    graph.get(fromId)?.add(toId)\n    inDegree.set(toId, (inDegree.get(toId) ?? 0) + 1)\n  }\n\n  // Add edges based on references\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    const visited = new Set<string>()\n    let ref = item.priority.reference\n\n    while (ref) {\n      const refId = ref.priority.id\n      ensureNode(refId)\n\n      // Check for cyclic reference\n      if (visited.has(refId)) {\n        throw new Error('Circular dependency detected in priorities')\n      }\n      visited.add(refId)\n\n      if (ref.importance === 'higher') {\n        // Reference must come before current item\n        addEdge(id, refId)\n      } else {\n        // Current item must come before reference\n        addEdge(refId, id)\n      }\n\n      ref = ref.priority.reference\n    }\n  }\n\n  const queue: string[] = []\n\n  // Find all nodes with no incoming edges\n  for (const [id, degree] of inDegree) {\n    if (degree === 0) {\n      queue.push(id)\n    }\n  }\n\n  const result: T[] = []\n\n  // Perform topological sort\n  while (queue.length > 0) {\n    const currentId = queue.shift()!\n    const currentItem = itemsByPriorityId.get(currentId)\n    if (currentItem) {\n      result.push(currentItem)\n    }\n\n    // Decrease in-degree of neighbors\n    for (const neighborId of graph.get(currentId) ?? []) {\n      const newDegree = (inDegree.get(neighborId) ?? 0) - 1\n      inDegree.set(neighborId, newDegree)\n      if (newDegree === 0) {\n        queue.push(neighborId)\n      }\n    }\n  }\n\n  // Add any remaining items that weren't processed\n  for (const item of itemsWithPriority) {\n    if (!result.includes(item)) {\n      result.push(item)\n    }\n  }\n\n  // Append items without priority at the end in their original order\n  return [...result, ...itemsWithoutPriority]\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Converter} from '../converters/converter.types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport type {HasTag} from './editor-machine'\nimport type {EditorSchema} from './editor-schema'\nimport {getActiveAnnotations} from './get-active-annotations'\nimport {getActiveDecorators} from './get-active-decorators'\n\n/**\n * @public\n */\nexport type EditorContext = {\n  converters: Array<Converter>\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  selection: EditorSelection\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @public\n */\nexport type EditorSnapshot = {\n  context: EditorContext\n  /**\n   * @beta\n   * Do not rely on this externally\n   */\n  beta: {\n    activeAnnotations: Array<string>\n    activeDecorators: Array<string>\n    hasTag: HasTag\n    internalDrag:\n      | {\n          origin: Pick<EventPosition, 'selection'>\n        }\n      | undefined\n  }\n}\n\nexport function createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  readOnly,\n  schema,\n  hasTag,\n  internalDrag,\n}: {\n  converters: Array<Converter>\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  hasTag: HasTag\n  internalDrag:\n    | {\n        origin: Pick<EventPosition, 'selection'>\n      }\n    | undefined\n}) {\n  const selection = editor.selection\n    ? slateRangeToSelection({\n        schema,\n        editor,\n        range: editor.selection,\n      })\n    : null\n\n  const context = {\n    converters,\n    keyGenerator,\n    readOnly,\n    schema,\n    selection,\n    value: editor.value,\n  } satisfies EditorContext\n\n  return {\n    context,\n    beta: {\n      activeAnnotations: getActiveAnnotations({\n        markState: editor.markState,\n        schema,\n      }),\n      activeDecorators: getActiveDecorators({\n        decoratorState: editor.decoratorState,\n        markState: editor.markState,\n        schema,\n      }),\n      hasTag,\n      internalDrag,\n    },\n  } satisfies EditorSnapshot\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Transforms} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport type {BehaviorConfig} from '../behaviors/behavior.config'\nimport {coreBehaviorsConfig} from '../behaviors/behavior.core'\nimport {performEvent} from '../behaviors/behavior.perform-event'\nimport type {BehaviorEvent} from '../behaviors/behavior.types.event'\nimport type {Converter} from '../converters/converter.types'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {sortByPriority} from '../priority/priority.sort'\nimport type {NamespaceEvent, OmitFromUnion} from '../type-utils'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {createEditorSnapshot} from './editor-snapshot'\nimport type {\n  EditorEmittedEvent,\n  MutationEvent,\n  PatchEvent,\n} from './relay-machine'\n\nexport * from 'xstate/guards'\n\nconst debug = debugWithName('editor machine')\n\n/**\n * @public\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type ExternalEditorEvent =\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | PatchesEvent\n\ntype InternalPatchEvent = NamespaceEvent<PatchEvent, 'internal'> & {\n  operationId?: string\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\nexport type HasTag = ReturnType<EditorActor['getSnapshot']>['hasTag']\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | ExternalEditorEvent\n  | {\n      type: 'add behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'remove behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'blur'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'focus'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'normalizing'\n    }\n  | {\n      type: 'update selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'done normalizing'\n    }\n  | {\n      type: 'done syncing value'\n    }\n  | {\n      type: 'syncing value'\n    }\n  | {\n      type: 'behavior event'\n      behaviorEvent: BehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | MutationEvent\n  | InternalPatchEvent\n  | {\n      type: 'dragstart'\n      origin: Pick<EventPosition, 'selection'>\n      ghost?: HTMLElement\n    }\n  | {type: 'dragend'}\n  | {type: 'drop'}\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | OmitFromUnion<EditorEmittedEvent, 'type', 'patch'>\n  | InternalPatchEvent\n  | PatchesEvent\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Set<BehaviorConfig>\n      converters: Set<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      pendingEvents: Array<InternalPatchEvent | MutationEvent>\n      pendingIncomingPatchesEvents: Array<PatchesEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      initialValue: Array<PortableTextBlock> | undefined\n      internalDrag?: {\n        ghost?: HTMLElement\n        origin: Pick<EventPosition, 'selection'>\n      }\n      slateEditor?: PortableTextSlateEditor\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      converters?: Array<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      initialValue?: Array<PortableTextBlock>\n    },\n    tags: {} as 'dragging internally',\n  },\n  actions: {\n    'add behavior to context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'add behavior')\n\n        return new Set([...context.behaviors, event.behaviorConfig])\n      },\n    }),\n    'remove behavior from context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'remove behavior')\n\n        context.behaviors.delete(event.behaviorConfig)\n\n        return new Set([...context.behaviors])\n      },\n    }),\n    'emit patch event': enqueueActions(({event, enqueue}) => {\n      assertEvent(event, 'internal.patch')\n\n      enqueue.emit(event)\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['internal.patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'defer incoming patches': assign({\n      pendingIncomingPatchesEvents: ({context, event}) => {\n        return event.type === 'patches'\n          ? [...context.pendingIncomingPatchesEvents, event]\n          : context.pendingIncomingPatchesEvents\n      },\n    }),\n    'emit pending incoming patches': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingIncomingPatchesEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'clear pending incoming patches': assign({\n      pendingIncomingPatchesEvents: [],\n    }),\n    'handle blur': ({event}) => {\n      assertEvent(event, 'blur')\n\n      try {\n        ReactEditor.blur(event.editor)\n      } catch (error) {\n        console.error(new Error(`Failed to blur editor: ${error.message}`))\n      }\n    },\n    'handle focus': ({context}) => {\n      if (!context.slateEditor) {\n        console.error('No Slate editor found to focus')\n        return\n      }\n\n      try {\n        const currentSelection = context.slateEditor.selection\n        ReactEditor.focus(context.slateEditor)\n        if (currentSelection) {\n          Transforms.select(context.slateEditor, currentSelection)\n        }\n      } catch (error) {\n        console.error(new Error(`Failed to focus editor: ${error.message}`))\n      }\n    },\n    'handle behavior event': ({context, event, self}) => {\n      assertEvent(event, ['behavior event'])\n\n      try {\n        const behaviors = sortByPriority([\n          ...context.behaviors.values(),\n          ...coreBehaviorsConfig,\n        ]).map((config) => config.behavior)\n\n        performEvent({\n          mode: 'raise',\n          behaviors,\n          remainingEventBehaviors: behaviors,\n          event: event.behaviorEvent,\n          editor: event.editor,\n          keyGenerator: context.keyGenerator,\n          schema: context.schema,\n          getSnapshot: () =>\n            createEditorSnapshot({\n              converters: [...context.converters],\n              editor: event.editor,\n              keyGenerator: context.keyGenerator,\n              readOnly: self.getSnapshot().matches({'edit mode': 'read only'}),\n              schema: context.schema,\n              hasTag: (tag) => self.getSnapshot().hasTag(tag),\n              internalDrag: context.internalDrag,\n            }),\n          nativeEvent: event.nativeEvent,\n        })\n      } catch (error) {\n        console.error(\n          new Error(\n            `Raising \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n    },\n  },\n  guards: {\n    'slate is busy': ({context}) => {\n      if (!context.slateEditor) {\n        return false\n      }\n\n      return context.slateEditor.operations.length > 0\n    },\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: new Set([]),\n    converters: new Set(input.converters ?? []),\n    getLegacySchema: input.getLegacySchema,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    pendingIncomingPatchesEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    initialValue: input.initialValue,\n  }),\n  on: {\n    'add behavior': {actions: 'add behavior to context'},\n    'remove behavior': {actions: 'remove behavior from context'},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n    'update selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => ({...event, type: 'selection'})),\n      ],\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          on: {\n            'behavior event': {\n              actions: 'handle behavior event',\n              guard: ({event}) =>\n                event.behaviorEvent.type === 'clipboard.copy' ||\n                event.behaviorEvent.type === 'mouse.click' ||\n                event.behaviorEvent.type === 'serialize' ||\n                event.behaviorEvent.type === 'serialization.failure' ||\n                event.behaviorEvent.type === 'serialization.success' ||\n                event.behaviorEvent.type === 'select',\n            },\n          },\n          states: {\n            'determine initial edit mode': {\n              entry: [\n                () => {\n                  debug(\n                    'entry: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              exit: [\n                () => {\n                  debug(\n                    'exit: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              on: {\n                'done syncing value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->read only->read only')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->read only->read only')\n                },\n              ],\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: 'handle behavior event',\n            },\n            'blur': {\n              actions: 'handle blur',\n            },\n            'focus': {\n              target: '.focusing',\n              actions: [assign({slateEditor: ({event}) => event.editor})],\n            },\n          },\n          initial: 'idle',\n          states: {\n            'idle': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->idle')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable-idle')\n                },\n              ],\n              on: {\n                dragstart: {\n                  actions: [\n                    assign({\n                      internalDrag: ({event}) => ({\n                        ghost: event.ghost,\n                        origin: event.origin,\n                      }),\n                    }),\n                  ],\n                  target: 'dragging internally',\n                },\n              },\n            },\n            'focusing': {\n              initial: 'checking if busy',\n              states: {\n                'checking if busy': {\n                  entry: [\n                    () => {\n                      debug(\n                        'entry: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug(\n                        'exit: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  always: [\n                    {\n                      guard: 'slate is busy',\n                      target: 'busy',\n                    },\n                    {\n                      target: '#editor.edit mode.editable.idle',\n                      actions: ['handle focus'],\n                    },\n                  ],\n                },\n                'busy': {\n                  entry: [\n                    () => {\n                      debug('entry: edit mode->editable->focusing-busy')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: edit mode->editable->focusing->busy')\n                    },\n                  ],\n                  after: {\n                    10: {\n                      target: 'checking if busy',\n                    },\n                  },\n                },\n              },\n            },\n            'dragging internally': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->dragging internally')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable->dragging internally')\n                },\n                ({context}) => {\n                  if (context.internalDrag?.ghost) {\n                    try {\n                      context.internalDrag.ghost.parentNode?.removeChild(\n                        context.internalDrag.ghost,\n                      )\n                    } catch (error) {\n                      console.error(\n                        new Error(\n                          `Removing the internal drag ghost failed due to: ${error.message}`,\n                        ),\n                      )\n                    }\n                  }\n                },\n                assign({internalDrag: undefined}),\n              ],\n              tags: ['dragging internally'],\n              on: {\n                dragend: {target: 'idle'},\n                drop: {target: 'idle'},\n              },\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          entry: [\n            () => {\n              debug('entry: setup->setting up')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: setup->setting up')\n            },\n            'emit ready',\n            'emit pending incoming patches',\n            'clear pending incoming patches',\n          ],\n          on: {\n            'internal.patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing value': {\n              target: 'set up',\n            },\n            'patches': {\n              actions: ['defer incoming patches'],\n            },\n          },\n        },\n        'set up': {\n          type: 'parallel',\n          states: {\n            'value sync': {\n              initial: 'idle',\n              states: {\n                'idle': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->idle')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->idle')\n                    },\n                  ],\n                  on: {\n                    'patches': {\n                      actions: [emit(({event}) => event)],\n                    },\n                    'syncing value': {\n                      target: 'syncing value',\n                    },\n                  },\n                },\n                'syncing value': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->syncing value')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->syncing value')\n                    },\n                    'emit pending incoming patches',\n                    'clear pending incoming patches',\n                  ],\n                  on: {\n                    'patches': {\n                      actions: ['defer incoming patches'],\n                    },\n                    'done syncing value': {\n                      target: 'idle',\n                    },\n                  },\n                },\n              },\n            },\n            'writing': {\n              initial: 'pristine',\n              states: {\n                pristine: {\n                  initial: 'idle',\n                  states: {\n                    idle: {\n                      entry: [\n                        () => {\n                          debug('entry: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug('exit: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      on: {\n                        'normalizing': {\n                          target: 'normalizing',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                      },\n                    },\n                    normalizing: {\n                      entry: [\n                        () => {\n                          debug(\n                            'entry: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug(\n                            'exit: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      on: {\n                        'done normalizing': {\n                          target: 'idle',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                        },\n                      },\n                    },\n                  },\n                },\n                dirty: {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->writing->dirty')\n                    },\n                    'emit pending events',\n                    'clear pending events',\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->writing->dirty')\n                    },\n                  ],\n                  on: {\n                    'internal.patch': {\n                      actions: 'emit patch event',\n                    },\n                    'mutation': {\n                      actions: 'emit mutation event',\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function createLegacySchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): PortableTextMemberSchemaTypes {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {defineField, defineType, type ObjectSchemaType} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createLegacySchema} from './legacy-schema'\n\n/**\n * @public\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n}\n\nexport type FieldDefinition = {\n  name: string\n  type: 'string' | 'number' | 'boolean' | 'array' | 'object'\n}\n\n/**\n * @public\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  inlineObjects?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  annotations?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @public\n * A helper wrapper that adds editor support, such as autocomplete and type checking, for a schema definition.\n * @example\n * ```ts\n * import { defineSchema } from '@portabletext/editor'\n *\n * const schemaDefinition = defineSchema({\n *  decorators: [{name: 'strong'}, {name: 'em'}, {name: 'underline'}],\n *  annotations: [{name: 'link'}],\n *  styles: [\n *    {name: 'normal'},\n *    {name: 'h1'},\n *    {name: 'h2'},\n *    {name: 'h3'},\n *    {name: 'blockquote'},\n *  ],\n *  lists: [],\n *  inlineObjects: [],\n *  blockObjects: [],\n * }\n * ```\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\nconst temporaryImageName = `tmp-${defaultKeyGenerator()}-image`\nconst temporaryUrlName = `tmp-${defaultKeyGenerator()}-url`\n\nconst temporaryObjectNames: Record<string, string> = {\n  image: temporaryImageName,\n  url: temporaryUrlName,\n}\n\nconst objectNames: Record<string, string> = {\n  [temporaryImageName]: 'image',\n  [temporaryUrlName]: 'url',\n}\n\nconst defaultObjectTitles: Record<string, string> = {\n  image: 'Image',\n  url: 'URL',\n}\n\n/**\n * @public\n */\nexport type EditorSchema = {\n  annotations: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  block: {\n    name: string\n  }\n  blockObjects: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  decorators: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n  inlineObjects: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  span: {\n    name: string\n  }\n  styles: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n  lists: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n}\n\nexport function legacySchemaToEditorSchema(\n  schema: PortableTextMemberSchemaTypes,\n): EditorSchema {\n  return {\n    annotations: schema.annotations.map((annotation) => ({\n      name: annotation.name,\n      fields: annotation.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: annotation.title,\n    })),\n    block: {\n      name: schema.block.name,\n    },\n    blockObjects: schema.blockObjects.map((blockObject) => ({\n      name: blockObject.name,\n      fields: blockObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: blockObject.title,\n    })),\n    decorators: schema.decorators.map((decorator) => ({\n      name: decorator.value,\n      title: decorator.title,\n      value: decorator.value,\n    })),\n    inlineObjects: schema.inlineObjects.map((inlineObject) => ({\n      name: inlineObject.name,\n      fields: inlineObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: inlineObject.title,\n    })),\n    span: {\n      name: schema.span.name,\n    },\n    styles: schema.styles.map((style) => ({\n      name: style.value,\n      title: style.title,\n      value: style.value,\n    })),\n    lists: schema.lists.map((list) => ({\n      name: list.value,\n      title: list.title,\n      value: list.value,\n    })),\n  }\n}\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition: TSchemaDefinition): EditorSchema {\n  return legacySchemaToEditorSchema(\n    compileSchemaDefinitionToLegacySchema(definition),\n  )\n}\n\nexport function compileSchemaDefinitionToLegacySchema<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition): PortableTextMemberSchemaTypes {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with certain names.\n        name: temporaryObjectNames[blockObject.name] ?? blockObject.name,\n        title:\n          blockObject.title === undefined\n            ? // This avoids the default title which is a title case of the object name\n              defaultObjectTitles[blockObject.name]\n            : blockObject.title,\n        fields:\n          blockObject.fields?.map((field) => ({\n            name: field.name,\n            type: field.type,\n          })) ?? [],\n      }),\n    ) ?? []\n\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with certain names.\n        name: temporaryObjectNames[inlineObject.name] ?? inlineObject.name,\n\n        title:\n          inlineObject.title === undefined\n            ? // This avoids the default title which is a title case of the object name\n              defaultObjectTitles[inlineObject.name]\n            : inlineObject.title,\n        fields:\n          inlineObject.fields?.map((field) => ({\n            name: field.name,\n            type: field.type,\n          })) ?? [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n              fields:\n                annotation.fields?.map((field) => ({\n                  name: field.name,\n                  type: field.type,\n                })) ?? [],\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createLegacySchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      objectNames[blockObject.name] !== undefined\n        ? ({\n            ...blockObject,\n            name: objectNames[blockObject.name],\n            type: {\n              ...blockObject.type,\n              name: objectNames[blockObject.name],\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n    inlineObjects: pteSchema.inlineObjects.map((inlineObject) =>\n      objectNames[inlineObject.name] !== undefined\n        ? ({\n            ...inlineObject,\n            name: objectNames[inlineObject.name],\n          } as ObjectSchemaType)\n        : inlineObject,\n    ),\n  } satisfies PortableTextMemberSchemaTypes\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport type {ActorRefFrom} from 'xstate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  fromCallback,\n  not,\n  setup,\n  stateIn,\n  type AnyEventObject,\n} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport type {PatchEvent} from './relay-machine'\n\nconst debug = debugWithName('mutation-machine')\n\nexport type MutationActor = ActorRefFrom<typeof mutationMachine>\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingMutations: Array<{\n        operationId?: string\n        value: Array<PortableTextBlock> | undefined\n        patches: Array<Patch>\n      }>\n      pendingPatchEvents: Array<PatchEvent>\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'mutation delay passed'\n        }\n      | {\n          type: 'patch'\n          patch: Patch\n          operationId?: string\n          value: Array<PortableTextBlock>\n        }\n      | {\n          type: 'typing'\n        }\n      | {\n          type: 'not typing'\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        },\n    input: {} as {\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        }\n      | PatchEvent,\n  },\n  actions: {\n    'assign readOnly': assign({\n      readOnly: ({context, event}) =>\n        event.type === 'update readOnly' ? event.readOnly : context.readOnly,\n    }),\n    'emit patch': enqueueActions(({event, enqueue}) => {\n      if (event.type === 'patch') {\n        enqueue.emit({type: 'patch', patch: event.patch})\n      }\n    }),\n    'emit has pending mutations': emit({type: 'has pending mutations'}),\n    'emit mutations': enqueueActions(({context, enqueue}) => {\n      for (const bulk of context.pendingMutations) {\n        enqueue.emit({\n          type: 'mutation',\n          patches: bulk.patches,\n          snapshot: bulk.value,\n        })\n      }\n    }),\n    'clear pending mutations': assign({\n      pendingMutations: [],\n    }),\n    'defer mutation': assign({\n      pendingMutations: ({context, event}) => {\n        assertEvent(event, 'patch')\n\n        if (context.pendingMutations.length === 0) {\n          return [\n            {\n              operationId: event.operationId,\n              value: event.value,\n              patches: [event.patch],\n            },\n          ]\n        }\n\n        const lastBulk = context.pendingMutations.at(-1)\n\n        if (lastBulk && lastBulk.operationId === event.operationId) {\n          return context.pendingMutations.slice(0, -1).concat({\n            value: event.value,\n            operationId: lastBulk.operationId,\n            patches: [...lastBulk.patches, event.patch],\n          })\n        }\n\n        return context.pendingMutations.concat({\n          value: event.value,\n          operationId: event.operationId,\n          patches: [event.patch],\n        })\n      },\n    }),\n    'clear pending patch events': assign({\n      pendingPatchEvents: [],\n    }),\n    'defer patch': assign({\n      pendingPatchEvents: ({context, event}) =>\n        event.type === 'patch'\n          ? [...context.pendingPatchEvents, event]\n          : context.pendingPatchEvents,\n    }),\n    'emit pending patch events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingPatchEvents) {\n        enqueue.emit(event)\n      }\n    }),\n  },\n  actors: {\n    'type listener': fromCallback<\n      AnyEventObject,\n      {slateEditor: PortableTextSlateEditor},\n      {type: 'typing'} | {type: 'not typing'}\n    >(({input, sendBack}) => {\n      const originalApply = input.slateEditor.apply\n\n      input.slateEditor.apply = (op) => {\n        if (op.type === 'insert_text' || op.type === 'remove_text') {\n          sendBack({type: 'typing'})\n        } else {\n          sendBack({type: 'not typing'})\n        }\n        originalApply(op)\n      }\n\n      return () => {\n        input.slateEditor.apply = originalApply\n      }\n    }),\n    'mutation debouncer': fromCallback(({sendBack}) => {\n      const interval = setInterval(\n        () => {\n          sendBack({type: 'mutation delay passed'})\n        },\n        process.env.NODE_ENV === 'test' ? 250 : 0,\n      )\n\n      return () => {\n        clearInterval(interval)\n      }\n    }),\n  },\n  guards: {\n    'is read-only': ({context}) => context.readOnly,\n    'is typing': stateIn({typing: 'typing'}),\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n  delays: {\n    'type debounce': process.env.NODE_ENV === 'test' ? 0 : 250,\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingMutations: [],\n    pendingPatchEvents: [],\n    readOnly: input.readOnly,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  on: {\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    typing: {\n      initial: 'idle',\n      invoke: {\n        src: 'type listener',\n        input: ({context}) => ({slateEditor: context.slateEditor}),\n      },\n      states: {\n        idle: {\n          entry: [\n            () => {\n              debug('entry: typing->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: typing->idle')\n              debug('entry: typing->typing')\n            },\n          ],\n          on: {\n            typing: {\n              target: 'typing',\n            },\n          },\n        },\n        typing: {\n          after: {\n            'type debounce': {\n              target: 'idle',\n              actions: [\n                () => {\n                  debug('exit: typing->typing')\n                },\n              ],\n            },\n          },\n          on: {\n            'not typing': {\n              target: 'idle',\n            },\n            'typing': {\n              target: 'typing',\n              reenter: true,\n            },\n          },\n        },\n      },\n    },\n    mutations: {\n      initial: 'idle',\n      states: {\n        'idle': {\n          entry: [\n            () => {\n              debug('entry: mutations->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->idle')\n            },\n          ],\n          on: {\n            patch: [\n              {\n                guard: 'is read-only',\n                actions: ['defer patch', 'defer mutation'],\n                target: 'has pending mutations',\n              },\n              {\n                actions: ['emit patch', 'defer mutation'],\n                target: 'has pending mutations',\n              },\n            ],\n          },\n        },\n        'has pending mutations': {\n          entry: [\n            () => {\n              debug('entry: mutations->has pending mutations')\n            },\n            'emit has pending mutations',\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->has pending mutations')\n            },\n          ],\n          invoke: {\n            src: 'mutation debouncer',\n          },\n          on: {\n            'mutation delay passed': {\n              guard: and([\n                not('is read-only'),\n                not('is typing'),\n                'slate is normalizing',\n              ]),\n              target: 'idle',\n              actions: [\n                'emit pending patch events',\n                'clear pending patch events',\n                'emit mutations',\n                'clear pending mutations',\n              ],\n            },\n            'patch': [\n              {\n                guard: 'is read-only',\n                actions: ['defer patch', 'defer mutation'],\n              },\n              {\n                actions: ['emit patch', 'defer mutation'],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n})\n","import {\n  isPortableTextSpan,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {toSlateRange} from '../../internal-utils/ranges'\nimport {\n  isListItemActive,\n  isStyleActive,\n  slateRangeToSelection,\n} from '../../internal-utils/slate-utils'\nimport {fromSlateValue, toSlateValue} from '../../internal-utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../internal-utils/weakMaps'\nimport {addAnnotationOperationImplementation} from '../../operations/behavior.operation.annotation.add'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'focus',\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'blur',\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      return snapshot.beta.activeDecorators.includes(mark)\n    },\n    marks: (): string[] => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      return [\n        ...snapshot.beta.activeAnnotations,\n        ...snapshot.beta.activeDecorators,\n      ]\n    },\n    undo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n    },\n    redo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n    },\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return editor.selection\n          ? (slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor,\n              range: editor.selection,\n            })?.focus.path ?? [])\n          : []\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block',\n          block: {\n            _type: type.name,\n            ...(value ? value : {}),\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      return isAnnotationActive({editor, annotation: {name: annotationType}})\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          operation: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection,\n        })\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n\nfunction isAnnotationActive({\n  editor,\n  annotation,\n}: {\n  editor: PortableTextSlateEditor\n  annotation: {\n    name: string\n  }\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2) {\n    return false\n  }\n\n  try {\n    const spans = [\n      ...Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => Text.isText(node),\n      }),\n    ]\n\n    if (spans.length === 0) {\n      return false\n    }\n\n    if (\n      spans.some(\n        ([span]) =>\n          !isPortableTextSpan(span) || !span.marks || span.marks?.length === 0,\n      )\n    )\n      return false\n\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = Editor.node(editor, path, {depth: 1})\n      if (editor.isTextBlock(block) && block.markDefs) {\n        return [...accMarkDefs, ...block.markDefs]\n      }\n      return accMarkDefs\n    }, [] as PortableTextObject[])\n\n    return spans.every(([span]) => {\n      if (!isPortableTextSpan(span)) return false\n\n      const spanMarkDefs = span.marks?.map(\n        (markKey) =>\n          selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n      )\n\n      return spanMarkDefs?.includes(annotation.name)\n    })\n  } catch {\n    return false\n  }\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {emit, setup, type ActorRefFrom} from 'xstate'\nimport type {EditorSelection, InvalidValueResolution} from '../types/editor'\n\n/**\n * @public\n */\nexport type EditorEmittedEvent =\n  | {\n      type: 'blurred'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      /**\n       * @deprecated\n       */\n      type: 'done loading'\n    }\n  | {\n      type: 'editable'\n    }\n  | ErrorEvent\n  | {\n      type: 'focused'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      /**\n       * @deprecated\n       */\n      type: 'loading'\n    }\n  | MutationEvent\n  | PatchEvent\n  | {\n      type: 'read only'\n    }\n  | {\n      type: 'ready'\n    }\n  | {\n      type: 'selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n\n/**\n * @deprecated The event is no longer emitted\n */\ntype ErrorEvent = {\n  type: 'error'\n  name: string\n  description: string\n  data: unknown\n}\n\nexport type InternalEditorEmittedEvent = EditorEmittedEvent | UnsetEvent\n\n/**\n * @public\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\nexport type PatchEvent = {\n  type: 'patch'\n  patch: Patch\n}\n\nexport type UnsetEvent = {\n  /**\n   * @deprecated Use `'patch'` events instead\n   */\n  type: 'unset'\n  previousValue: Array<PortableTextBlock>\n}\n\nexport type RelayActor = ActorRefFrom<typeof relayMachine>\n\nexport const relayMachine = setup({\n  types: {\n    events: {} as InternalEditorEmittedEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n  },\n}).createMachine({\n  id: 'relay',\n  on: {\n    '*': {\n      actions: emit(({event}) => event),\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport type {\n  PortableTextBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {InvalidValueResolution} from '../types/editor'\nimport {isTextBlock} from './parse-blocks'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: EditorSchema,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isTextBlock({schema: types}, {...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.name).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  not,\n  raise,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport type {ActorRefFrom} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport {validateValue} from '../internal-utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../internal-utils/values'\nimport {\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../internal-utils/withChanges'\nimport {withoutPatching} from '../internal-utils/withoutPatching'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\nconst debug = debugWithName('sync machine')\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\nexport type SyncActor = ActorRefFrom<typeof syncMachine>\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing value'}\n      | {type: 'syncing value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing value': emit({\n      type: 'done syncing value',\n    }),\n    'emit syncing value': emit({\n      type: 'syncing value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      const editable = !context.readOnly\n      const isProcessingLocalChanges = context.isProcessingLocalChanges\n      const isChanging = isChangingRemotely(context.slateEditor) ?? false\n      const isBusy = editable && (isProcessingLocalChanges || isChanging)\n\n      debug('isBusy', {isBusy, editable, isProcessingLocalChanges, isChanging})\n\n      return isBusy\n    },\n    'is empty value': ({event}) => {\n      return event.type === 'update value' && event.value === undefined\n    },\n    'is empty array': ({event}) => {\n      return (\n        event.type === 'update value' &&\n        Array.isArray(event.value) &&\n        event.value.length === 0\n      )\n    },\n    'is new value': ({context, event}) => {\n      return (\n        event.type === 'update value' && context.previousValue !== event.value\n      )\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) => {\n      return isEqual(context.pendingValue, context.previousValue)\n    },\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValue: input.initialValue,\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  entry: [\n    raise(({context}) => {\n      return {type: 'update value', value: context.initialValue}\n    }),\n  ],\n  on: {\n    'has pending mutations': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'idle',\n  states: {\n    idle: {\n      entry: [\n        () => {\n          debug('entry: syncing->idle')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->idle')\n        },\n      ],\n      on: {\n        'update value': [\n          {\n            guard: and(['is empty value', not('initial value synced')]),\n            actions: ['assign initial value synced', 'emit done syncing value'],\n          },\n          {\n            guard: and(['is empty array', not('initial value synced')]),\n            actions: [\n              'assign initial value synced',\n              emit({type: 'value changed', value: []}),\n              'emit done syncing value',\n            ],\n          },\n          {\n            guard: and(['is busy', 'is new value']),\n            target: 'busy',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: 'is new value',\n            target: 'syncing',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: not('initial value synced'),\n            actions: [\n              () => {\n                debug('no new value – setting initial value as synced')\n              },\n              'assign initial value synced',\n              'emit done syncing value',\n            ],\n          },\n          {\n            actions: [\n              () => {\n                debug('no new value and initial value already synced')\n              },\n            ],\n          },\n        ],\n      },\n    },\n    busy: {\n      entry: [\n        () => {\n          debug('entry: syncing->busy')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->busy')\n        },\n      ],\n      after: {\n        1000: [\n          {\n            guard: 'is busy',\n            target: '.',\n            reenter: true,\n            actions: [\n              () => {\n                debug('reenter: syncing->busy')\n              },\n            ],\n          },\n          {\n            target: 'syncing',\n          },\n        ],\n      },\n      on: {\n        'update value': [\n          {\n            guard: 'is new value',\n            actions: ['assign pending value'],\n          },\n        ],\n      },\n    },\n    syncing: {\n      entry: [\n        () => {\n          debug('entry: syncing->syncing')\n        },\n        'emit syncing value',\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->syncing')\n        },\n        'emit done syncing value',\n      ],\n      invoke: {\n        src: 'sync value',\n        id: 'sync value',\n        input: ({context}) => {\n          return {\n            context: {\n              keyGenerator: context.keyGenerator,\n              previousValue: context.previousValue,\n              readOnly: context.readOnly,\n              schema: context.schema,\n            },\n            slateEditor: context.slateEditor,\n            streamBlocks: !context.initialValueSynced,\n            value: context.pendingValue,\n          }\n        },\n      },\n      on: {\n        'update value': {\n          guard: 'is new value',\n          actions: ['assign pending value'],\n        },\n        'patch': {\n          actions: [emit(({event}) => event)],\n        },\n        'invalid value': {\n          actions: [emit(({event}) => event)],\n        },\n        'value changed': {\n          actions: [emit(({event}) => event)],\n        },\n        'done syncing': [\n          {\n            guard: 'value changed while syncing',\n            actions: ['assign previous value', 'assign initial value synced'],\n            target: 'syncing',\n            reenter: true,\n          },\n          {\n            target: 'idle',\n            actions: [\n              'clear pending value',\n              'assign previous value',\n              'assign initial value synced',\n            ],\n          },\n        ],\n      },\n    },\n  },\n})\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let doneSyncing = false\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            if (hadSelection) {\n              Transforms.deselect(slateEditor)\n            }\n\n            const childrenLength = slateEditor.children.length\n\n            slateEditor.children.forEach((_, index) => {\n              Transforms.removeNodes(slateEditor, {\n                at: [childrenLength - 1 - index],\n              })\n            })\n\n            Transforms.insertNodes(\n              slateEditor,\n              slateEditor.pteCreateTextBlock({decorators: []}),\n              {at: [0]},\n            )\n\n            // Add a new selection in the top of the document\n            if (hadSelection) {\n              Transforms.select(slateEditor, [0, 0])\n            }\n          })\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    if (streamBlocks) {\n      await new Promise<void>((resolve) => {\n        Editor.withoutNormalizing(slateEditor, () => {\n          withRemoteChanges(slateEditor, () => {\n            withoutPatching(slateEditor, () => {\n              if (doneSyncing) {\n                resolve()\n                return\n              }\n\n              isChanged = removeExtraBlocks({\n                slateEditor,\n                slateValueFromProps,\n              })\n\n              const processBlocks = async () => {\n                for await (const [\n                  currentBlock,\n                  currentBlockIndex,\n                ] of getStreamedBlocks({\n                  slateValue: slateValueFromProps,\n                })) {\n                  const {blockChanged, blockValid} = syncBlock({\n                    context,\n                    sendBack,\n                    block: currentBlock,\n                    index: currentBlockIndex,\n                    slateEditor,\n                    value,\n                  })\n\n                  isChanged = blockChanged || isChanged\n                  isValid = isValid && blockValid\n                }\n\n                resolve()\n              }\n\n              processBlocks()\n            })\n          })\n        })\n      })\n    } else {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            isChanged = removeExtraBlocks({\n              slateEditor,\n              slateValueFromProps,\n            })\n\n            let index = 0\n\n            for (const currentBlock of slateValueFromProps) {\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index,\n                slateEditor,\n                value,\n              })\n\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n              index++\n            }\n          })\n        })\n      })\n    }\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    doneSyncing = true\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      doneSyncing = true\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  doneSyncing = true\n  sendBack({type: 'done syncing', value})\n}\n\nfunction removeExtraBlocks({\n  slateEditor,\n  slateValueFromProps,\n}: {\n  slateEditor: PortableTextSlateEditor\n  slateValueFromProps: Array<Descendant>\n}) {\n  let isChanged = false\n  const childrenLength = slateEditor.children.length\n\n  // Remove blocks that have become superfluous\n  if (slateValueFromProps.length < childrenLength) {\n    for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--) {\n      Transforms.removeNodes(slateEditor, {\n        at: [i],\n      })\n    }\n    isChanged = true\n  }\n  return isChanged\n}\n\nasync function* getStreamedBlocks({\n  slateValue,\n}: {\n  slateValue: Array<Descendant>\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (index % 10 === 0) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              if (oldBlockChild.text.length > 0) {\n                Transforms.delete(slateEditor, {\n                  at: {\n                    focus: {path, offset: 0},\n                    anchor: {path, offset: oldBlockChild.text.length},\n                  },\n                })\n              }\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {createActor} from 'xstate'\nimport {createCoreConverters} from '../converters/converters.core'\nimport type {Editor, EditorConfig} from '../editor'\nimport {debugWithName} from '../internal-utils/debug'\nimport {compileType} from '../internal-utils/schema'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport type {EditableAPI, PortableTextSlateEditor} from '../types/editor'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport type {EditorActor} from './editor-machine'\nimport {editorMachine} from './editor-machine'\nimport {\n  compileSchemaDefinitionToLegacySchema,\n  legacySchemaToEditorSchema,\n} from './editor-schema'\nimport {getEditorSnapshot} from './editor-selector'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createLegacySchema} from './legacy-schema'\nimport {mutationMachine, type MutationActor} from './mutation-machine'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\nimport {relayMachine, type RelayActor} from './relay-machine'\nimport {syncMachine, type SyncActor} from './sync-machine'\n\nconst debug = debugWithName('setup')\n\nexport type InternalEditor = Editor & {\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createInternalEditor(config: EditorConfig): {\n  actors: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n  editor: InternalEditor\n  subscriptions: Array<() => () => void>\n} {\n  debug('Creating new Editor instance')\n\n  const subscriptions: Array<() => () => void> = []\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  const relayActor = createActor(relayMachine)\n  const slateEditor = createSlateEditor({\n    editorActor,\n    relayActor,\n    subscriptions,\n  })\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n  const {mutationActor, syncActor} = createActors({\n    editorActor,\n    relayActor,\n    slateEditor: slateEditor.instance,\n    subscriptions,\n  })\n\n  const editor = {\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    registerBehavior: (behaviorConfig) => {\n      const priority = createEditorPriority({\n        name: 'custom',\n        reference: {\n          priority: corePriority,\n          importance: 'higher',\n        },\n      })\n      const behaviorConfigWithPriority = {\n        ...behaviorConfig,\n        priority,\n      }\n\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig: behaviorConfigWithPriority,\n      })\n\n      return () => {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig: behaviorConfigWithPriority,\n        })\n      }\n    },\n    send: (event) => {\n      switch (event.type) {\n        case 'update value':\n          syncActor.send(event)\n          break\n\n        case 'update readOnly':\n        case 'patches':\n        case 'update maxBlocks':\n          editorActor.send(event)\n          break\n\n        case 'blur':\n          editorActor.send({\n            type: 'blur',\n            editor: slateEditor.instance,\n          })\n          break\n\n        case 'focus':\n          editorActor.send({\n            type: 'focus',\n            editor: slateEditor.instance,\n          })\n          break\n\n        case 'insert.block object':\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: {\n              type: 'insert.block',\n              block: {\n                _type: event.blockObject.name,\n                ...(event.blockObject.value ?? {}),\n              },\n              placement: event.placement,\n            },\n            editor: slateEditor.instance,\n          })\n          break\n\n        default:\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: event,\n            editor: slateEditor.instance,\n          })\n      }\n    },\n    on: (event, listener) => {\n      const subscription = relayActor.on(event, (event) => {\n        switch (event.type) {\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n            listener(event)\n            break\n        }\n      })\n\n      return subscription\n    },\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  } satisfies InternalEditor\n\n  return {\n    actors: {\n      editorActor,\n      mutationActor,\n      relayActor,\n      syncActor,\n    },\n    editor,\n    subscriptions,\n  }\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  const {legacySchema, schema} = compileSchemasFromEditorConfig(config)\n\n  return {\n    converters: createCoreConverters(legacySchema),\n    getLegacySchema: () => legacySchema,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema,\n    initialValue: config.initialValue,\n  } as const\n}\n\nfunction compileSchemasFromEditorConfig(config: EditorConfig) {\n  const legacySchema = config.schemaDefinition\n    ? compileSchemaDefinitionToLegacySchema(config.schemaDefinition)\n    : createLegacySchema(\n        config.schema.hasOwnProperty('jsonType')\n          ? config.schema\n          : compileType(config.schema),\n      )\n  const schema = legacySchemaToEditorSchema(legacySchema)\n\n  return {\n    legacySchema,\n    schema,\n  }\n}\n\nfunction createActors(config: {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  slateEditor: PortableTextSlateEditor\n  subscriptions: Array<() => () => void>\n}): {\n  mutationActor: MutationActor\n  syncActor: SyncActor\n} {\n  debug('Creating new Actors')\n\n  const mutationActor = createActor(mutationMachine, {\n    input: {\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  const syncActor = createActor(syncMachine, {\n    input: {\n      initialValue: config.editorActor.getSnapshot().context.initialValue,\n      keyGenerator: config.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = mutationActor.on('*', (event) => {\n      if (event.type === 'has pending mutations') {\n        syncActor.send({type: 'has pending mutations'})\n      }\n      if (event.type === 'mutation') {\n        syncActor.send({type: 'mutation'})\n        config.editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n      if (event.type === 'patch') {\n        config.relayActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = syncActor.on('*', (event) => {\n      switch (event.type) {\n        case 'invalid value':\n          config.relayActor.send(event)\n          break\n        case 'value changed':\n          config.relayActor.send(event)\n          break\n        case 'patch':\n          config.editorActor.send({\n            ...event,\n            type: 'internal.patch',\n            value: fromSlateValue(\n              config.slateEditor.children,\n              config.editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(config.slateEditor),\n            ),\n          })\n          break\n\n        default:\n          config.editorActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.subscribe((snapshot) => {\n      if (snapshot.matches({'edit mode': 'read only'})) {\n        mutationActor.send({type: 'update readOnly', readOnly: true})\n        syncActor.send({type: 'update readOnly', readOnly: true})\n      } else {\n        mutationActor.send({type: 'update readOnly', readOnly: false})\n        syncActor.send({type: 'update readOnly', readOnly: false})\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'editable':\n        case 'mutation':\n        case 'ready':\n        case 'read only':\n        case 'selection':\n          config.relayActor.send(event)\n          break\n        case 'internal.patch':\n          mutationActor.send({...event, type: 'patch'})\n          break\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  return {\n    mutationActor,\n    syncActor,\n  }\n}\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {EditorSelection} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import {createContext} from 'react'\nimport type {RelayActor} from './relay-machine'\n\nexport const RelayActorContext = createContext<RelayActor>({} as RelayActor)\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorChange} from '../types/editor'\nimport type {InternalEditorEmittedEvent, RelayActor} from './relay-machine'\n\nexport function RouteEventsToChanges(props: {\n  relayActor: RelayActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    const sub = props.relayActor.on('*', (event) => {\n      const change = eventToChange(event)\n\n      if (change) {\n        handleChange(change)\n      }\n    })\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [props.relayActor])\n\n  return null\n}\n\nexport function eventToChange(\n  event: InternalEditorEmittedEvent,\n): EditorChange | undefined {\n  switch (event.type) {\n    case 'blurred': {\n      return {type: 'blur', event: event.event}\n    }\n    case 'patch':\n      return event\n    case 'loading': {\n      return {type: 'loading', isLoading: true}\n    }\n    case 'done loading': {\n      return {type: 'loading', isLoading: false}\n    }\n    case 'focused': {\n      return {type: 'focus', event: event.event}\n    }\n    case 'value changed': {\n      return {type: 'value', value: event.value}\n    }\n    case 'invalid value': {\n      return {\n        type: 'invalidValue',\n        resolution: event.resolution,\n        value: event.value,\n      }\n    }\n    case 'mutation': {\n      return event\n    }\n    case 'ready': {\n      return event\n    }\n    case 'selection': {\n      return event\n    }\n    case 'unset': {\n      return event\n    }\n  }\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport type {AddedAnnotationPaths} from '../operations/behavior.operation.annotation.add'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createInternalEditor, type InternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport type {MutationActor} from './mutation-machine'\nimport {RelayActorContext} from './relay-actor-context'\nimport type {RelayActor} from './relay-machine'\nimport {eventToChange} from './route-events-to-changes'\nimport type {SyncActor} from './sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends InternalEditor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends InternalEditor\n    ? {\n        /**\n         * @internal\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<InternalEditor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: InternalEditor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  private actors?: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n\n  private subscriptions: Array<() => () => void> = []\n  private unsubscribers: Array<() => void> = []\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as InternalEditor\n      this.schemaTypes = this.editor._internal.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    } else {\n      const {actors, editor, subscriptions} = createInternalEditor({\n        initialValue: props.value,\n        keyGenerator: props.keyGenerator,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n        schema: props.schemaType,\n      })\n\n      this.subscriptions = subscriptions\n      this.actors = actors\n\n      this.editor = editor\n      this.schemaTypes = actors.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    }\n\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidMount(): void {\n    if (!this.actors) {\n      return\n    }\n\n    for (const subscription of this.subscriptions) {\n      this.unsubscribers.push(subscription())\n    }\n\n    const relayActorSubscription = this.actors.relayActor.on('*', (event) => {\n      const change = eventToChange(event)\n\n      if (!change) {\n        return\n      }\n\n      if (!this.props.editor) {\n        this.props.onChange(change)\n      }\n\n      this.change$.next(change)\n    })\n\n    this.unsubscribers.push(relayActorSubscription.unsubscribe)\n\n    this.actors.editorActor.start()\n    this.actors.mutationActor.start()\n    this.actors.relayActor.start()\n    this.actors.syncActor.start()\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      console.warn('Updating schema type is no longer supported')\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  componentWillUnmount(): void {\n    for (const unsubscribe of this.unsubscribers) {\n      unsubscribe()\n    }\n\n    if (this.actors) {\n      stopActor(this.actors.editorActor)\n      stopActor(this.actors.mutationActor)\n      stopActor(this.actors.relayActor)\n      stopActor(this.actors.syncActor)\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <RelayActorContext.Provider value={this.actors!.relayActor}>\n            <Slate\n              editor={this.editor._internal.slateEditor.instance}\n              initialValue={this.editor._internal.slateEditor.initialValue}\n            >\n              <PortableTextEditorContext.Provider value={this}>\n                <PortableTextEditorSelectionProvider\n                  editorActor={this.editor._internal.editorActor}\n                >\n                  {this.props.children}\n                </PortableTextEditorSelectionProvider>\n              </PortableTextEditorContext.Provider>\n            </Slate>\n          </RelayActorContext.Provider>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    return editor.editable?.getFragment()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.undo',\n   * })\n   * ```\n   */\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.redo',\n   * })\n   * ```\n   */\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n","import {useSelector} from '@xstate/react'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {useSelected, useSlateStatic, type RenderLeafProps} from 'slate-react'\nimport type {\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nexport interface RenderSpanProps extends RenderLeafProps {\n  children: ReactElement<any>\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\nexport function RenderSpan(props: RenderSpanProps) {\n  const slateEditor = useSlateStatic()\n  const editorActor = useContext(EditorActorContext)\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n\n  const parent = props.children.props.parent\n  const block = parent && slateEditor.isTextBlock(parent) ? parent : undefined\n\n  const path = useMemo(\n    () =>\n      block\n        ? [{_key: block._key}, 'children', {_key: props.leaf._key}]\n        : undefined,\n    [block, props.leaf._key],\n  )\n\n  const decoratorSchemaTypes = editorActor\n    .getSnapshot()\n    .context.schema.decorators.map((decorator) => decorator.name)\n\n  const decorators = uniq(\n    (props.leaf.marks ?? []).filter((mark) =>\n      decoratorSchemaTypes.includes(mark),\n    ),\n  )\n\n  const annotationMarkDefs = (props.leaf.marks ?? []).flatMap((mark) => {\n    if (decoratorSchemaTypes.includes(mark)) {\n      return []\n    }\n\n    const markDef = block?.markDefs?.find((markDef) => markDef._key === mark)\n\n    if (markDef) {\n      return [markDef]\n    }\n\n    return []\n  })\n\n  const shouldTrackSelectionAndFocus =\n    annotationMarkDefs.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n\n    const winSelection = window.getSelection()\n\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blurred', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focused', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  let children = props.children\n\n  /**\n   * Support `renderDecorator` render function for each Decorator\n   */\n  for (const mark of decorators) {\n    const legacyDecoratorSchemaType = legacySchema.decorators.find(\n      (dec) => dec.value === mark,\n    )\n\n    if (path && legacyDecoratorSchemaType && props.renderDecorator) {\n      children = props.renderDecorator({\n        children: children,\n        editorElementRef: spanRef,\n        focused,\n        path,\n        selected,\n        schemaType: legacyDecoratorSchemaType,\n        value: mark,\n        type: legacyDecoratorSchemaType,\n      })\n    }\n  }\n\n  /**\n   * Support `renderAnnotation` render function for each Annotation\n   */\n  for (const annotationMarkDef of annotationMarkDefs) {\n    const legacyAnnotationSchemaType = legacySchema.annotations.find(\n      (t) => t.name === annotationMarkDef._type,\n    )\n    if (legacyAnnotationSchemaType) {\n      if (block && path && props.renderAnnotation) {\n        children = (\n          <span ref={spanRef}>\n            {props.renderAnnotation({\n              block,\n              children: children,\n              editorElementRef: spanRef,\n              focused,\n              path,\n              selected,\n              schemaType: legacyAnnotationSchemaType,\n              value: annotationMarkDef,\n              type: legacyAnnotationSchemaType,\n            })}\n          </span>\n        )\n      } else {\n        children = <span ref={spanRef}>{children}</span>\n      }\n    }\n  }\n\n  /**\n   * Support `renderChild` render function for the Span itself\n   */\n  if (block && path && props.renderChild) {\n    const child = block.children.find(\n      (_child) => _child._key === props.leaf._key,\n    ) // Ensure object equality\n\n    if (child) {\n      children = props.renderChild({\n        annotations: annotationMarkDefs,\n        children: children,\n        editorElementRef: spanRef,\n        focused,\n        path,\n        schemaType: legacySchema.span,\n        selected,\n        value: child,\n        type: legacySchema.span,\n      })\n    }\n  }\n\n  return (\n    <span {...props.attributes} ref={spanRef}>\n      {children}\n    </span>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport {useContext, type CSSProperties} from 'react'\nimport type {Text} from 'slate'\nimport type {RenderLeafProps} from 'slate-react'\nimport type {\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderPlaceholderFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderSpan} from './render-span'\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\nexport function RenderLeaf(\n  props: RenderLeafProps & {\n    leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n    readOnly: boolean\n    renderAnnotation?: RenderAnnotationFunction\n    renderChild?: RenderChildFunction\n    renderDecorator?: RenderDecoratorFunction\n    renderPlaceholder?: RenderPlaceholderFunction\n  },\n) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n\n  if (props.leaf._type !== schema.span.name) {\n    return props.children\n  }\n\n  let renderedSpan = <RenderSpan {...props} />\n\n  if (\n    props.renderPlaceholder &&\n    props.leaf.placeholder &&\n    props.text.text === ''\n  ) {\n    return (\n      <>\n        <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n          {props.renderPlaceholder()}\n        </span>\n        {renderedSpan}\n      </>\n    )\n  }\n\n  const rangeDecoration = props.leaf.rangeDecoration\n\n  if (rangeDecoration) {\n    renderedSpan = rangeDecoration.component({children: renderedSpan})\n  }\n\n  return renderedSpan\n}\n","import type {Editable} from 'slate-react'\n\nexport type RenderTextProps = Parameters<\n  NonNullable<React.ComponentProps<typeof Editable>['renderText']>\n>[0]\n\nexport function RenderText(props: RenderTextProps) {\n  return (\n    <span\n      {...props.attributes}\n      data-child-key={props.text._key}\n      data-child-name={props.text._type}\n      data-child-type=\"span\"\n    >\n      {props.children}\n    </span>\n  )\n}\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isHotkey} from '../../internal-utils/is-hotkey'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions ?? {}\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import {isEqual} from 'lodash'\nimport {\n  Element,\n  Path,\n  Range,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n} from 'slate'\nimport {\n  and,\n  assign,\n  fromCallback,\n  setup,\n  type ActorRefFrom,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {moveRangeByOperation, toSlateRange} from '../internal-utils/ranges'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor} from '../internal-utils/values'\nimport type {PortableTextSlateEditor, RangeDecoration} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\nconst slateOperationCallback: CallbackLogicFunction<\n  AnyEventObject,\n  {type: 'slate operation'; operation: Operation},\n  {slateEditor: PortableTextSlateEditor}\n> = ({input, sendBack}) => {\n  const originalApply = input.slateEditor.apply\n\n  input.slateEditor.apply = (op) => {\n    if (op.type !== 'set_selection') {\n      sendBack({type: 'slate operation', operation: op})\n    }\n\n    originalApply(op)\n  }\n\n  return () => {\n    input.slateEditor.apply = originalApply\n  }\n}\n\ntype DecoratedRange = BaseRange & {rangeDecoration: RangeDecoration}\n\nexport const rangeDecorationsMachine = setup({\n  types: {\n    context: {} as {\n      decoratedRanges: Array<DecoratedRange>\n      pendingRangeDecorations: Array<RangeDecoration>\n      skipSetup: boolean\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n      updateCount: number\n    },\n    input: {} as {\n      rangeDecorations: Array<RangeDecoration>\n      readOnly: boolean\n      schema: EditorSchema\n      skipSetup: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'ready'\n        }\n      | {\n          type: 'range decorations updated'\n          rangeDecorations: Array<RangeDecoration>\n        }\n      | {\n          type: 'slate operation'\n          operation: Operation\n        }\n      | {\n          type: 'update read only'\n          readOnly: boolean\n        },\n  },\n  actions: {\n    'update pending range decorations': assign({\n      pendingRangeDecorations: ({context, event}) => {\n        if (event.type !== 'range decorations updated') {\n          return context.pendingRangeDecorations\n        }\n\n        return event.rangeDecorations\n      },\n    }),\n    'set up initial range decorations': assign({\n      decoratedRanges: ({context}) => {\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const rangeDecoration of context.pendingRangeDecorations) {\n          const slateRange = toSlateRange(\n            rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          rangeDecorationState.push({\n            rangeDecoration,\n            ...slateRange,\n          })\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'update range decorations': assign({\n      decoratedRanges: ({context, event}) => {\n        if (event.type !== 'range decorations updated') {\n          return context.decoratedRanges\n        }\n\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const rangeDecoration of event.rangeDecorations) {\n          const slateRange = toSlateRange(\n            rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          rangeDecorationState.push({\n            rangeDecoration,\n            ...slateRange,\n          })\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'move range decorations': assign({\n      decoratedRanges: ({context, event}) => {\n        if (event.type !== 'slate operation') {\n          return context.decoratedRanges\n        }\n\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const decoratedRange of context.decoratedRanges) {\n          const slateRange = toSlateRange(\n            decoratedRange.rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            decoratedRange.rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration: decoratedRange.rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          let newRange: BaseRange | null | undefined\n\n          newRange = moveRangeByOperation(slateRange, event.operation)\n          if (\n            (newRange && newRange !== slateRange) ||\n            (newRange === null && slateRange)\n          ) {\n            const newRangeSelection = newRange\n              ? slateRangeToSelection({\n                  schema: context.schema,\n                  editor: context.slateEditor,\n                  range: newRange,\n                })\n              : null\n\n            decoratedRange.rangeDecoration.onMoved?.({\n              newSelection: newRangeSelection,\n              rangeDecoration: decoratedRange.rangeDecoration,\n              origin: 'local',\n            })\n          }\n\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            rangeDecorationState.push({\n              ...(newRange || slateRange),\n              rangeDecoration: {\n                ...decoratedRange.rangeDecoration,\n                selection: slateRangeToSelection({\n                  schema: context.schema,\n                  editor: context.slateEditor,\n                  range: newRange,\n                }),\n              },\n            })\n          }\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'assign readOnly': assign({\n      readOnly: ({context, event}) => {\n        if (event.type !== 'update read only') {\n          return context.readOnly\n        }\n\n        return event.readOnly\n      },\n    }),\n    'increment update count': assign({\n      updateCount: ({context}) => {\n        return context.updateCount + 1\n      },\n    }),\n  },\n  actors: {\n    'slate operation listener': fromCallback(slateOperationCallback),\n  },\n  guards: {\n    'has pending range decorations': ({context}) =>\n      context.pendingRangeDecorations.length > 0,\n    'has range decorations': ({context}) => context.decoratedRanges.length > 0,\n    'has different decorations': ({context, event}) => {\n      if (event.type !== 'range decorations updated') {\n        return false\n      }\n\n      const existingRangeDecorations = context.decoratedRanges.map(\n        (decoratedRange) => ({\n          anchor: decoratedRange.rangeDecoration.selection?.anchor,\n          focus: decoratedRange.rangeDecoration.selection?.focus,\n        }),\n      )\n\n      const newRangeDecorations = event.rangeDecorations.map(\n        (rangeDecoration) => ({\n          anchor: rangeDecoration.selection?.anchor,\n          focus: rangeDecoration.selection?.focus,\n        }),\n      )\n\n      const different = !isEqual(existingRangeDecorations, newRangeDecorations)\n\n      return different\n    },\n    'not read only': ({context}) => !context.readOnly,\n    'should skip setup': ({context}) => context.skipSetup,\n  },\n}).createMachine({\n  id: 'range decorations',\n  context: ({input}) => ({\n    readOnly: input.readOnly,\n    pendingRangeDecorations: input.rangeDecorations,\n    decoratedRanges: [],\n    skipSetup: input.skipSetup,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n    updateCount: 0,\n  }),\n  invoke: {\n    src: 'slate operation listener',\n    input: ({context}) => ({slateEditor: context.slateEditor}),\n  },\n  on: {\n    'update read only': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'setting up',\n  states: {\n    'setting up': {\n      always: [\n        {\n          guard: and(['should skip setup', 'has pending range decorations']),\n          target: 'ready',\n          actions: [\n            'set up initial range decorations',\n            'increment update count',\n          ],\n        },\n        {\n          guard: 'should skip setup',\n          target: 'ready',\n        },\n      ],\n      on: {\n        'range decorations updated': {\n          actions: ['update pending range decorations'],\n        },\n        'ready': [\n          {\n            target: 'ready',\n            guard: 'has pending range decorations',\n            actions: [\n              'set up initial range decorations',\n              'increment update count',\n            ],\n          },\n          {\n            target: 'ready',\n          },\n        ],\n      },\n    },\n    'ready': {\n      initial: 'idle',\n      on: {\n        'range decorations updated': {\n          target: '.idle',\n          guard: 'has different decorations',\n          actions: ['update range decorations', 'increment update count'],\n        },\n      },\n      states: {\n        'idle': {\n          on: {\n            'slate operation': {\n              target: 'moving range decorations',\n              guard: and(['has range decorations', 'not read only']),\n            },\n          },\n        },\n        'moving range decorations': {\n          entry: ['move range decorations'],\n          always: {\n            target: 'idle',\n          },\n        },\n      },\n    },\n  },\n})\n\nexport function createDecorate(\n  rangeDecorationActor: ActorRefFrom<typeof rangeDecorationsMachine>,\n) {\n  return function decorate([node, path]: NodeEntry): Array<BaseRange> {\n    if (\n      isEqualToEmptyEditor(\n        rangeDecorationActor.getSnapshot().context.slateEditor.children,\n        rangeDecorationActor.getSnapshot().context.schema,\n      )\n    ) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        } as BaseRange,\n      ]\n    }\n\n    // Editor node has a path length of 0 (should never be decorated)\n    if (path.length === 0) {\n      return []\n    }\n\n    if (!Element.isElement(node) || node.children.length === 0) {\n      return []\n    }\n\n    const blockIndex = path.at(0)\n\n    if (blockIndex === undefined) {\n      return []\n    }\n\n    return rangeDecorationActor\n      .getSnapshot()\n      .context.decoratedRanges.filter((decoratedRange) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (Range.isCollapsed(decoratedRange)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          return node.children.some(\n            (_, childIndex) =>\n              Path.equals(decoratedRange.anchor.path, [\n                blockIndex,\n                childIndex,\n              ]) &&\n              Path.equals(decoratedRange.focus.path, [blockIndex, childIndex]),\n          )\n        }\n\n        return (\n          Range.intersection(decoratedRange, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || Range.includes(decoratedRange, path)\n        )\n      })\n  }\n}\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {Editor, Transforms, type Text} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport {getCompoundClientRect} from '../internal-utils/compound-client-rect'\nimport {debugWithName} from '../internal-utils/debug'\nimport {getDragSelection} from '../internal-utils/drag-selection'\nimport {getEventPosition} from '../internal-utils/event-position'\nimport {parseBlocks} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {normalizeSelection} from '../internal-utils/selection'\nimport {getSelectionDomNodes} from '../internal-utils/selection-elements'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport {isSelectionCollapsed} from '../utils'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {RenderElement} from './components/render-element'\nimport {RenderLeaf} from './components/render-leaf'\nimport {RenderText, type RenderTextProps} from './components/render-text'\nimport {EditorActorContext} from './editor-actor-context'\nimport {getEditorSnapshot} from './editor-selector'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {\n  createDecorate,\n  rangeDecorationsMachine,\n} from './range-decorations-machine'\nimport {RelayActorContext} from './relay-actor-context'\n\nconst debug = debugWithName('component:Editable')\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n *\n *\n * The core component that renders the editor. Must be placed within the {@link EditorProvider} component.\n *\n * @example\n * ```tsx\n * import { PortableTextEditable, EditorProvider } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  return (\n *   <EditorProvider>\n *    <PortableTextEditable />\n *  </EditorProvider>\n *  )\n * }\n * ```\n * @group Components\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onCut,\n    onClick,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragOver,\n    onDrop,\n    onDragLeave,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const editorActor = useContext(EditorActorContext)\n  const relayActor = useContext(RelayActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const slateEditor = useSlate()\n\n  const rangeDecorationsActor = useActorRef(rangeDecorationsMachine, {\n    input: {\n      rangeDecorations: rangeDecorations ?? [],\n      readOnly,\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n      skipSetup: !editorActor.getSnapshot().matches({setup: 'setting up'}),\n    },\n  })\n  useSelector(rangeDecorationsActor, (s) => s.context.updateCount)\n  const decorate = useMemo(\n    () => createDecorate(rangeDecorationsActor),\n    [rangeDecorationsActor],\n  )\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'update read only',\n      readOnly,\n    })\n  }, [rangeDecorationsActor, readOnly])\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'range decorations updated',\n      rangeDecorations: rangeDecorations ?? [],\n    })\n  }, [rangeDecorationsActor, rangeDecorations])\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    if (readOnly) {\n      return slateEditor\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    return withHotKeys(slateEditor)\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <RenderElement\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      leafProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => (\n      <RenderLeaf\n        {...leafProps}\n        readOnly={readOnly}\n        renderAnnotation={renderAnnotation}\n        renderChild={renderChild}\n        renderDecorator={renderDecorator}\n        renderPlaceholder={renderPlaceholder}\n      />\n    ),\n    [\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n    ],\n  )\n\n  const renderText = useCallback(\n    (props: RenderTextProps) => <RenderText {...props} />,\n    [],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(\n          slateEditor.children,\n          editorActor.getSnapshot().context.schema.block.name,\n        ),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'update selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [editorActor, propsSelection, slateEditor])\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      rangeDecorationsActor.send({\n        type: 'ready',\n      })\n\n      restoreSelectionFromProps()\n    })\n\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [rangeDecorationsActor, editorActor, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = slateEditor.selection\n          ? slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor: slateEditor,\n              range: slateEditor.selection,\n            })\n          : undefined\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for copy event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.copy',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  const handleCut = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>) => {\n      if (onCut) {\n        const result = onCut(event)\n        // CutFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for cut event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.cut',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCut, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = fromSlateValue(\n        slateEditor.children,\n        editorActor.getSnapshot().context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(slateEditor),\n      )\n      const ptRange = slateEditor.selection\n        ? slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor: slateEditor,\n            range: slateEditor.selection,\n          })\n        : null\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({\n        event,\n        value,\n        path,\n        schemaTypes: portableTextEditor.schemaTypes,\n      })\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        relayActor.send({type: 'loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              const selection = editorActor.getSnapshot().context.selection\n              const position = selection ? {selection} : undefined\n\n              if (!position) {\n                console.warn('Could not find position for paste event')\n                return\n              }\n\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'clipboard.paste',\n                  originEvent: {\n                    dataTransfer: event.clipboardData,\n                  },\n                  position,\n                },\n                editor: slateEditor,\n                nativeEvent: event,\n              })\n            } else if (result.insert) {\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'insert.blocks',\n                  blocks: parseBlocks({\n                    context: {\n                      keyGenerator:\n                        editorActor.getSnapshot().context.keyGenerator,\n                      schema: editorActor.getSnapshot().context.schema,\n                    },\n                    blocks: result.insert,\n                    options: {\n                      refreshKeys: true,\n                      validateFields: true,\n                    },\n                  }),\n                  placement: 'auto',\n                },\n                editor: slateEditor,\n              })\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.warn(error)\n\n            return error\n          })\n          .finally(() => {\n            relayActor.send({type: 'done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.preventDefault()\n        event.stopPropagation()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for paste event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.paste',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, relayActor, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        relayActor.send({type: 'focused', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'update selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, slateEditor, portableTextEditor, relayActor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (position) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'mouse.click',\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onClick, editorActor, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        relayActor.send({type: 'blurred', event})\n      }\n    },\n    [relayActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keydown',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keyup',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  useEffect(() => {\n    const window = ReactEditor.getWindow(slateEditor)\n\n    const onDragEnd = () => {\n      editorActor.send({type: 'dragend'})\n    }\n    const onDrop = () => {\n      editorActor.send({type: 'drop'})\n    }\n\n    window.document.addEventListener('dragend', onDragEnd)\n    window.document.addEventListener('drop', onDrop)\n\n    return () => {\n      window.document.removeEventListener('dragend', onDragEnd)\n      window.document.removeEventListener('drop', onDrop)\n    }\n  }, [slateEditor, editorActor])\n\n  const handleDragStart = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragStart?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for dragstart event')\n        return\n      }\n\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor,\n      })\n      const dragSelection = getDragSelection({\n        eventSelection: position.selection,\n        snapshot,\n      })\n\n      const selectingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      const dragGhost = document.createElement('div')\n\n      const draggedDomNodes = getSelectionDomNodes({\n        snapshot: {\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        },\n        slateEditor,\n      })\n\n      if (selectingEntireBlocks) {\n        // Clone the DOM Nodes so they won't be visually clipped by scroll-containers etc.\n        const clonedBlockNodes = draggedDomNodes.blockNodes.map((node) =>\n          node.cloneNode(true),\n        )\n\n        for (const block of clonedBlockNodes) {\n          if (block instanceof HTMLElement) {\n            block.style.position = 'relative'\n          }\n          dragGhost.appendChild(block)\n        }\n\n        // A custom drag ghost element can be configured using this data attribute\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost.replaceChildren(customGhost)\n        }\n\n        // Setting the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        dragGhost.style.position = 'absolute'\n        dragGhost.style.left = '-99999px'\n        dragGhost.style.boxSizing = 'border-box'\n        document.body.appendChild(dragGhost)\n\n        if (customGhost) {\n          const customGhostRect = customGhost.getBoundingClientRect()\n          const x = event.clientX - customGhostRect.left\n          const y = event.clientY - customGhostRect.top\n          dragGhost.style.width = `${customGhostRect.width}px`\n          dragGhost.style.height = `${customGhostRect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        } else {\n          const blocksDomRect = getCompoundClientRect(\n            draggedDomNodes.blockNodes,\n          )\n          const x = event.clientX - blocksDomRect.left\n          const y = event.clientY - blocksDomRect.top\n          dragGhost.style.width = `${blocksDomRect.width}px`\n          dragGhost.style.height = `${blocksDomRect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      } else {\n        const clonedChildNodes = draggedDomNodes.childNodes.map((node) =>\n          node.cloneNode(true),\n        )\n\n        for (const child of clonedChildNodes) {\n          dragGhost.appendChild(child)\n        }\n\n        dragGhost.style.position = 'absolute'\n        dragGhost.style.left = '-99999px'\n        dragGhost.style.boxSizing = 'border-box'\n        document.body.appendChild(dragGhost)\n\n        const childrenDomRect = getCompoundClientRect(\n          draggedDomNodes.childNodes,\n        )\n        const x = event.clientX - childrenDomRect.left\n        const y = event.clientY - childrenDomRect.top\n        dragGhost.style.width = `${childrenDomRect.width}px`\n        dragGhost.style.height = `${childrenDomRect.height}px`\n\n        event.dataTransfer.setDragImage(dragGhost, x, y)\n      }\n\n      // Select drag selection\n      // If the selection is expanded then we just select the end of the\n      // selection\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          at: isSelectionCollapsed(dragSelection)\n            ? dragSelection\n            : {\n                anchor: getSelectionEndPoint(dragSelection),\n                focus: getSelectionEndPoint(dragSelection),\n                backward: false,\n              },\n        },\n        editor: slateEditor,\n      })\n\n      editorActor.send({\n        type: 'dragstart',\n        origin: {\n          selection: dragSelection,\n        },\n        ghost: dragGhost,\n      })\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragstart',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position: {\n            selection: dragSelection,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragStart, editorActor, slateEditor],\n  )\n\n  const handleDrag = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrag?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drag',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrag, editorActor, slateEditor],\n  )\n\n  const handleDragEnd = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnd?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragend',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnd, editorActor, slateEditor],\n  )\n\n  const handleDragEnter = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnter?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragenter',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnter, editorActor, slateEditor],\n  )\n\n  const handleDragOver = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragOver?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragover',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragOver, editorActor, slateEditor],\n  )\n\n  const handleDrop = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrop?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for drop event')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drop',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrop, editorActor, slateEditor],\n  )\n\n  const handleDragLeave = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragLeave?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragleave',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragLeave, editorActor, slateEditor],\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      data-read-only={readOnly}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onCut={handleCut}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragEnd={handleDragEnd}\n      onDragEnter={handleDragEnter}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      onDragLeave={handleDragLeave}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      renderText={renderText}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import React from 'react'\n\ntype ConstantRef<TConstant> = {constant: TConstant}\n\nexport default function useConstant<TConstant>(\n  factory: () => TConstant,\n): TConstant {\n  const ref = React.useRef<ConstantRef<TConstant>>(null)\n\n  if (!ref.current) {\n    ref.current = {constant: factory()}\n  }\n\n  return ref.current.constant\n}\n","import type React from 'react'\nimport {useEffect} from 'react'\nimport {Slate} from 'slate-react'\nimport type {EditorConfig} from '../editor'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport useConstant from '../internal-utils/use-constant'\nimport {createInternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {EditorContext} from './editor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {\n  PortableTextEditor,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\nimport {RelayActorContext} from './relay-actor-context'\nimport {RouteEventsToChanges} from './route-events-to-changes'\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n * The EditorProvider component is used to set up the editor context and configure the Portable Text Editor.\n * @example\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n *\n * function App() {\n *  return (\n *    <EditorProvider initialConfig={{ ... }} >\n *      ...\n *    </EditorProvider>\n *  )\n * }\n *\n * ```\n * @group Components\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const {internalEditor, portableTextEditor} = useConstant(() => {\n    const internalEditor = createInternalEditor(props.initialConfig)\n    const portableTextEditor = new PortableTextEditor({\n      editor: internalEditor.editor,\n    } as unknown as PortableTextEditorProps)\n\n    return {internalEditor, portableTextEditor}\n  })\n\n  useEffect(() => {\n    const unsubscribers: Array<() => void> = []\n\n    for (const subscription of internalEditor.subscriptions) {\n      unsubscribers.push(subscription())\n    }\n\n    internalEditor.actors.editorActor.start()\n    internalEditor.actors.mutationActor.start()\n    internalEditor.actors.relayActor.start()\n    internalEditor.actors.syncActor.start()\n\n    return () => {\n      for (const unsubscribe of unsubscribers) {\n        unsubscribe()\n      }\n\n      stopActor(internalEditor.actors.editorActor)\n      stopActor(internalEditor.actors.mutationActor)\n      stopActor(internalEditor.actors.relayActor)\n      stopActor(internalEditor.actors.syncActor)\n    }\n  }, [internalEditor])\n\n  return (\n    <EditorContext.Provider value={internalEditor.editor}>\n      <RouteEventsToChanges\n        relayActor={internalEditor.actors.relayActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <EditorActorContext.Provider value={internalEditor.actors.editorActor}>\n        <RelayActorContext.Provider value={internalEditor.actors.relayActor}>\n          <Slate\n            editor={internalEditor.editor._internal.slateEditor.instance}\n            initialValue={\n              internalEditor.editor._internal.slateEditor.initialValue\n            }\n          >\n            <PortableTextEditorContext.Provider value={portableTextEditor}>\n              <PortableTextEditorSelectionProvider\n                editorActor={internalEditor.actors.editorActor}\n              >\n                {props.children}\n              </PortableTextEditorSelectionProvider>\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </RelayActorContext.Provider>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n"],"names":["EditorEventListener","props","$","_c","editor","useEditor","on","useEffectEvent","t0","subscription","unsubscribe","t1","useEffect","getCompoundClientRect","nodes","length","DOMRect","elements","filter","node","Element","firstRect","at","getBoundingClientRect","left","top","right","bottom","i","rect","Math","min","max","rootName","debug","debugWithName","name","namespace","enabled","getDragSelection","eventSelection","snapshot","dragSelection","selectors","context","selection","draggingCollapsedSelection","draggedTextBlock","draggedSpan","anchor","utils","block","focus","selectedBlocks","getSelectedBlocks","selectionStartBlock","selectionEndBlock","selectionStartPoint","selectionEndPoint","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","value","_key","isEqual","toSlateValue","schemaTypes","Array","isArray","map","_type","rest","textBlock","hasInlines","hasMissingStyle","style","hasMissingMarkDefs","markDefs","hasMissingChildren","children","child","cType","cKey","cRest","text","marks","__inline","isElement","styles","fromSlateValue","textBlockType","Error","_cType","v","k","t","_i","blockValue","isEqualToEmptyEditor","undefined","Text","isText","join","getBlockPath","blockPath","from","Editor","match","n","blockIndex","getFocusBlock","path","slice","getFocusSpan","isTextSpan","getSelectedSpans","getSelectionStartBlock","Range","start","getPointBlock","point","getSelectionEndBlock","end","getFocusChild","focusBlock","focusBlockPath","childIndex","focusChild","Node","getPointChild","pointChild","getFirstBlock","firstBlockPath","getLastBlock","lastBlockPath","getNodeBlock","schema","isEditor","isBlockElement","elementToBlock","element","parent","mode","some","isInline","blockObjects","blockObject","isListItemActive","listItem","isTextBlock","every","isListBlock","isStyleActive","slateRangeToSelection","range","anchorBlock","anchorChild","offset","backward","isBackward","push","getEventPosition","editorActor","slateEditor","event","getSnapshot","matches","setup","getEventNode","positionBlock","getEventPositionBlock","getEventSelection","focusBlockKey","DOMEditor","hasTarget","target","toSlateNode","firstBlock","firstBlockRect","toDOMNode","pageY","lastBlock","lastBlockRef","elementRect","height","abs","getSlateRangeFromEvent","isDOMNode","window","getWindow","domRange","document","caretPositionFromPoint","position","clientX","clientY","createRange","setStart","offsetNode","setEnd","caretRangeFromPoint","console","warn","toSlateRange","exactMatch","suppressThrow","toSlatePath","isKeySegment","isVoid","childPath","findIndex","concat","moveRangeByOperation","operation","Point","transform","equals","normalizePoint","newPath","newOffset","blockKey","childKey","find","blk","cld","normalizeSelection","newAnchor","newFocus","getSelectionDomNodes","blockNodes","childNodes","blockEntries","childEntries","isBlock","blockNode","childNode","IS_PROCESSING_REMOTE_CHANGES","WeakMap","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","EditorActorContext","createContext","DropIndicator","Symbol","for","jsx","width","borderBottom","zIndex","RenderDefaultBlockObject","userSelect","jsxs","RenderDefaultInlineObject","inlineObject","defaultKeyGenerator","randomKey","getByteHexTable","table","toString","whatwgRNG","rnds8","Uint8Array","getRandomValues","reduce","str","createEditorPriority","config","id","reference","corePriority","createCoreBlockElementBehaviorsConfig","key","onSetDragPositionBlock","behavior","defineBehavior","guard","dropFocusBlock","dragOrigin","beta","internalDrag","origin","draggedBlock","actions","type","effect","priority","importance","forward","useCoreBlockElementBehaviors","useContext","t2","behaviorConfigs","behaviorConfig","send","behaviorConfig_0","RenderBlockObject","dragPositionBlock","setDragPositionBlock","useState","blockObjectRef","useRef","useSlateStatic","selected","useSelected","legacySchemaType","useSelector","s","getLegacySchema","error","focused","isCollapsed","attributes","readOnly","renderBlock","editorElementRef","schemaType","RenderInlineObject","inlineObjectRef","inlineObjects","findPath","display","renderChild","annotations","RenderTextBlock","blockRef","legacySchema","legacyBlockSchemaType","renderStyle","legacyStyleSchemaType","renderListItem","legacyListItemSchemaType","lists","list","level","spellCheck","RenderElement","_temp","parseInlineObject","keyGenerator","_temp2","options","refreshKeys","validateFields","parseTextBlock","_temp3","parseBlockObject","_temp4","t3","PortableTextEditorContext","usePortableTextEditor","forEachActor","actorRef","callback","Object","values","forEach","stopActor","persistedSnapshots","ref","observers","Set","systemSnapshot","system","stop","_snapshot","_processingStatus","converterJson","mimeType","serialize","portableTextConverter","converters","converter","originEvent","reason","deserialize","converterPortableText","blocks","sliceBlocks","data","JSON","stringify","parse","parsedBlocks","flatMap","parsedBlock","parseBlock","hasTag","createConverterTextHtml","html","toHTML","onMissingComponent","components","unknownType","htmlToBlocks","portableText","unstable_whitespaceOnPasteMode","createConverterTextPlain","span","inlineObjectType","title","blockObjectType","textToHtml","escapeHtml","split","line","replace","entityMap","String","createCoreConverters","compileType","rawType","Schema","compile","types","get","createPlaceholderBlock","getActiveAnnotations","markState","mark","decorators","decorator","includes","getActiveDecorators","decoratorState","activeDecorators","activeDecorator","insertTextOperationImplementation","activeAnnotations","focusSpan","Transforms","insertText","state","markStateDecorators","insertNodes","isPortableTextSpan","isPortableTextBlock","def","getPreviousSpan","spanPath","previousSpan","reverse","Path","isBefore","getNextSpan","nextSpan","isAfter","withRemoteChanges","fn","prev","isChangingRemotely","set","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","defaultCompare","a","b","useEditorSelector","selector","compare","editorActorSnapshot","getEditorSnapshot","slateEditorInstance","_internal","instance","tag","createWithPortableTextMarkModel","apply","normalizeNode","nodeEntry","nextNode","mergeNodes","voids","setNodes","orphanedAnnotations","markDefKeys","newMarkDefs","markDef","has","add","operations","op","properties","newProperties","previousSelectionIsCollapsed","newSelectionIsCollapsed","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","depth","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","annotation","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","isExpanded","spanHasAnnotations","deletingFromTheEnd","deletingAllText","previousSpanHasSameAnnotation","nextSpanHasSameAnnotation","withoutNormalizing","onChange","targetBlock","targetPath","oldDefs","uniq","removeDecoratorOperationImplementation","hanging","eMark","lonelyEmptySpan","existingMarksWithoutDecorator","existingMark","cloneDiff","diff2","patch","CURRENT_UNDO_STEP","withUndoStep","current","undoStepId","getCurrentUndoStepId","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","getRemotePatches","createWithUndoRedo","previousSnapshot","remotePatches","previousUndoStepId","subscriptions","sub","patches","reset","history","undos","redos","splice","time","Date","step","lastOp","overwrite","shouldOverwrite","save","currentUndoStepId","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","historyUndoOperationImplementation","otherPatches","item","transformedOperations","flatten","transformOperation","reversedOperations","Operation","inverse","withoutSaving","err","deselect","pop","historyRedoOperationImplementation","transformedOperation","insertBlockIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","index","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","dType","currentFocus","currentAnchor","addAnnotationOperationImplementation","parsedAnnotation","parseAnnotation","paths","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationOperationImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","nextSpansWithSameAnnotation","marksWithoutAnnotation","blockSetOperationImplementation","location","filteredProps","updatedBlock","slateBlock","blockUnsetOperationImplementation","propsToRemove","prop","updatedTextBlock","omit","propsToSet","updatedBlockObject","decoratorAddOperationImplementation","manualAnchor","blockOffset","direction","manualFocus","manualSelection","editorSelection","anchorOffset","selectionPoint","focusOffset","newValue","newSelection","offsets","trimmedSelection","newRange","splitTextNodes","isRange","existingMarks","deleteOperationImplementation","anchorBlockPath","isKeyedSegment","removeNodes","delete","unit","insertInlineObjectOperationImplementation","parsedInlineObject","focusTextBlock","insertSpanOperationImplementation","insertBlockOperationImplementation","fragment","placement","select","insertBlock","startBlock","startBlockPath","endBlock","endBlockPath","nextPath","selectionBefore","insertFragment","currentSelection","endBlockEndPoint","adjustedSelection","next","endBlockStartPoint","moveBackwardOperationImplementation","move","distance","moveBlockOperationImplementation","to","moveNodes","moveForwardOperationImplementation","selectOperationImplementation","behaviorOperationImplementations","performOperation","message","CURRENT_OPERATION_ID","withApplyingBehaviorOperations","getCurrentOperationId","isApplyingBehaviorOperations","createWithEventListeners","maxBlocks","editorDelete","behaviorEvent","deleteBackward","deleteForward","insertBreak","insertData","dataTransfer","insertSoftBreak","redo","setFragmentData","undo","createWithMaxBlocks","rows","createWithObjectKeys","existingKeys","descendants","entry","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","diffMatchPatch","findBlock","findBlockChild","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","blocksToInsert","targetBlockIndex","normalizedIdx","editorWasEmptyBefore","targetChild","childrenToInsert","childInsertPath","oldText","newText","propPath","propEntry","newNode","applyAll","reservedProps","nextRest","prevChildren","prevRest","newVal","previousSelection","_","pteCreateTextBlock","newKeys","keys","removedProperties","property","unsetNodes","isMatch","insertTextPatch","beforeValue","textChild","isSpan","prevBlock","prevChild","prevText","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","keyName","val","indexOf","insertNodePatch","targetKey","insert","setIfMissing","splitNodePatch","splitBlock","oldBlock","targetValue","unset","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","newBlock","updatedSpan","removedSpan","moveNodePatch","childToInsert","PATCHING","withoutPatching","isPatching","createWithPatches","relayActor","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","normalize","handlePatches","p","editorWasEmpty","editorIsEmpty","debugVerbose","previousValue","operationId","createWithPlaceholderBlock","insertNode","createWithPortableTextBlockStyle","defaultStyle","SlateText","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","ptRange","existing","createWithSchemaTypes","obj","createWithUtils","getMarkState","selectedSpans","marksWithoutAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","pluginUpdateMarkState","isEditorNode","isTextBlockNode","isTypedObject","isSpanNode","isPartialSpanNode","isObjectNode","getBlock","root","getNode","getSpan","getParent","parentPath","applyOperationToPortableText","draft","createDraft","e","finishDraft","applyOperationToPortableTextDraft","insertedNode","before","after","prevPath","previous","isAncestor","truePath","newParent","newIndex","valueBefore","valueAfter","hasOwnProperty","newTextBlockNode","newSpanNode","pluginUpdateValue","withPlugins","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","createSlateEditor","withReact","createEditor","initialValue","addAnnotationOnCollapsedSelection","isSelectionCollapsed","caretWordSelection","getCaretWordSelection","raise","coreAnnotationBehaviors","IS_MAC","test","navigator","userAgent","modifiers","alt","control","meta","aliases","break","cmd","command","ctl","ctrl","del","down","esc","ins","mod","opt","option","return","space","spacebar","up","win","windows","keyCodes","isHotkey","hotkey","compareHotkey","parseHotkey","parsedHotkey","altKey","ctrlKey","metaKey","shiftKey","hotkeySegments","rawHotkeySegment","optional","endsWith","hotkeySegment","toKeyName","modifier","alias","code","TypeError","keyCode","toKeyCode","toLowerCase","toUpperCase","charCodeAt","arrowDownOnLonelyBlockObject","focusBlockObject","nextBlock","arrowUpOnLonelyBlockObject","previousBlock","breakingBlockObject","getFocusBlockObject","clickingAboveLonelyBlockObject","clickingBelowLonelyBlockObject","deletingEmptyTextBlockAfterBlockObject","selectionCollapsed","isEmptyTextBlock","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","coreDecoratorBehaviors","strongShortcut","emShortcut","underlineShortcut","codeShortcut","coreDndBehaviors","isOverlappingSelection","breakingAtTheEndOfTextBlock","atTheEndOfBlock","focusListItem","focusLevel","breakingAtTheStartOfTextBlock","focusDecorators","focusAnnotations","breakingEntireDocument","firstBlockStartPoint","lastBlockEndPoint","breakingEntireBlocks","startBlockStartPoint","coreInsertBreakBehaviors","MAX_LIST_LEVEL","clearListOnBackspace","unindentListOnBackspace","clearListOnEnter","focusListBlock","indentListOnTab","selectedListBlocks","selectedListBlock","unindentListOnShiftTab","coreListBehaviors","coreBehaviorsConfig","abstractAnnotationBehaviors","isActiveAnnotation","abstractDecoratorBehaviors","isActiveDecorator","blockOffsetsToSelection","abstractDeleteBehaviors","abstractInsertBehaviors","getFocusTextBlock","keyIs","lineBreak","abstractKeyboardBehaviors","abstractListItemBehaviors","selectedTextBlocks","getSelectedTextBlocks","isActiveListItem","abstractMoveBehaviors","getPreviousBlock","getNextBlock","abstractSelectBehaviors","getBlockEndPoint","getBlockStartPoint","abstractSplitBehaviors","getSelectionStartPoint","getSelectionEndPoint","blockEndPoint","newTextBlockSelection","newTextBlock","abstractStyleBehaviors","isActiveStyle","raiseDeserializationSuccessOrFailure","success","failures","getData","deserializeEvent","failure","raiseSerializationSuccessOrFailure","serializeEvents","serializeEvent","abstractBehaviors","setData","dropPosition","droppingOnDragOrigin","draggingEntireBlocks","draggedBlocks","textRuns","getTextBlockText","textRun","isSelectionExpanded","isSyntheticBehaviorEvent","isCustomBehaviorEvent","isNativeBehaviorEvent","isAbstractBehaviorEvent","abstractBehaviorEventTypes","nativeBehaviorEventTypes","startsWith","eventCategory","performEvent","behaviors","remainingEventBehaviors","nativeEvent","eventBehaviors","listenedNamespace","eventNamespace","preventDefault","guardSnapshot","nativeEventPrevented","defaultBehaviorOverwritten","eventBehaviorIndex","eventBehavior","shouldRun","actionSet","actionsSnapshot","action","sortByPriority","itemsWithPriority","itemsWithoutPriority","itemsByPriorityId","Map","graph","inDegree","ensureNode","addEdge","fromId","toId","visited","refId","queue","degree","result","currentId","currentItem","neighborId","newDegree","createEditorSnapshot","editorMachine","events","emitted","input","tags","assign","assertEvent","enqueueActions","enqueue","emit","pendingEvents","pendingIncomingPatchesEvents","handle blur","blur","handle focus","handle behavior event","self","guards","slate is busy","createMachine","initialReadOnly","states","initial","exit","dragstart","ghost","always","parentNode","removeChild","dragend","drop","pristine","idle","normalizing","dirty","createLegacySchema","portableTextType","blockType","of","findBlockType","childrenField","fields","field","ofType","spanType","memberType","inlineObjectTypes","blockObjectTypes","resolveEnabledStyles","resolveEnabledDecorators","resolveEnabledListItems","styleField","btField","textStyles","listField","listItems","defineSchema","definition","temporaryImageName","temporaryUrlName","temporaryObjectNames","image","url","objectNames","defaultObjectTitles","legacySchemaToEditorSchema","jsonType","compileSchemaDefinitionToLegacySchema","defineType","portableTextSchema","defineField","startCase","SanitySchema","pteSchema","mutationMachine","bulk","pendingMutations","lastBulk","pendingPatchEvents","actors","fromCallback","sendBack","originalApply","interval","setInterval","process","env","NODE_ENV","clearInterval","is read-only","stateIn","typing","slate is normalizing","isNormalizing","delays","invoke","src","reenter","mutations","and","not","createEditableAPI","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","descendant","insertChild","focusChildPath","focusNode","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","ReactEditor","spans","isAnnotationActive","annotationType","addAnnotation","SlateElement","removeAnnotation","getSelection","getValue","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","selectionMarkDefs","accMarkDefs","markKey","relayMachine","validateValue","resolution","valid","validChildTypes","validBlockTypes","description","i18n","isPlainObject","currentBlockTypeName","expectedTypeName","typeName","newSpan","autoResolve","allUsedMarks","unusedMarkDefs","markDefKey","m","orphanedMarks","dec","spanChildren","orphaned","cMrk","cIndex","newChild","childType","syncValueCallback","streamBlocks","syncValueLogic","syncMachine","initialValueSynced","pendingValue","initial value synced","is busy","editable","isProcessingLocalChanges","isChanging","isBusy","is empty value","is empty array","is new value","value changed while syncing","pending value equals previous value","busy","syncing","updateValue","doneSyncing","isChanged","isValid","hadSelection","childrenLength","slateValueFromProps","Promise","resolve","removeExtraBlocks","currentBlock","currentBlockIndex","getStreamedBlocks","slateValue","blockChanged","blockValid","syncBlock","setTimeout","hasChanges","validationValue","validation","_updateBlock","_replaceBlock","selectionFocusOnBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","createInternalEditor","createActor","editorConfigToMachineInput","mutationActor","syncActor","createActors","registerBehavior","behaviorConfigWithPriority","listener","compileSchemasFromEditorConfig","schemaDefinition","subscribe","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","setSelection","startTransition","RelayActorContext","RouteEventsToChanges","change","handleChange","change_0","eventToChange","isLoading","PortableTextEditor","Component","displayName","change$","Subject","unsubscribers","constructor","Number","parseInt","componentDidMount","relayActorSubscription","componentDidUpdate","prevProps","editorRef","componentWillUnmount","setEditable","render","legacyPatches","incomingPatches$","patches$","Slate","blockStyle","listStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","payload","RenderSpan","spanRef","portableTextEditor","blockSelected","setFocused","setSelected","useMemo","leaf","decoratorSchemaTypes","annotationMarkDefs","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","useCallback","winSelection","rangeCount","getRangeAt","intersectsNode","onBlur","onFocus","onSelection","legacyDecoratorSchemaType","renderDecorator","annotationMarkDef","legacyAnnotationSchemaType","renderAnnotation","_child","PLACEHOLDER_STYLE","pointerEvents","RenderLeaf","renderedSpan","renderPlaceholder","placeholder","rangeDecoration","component","RenderText","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","cat","possibleMark","possibleCommand","slateOperationCallback","rangeDecorationsMachine","pendingRangeDecorations","rangeDecorations","decoratedRanges","rangeDecorationState","slateRange","onMoved","decoratedRange","newRangeSelection","updateCount","has pending range decorations","has range decorations","has different decorations","existingRangeDecorations","newRangeDecorations","not read only","should skip setup","skipSetup","createDecorate","rangeDecorationActor","intersection","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onCut","onClick","onDragStart","onDrag","onDragEnd","onDragEnter","onDragOver","onDrop","onDragLeave","propsSelection","scrollSelectionIntoView","restProps","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","useSlate","rangeDecorationsActor","useActorRef","decorate","renderElement","eProps","renderLeaf","leafProps","renderText","restoreSelectionFromProps","normalizedSelection","o","onReady","onInvalidValue","onValueChanged","handleCopy","clipboardData","stopPropagation","handleCut","handlePaste","onPasteResult","then","parseBlocks","catch","finally","handleOnFocus","isDefaultPrevented","handleClick","isPropagationStopped","handleOnBlur","handleOnBeforeInput","validateSelection","findDocumentOrShadowRoot","activeElement","domSelection","existingDOMRange","newDOMRange","toDOMRange","startOffset","endOffset","removeAllRanges","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","noop","addEventListener","removeEventListener","handleDragStart","selectingEntireBlocks","dragGhost","createElement","draggedDomNodes","clonedBlockNodes","cloneNode","HTMLElement","appendChild","customGhost","querySelector","replaceChildren","setAttribute","boxSizing","body","customGhostRect","x","y","setDragImage","blocksDomRect","clonedChildNodes","childrenDomRect","handleDrag","handleDragEnd","handleDragEnter","handleDragOver","handleDrop","handleDragLeave","SlateEditable","className","useConstant","factory","React","constant","EditorProvider","initialConfig","internalEditor","internalEditor_0","portableTextEditor_0","t4","t5","t6","t7","t8","t9","t10","EditorContext"],"mappings":"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","x_google_ignoreList":[36,42]}