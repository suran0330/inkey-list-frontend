{"version":3,"file":"index.js","sources":["../src/editor-event-listener.tsx","../src/internal-utils/compound-client-rect.ts","../src/internal-utils/debug.ts","../src/internal-utils/drag-selection.ts","../src/internal-utils/values.ts","../src/internal-utils/slate-utils.ts","../src/internal-utils/event-position.ts","../src/internal-utils/paths.ts","../src/internal-utils/ranges.ts","../src/internal-utils/selection.ts","../src/internal-utils/selection-elements.ts","../src/internal-utils/weakMaps.ts","../src/editor/editor-actor-context.ts","../src/editor/components/drop-indicator.tsx","../src/editor/components/render-default-object.tsx","../src/editor/key-generator.ts","../src/priority/priority.types.ts","../src/priority/priority.core.ts","../src/behaviors/behavior.core.block-element.ts","../src/editor/components/use-core-block-element-behaviors.ts","../src/editor/components/render-block-object.tsx","../src/editor/components/render-inline-object.tsx","../src/editor/components/render-text-block.tsx","../src/editor/components/render-element.tsx","../src/editor/hooks/usePortableTextEditor.ts","../src/internal-utils/stop-actor.ts","../src/converters/converter.json.ts","../src/converters/converter.portable-text.ts","../src/converters/converter.text-html.ts","../src/converters/converter.text-plain.ts","../src/converters/converters.core.ts","../src/internal-utils/schema.ts","../src/internal-utils/create-placeholder-block.ts","../src/editor/get-active-annotations.ts","../src/editor/get-active-decorators.ts","../src/operations/behavior.operation.insert.text.ts","../../../node_modules/.pnpm/@portabletext+toolkit@2.0.17/node_modules/@portabletext/toolkit/dist/index.js","../src/internal-utils/sibling-utils.ts","../src/internal-utils/withChanges.ts","../src/internal-utils/withUndoRedo.ts","../src/editor/editor-selector.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../../../node_modules/.pnpm/@sanity+diff-match-patch@3.2.0/node_modules/@sanity/diff-match-patch/dist/index.js","../src/editor/with-undo-step.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/operations/behavior.operation.annotation.add.ts","../src/operations/behavior.operation.annotation.remove.ts","../src/operations/behavior.operation.block.set.ts","../src/operations/behavior.operation.block.unset.ts","../src/operations/behavior.operation.decorator.add.ts","../src/operations/behavior.operation.delete.ts","../src/operations/behavior.operation.insert-inline-object.ts","../src/operations/behavior.operation.insert-span.ts","../src/operations/behavior.operation.insert.block.ts","../src/operations/behavior.operation.move.backward.ts","../src/operations/behavior.operation.move.block.ts","../src/operations/behavior.operation.move.forward.ts","../src/operations/behavior.operation.select.ts","../src/operations/behavior.operations.ts","../src/editor/with-applying-behavior-operations.ts","../src/editor/plugins/create-with-event-listeners.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/internal-utils/applyPatch.ts","../src/internal-utils/operation-to-patches.ts","../src/internal-utils/withoutPatching.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithPortableTextBlockStyle.ts","../src/editor/plugins/createWithPortableTextSelections.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/internal-utils/mark-state.ts","../src/editor/plugins/slate-plugin.update-mark-state.ts","../src/internal-utils/portable-text-node.ts","../src/internal-utils/apply-operation-to-portable-text.ts","../src/editor/plugins/slate-plugin.update-value.ts","../src/editor/plugins/with-plugins.ts","../src/editor/create-slate-editor.tsx","../src/behaviors/behavior.core.annotations.ts","../src/internal-utils/is-hotkey.ts","../src/behaviors/behavior.core.block-objects.ts","../src/behaviors/behavior.core.decorators.ts","../src/behaviors/behavior.core.dnd.ts","../src/behaviors/behavior.core.insert-break.ts","../src/behaviors/behavior.core.lists.ts","../src/behaviors/behavior.core.ts","../src/behaviors/behavior.abstract.annotation.ts","../src/behaviors/behavior.abstract.decorator.ts","../src/behaviors/behavior.abstract.delete.ts","../src/behaviors/behavior.abstract.insert.ts","../src/internal-utils/key-is.ts","../src/behaviors/behavior.abstract.keyboard.ts","../src/behaviors/behavior.abstract.list-item.ts","../src/behaviors/behavior.abstract.move.ts","../src/behaviors/behavior.abstract.select.ts","../src/behaviors/behavior.abstract.split.ts","../src/behaviors/behavior.abstract.style.ts","../src/behaviors/behavior.abstract.ts","../src/behaviors/behavior.types.event.ts","../src/behaviors/behavior.perform-event.ts","../src/priority/priority.sort.ts","../src/editor/editor-snapshot.ts","../src/editor/editor-machine.ts","../src/editor/legacy-schema.ts","../src/editor/editor-schema.ts","../src/editor/mutation-machine.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/editor/relay-machine.ts","../src/internal-utils/validateValue.ts","../src/editor/sync-machine.ts","../src/editor/create-editor.ts","../src/editor/hooks/usePortableTextEditorSelection.tsx","../src/editor/relay-actor-context.ts","../src/editor/route-events-to-changes.tsx","../src/editor/PortableTextEditor.tsx","../src/editor/components/render-span.tsx","../src/editor/components/render-leaf.tsx","../src/editor/components/render-text.tsx","../src/editor/plugins/createWithHotKeys.ts","../src/editor/range-decorations-machine.ts","../src/editor/Editable.tsx","../src/internal-utils/use-constant.ts","../src/editor/editor-provider.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor/relay-machine'\nimport {useEditor} from './editor/use-editor'\n\n/**\n * @public\n * @deprecated\n * This component has been renamed. Use `EventListenerPlugin` instead.\n *\n * ```\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n * ```\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor])\n\n  return null\n}\n","export function getCompoundClientRect(nodes: Array<Node>): DOMRect {\n  if (nodes.length === 0) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  const elements = nodes.filter((node) => node instanceof Element)\n\n  const firstRect = elements.at(0)?.getBoundingClientRect()\n\n  if (!firstRect) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  let left = firstRect.left\n  let top = firstRect.top\n  let right = firstRect.right\n  let bottom = firstRect.bottom\n\n  for (let i = 1; i < elements.length; i++) {\n    const rect = elements[i].getBoundingClientRect()\n    left = Math.min(left, rect.left)\n    top = Math.min(top, rect.top)\n    right = Math.max(right, rect.right)\n    bottom = Math.max(bottom, rect.bottom)\n  }\n\n  return new DOMRect(left, top, right - left, bottom - top)\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import type {EditorSnapshot} from '..'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {EventPosition} from './event-position'\n\n/**\n * Given the current editor `snapshot` and an `eventSelection` representing\n * where the drag event origins from, this function calculates the selection\n * in the editor that should be dragged.\n */\nexport function getDragSelection({\n  eventSelection,\n  snapshot,\n}: {\n  eventSelection: EventPosition['selection']\n  snapshot: EditorSnapshot\n}) {\n  let dragSelection = eventSelection\n\n  const draggedInlineObject = selectors.getFocusInlineObject({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggedInlineObject) {\n    return dragSelection\n  }\n\n  const draggingCollapsedSelection = selectors.isSelectionCollapsed({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedTextBlock = selectors.getFocusTextBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedSpan = selectors.getFocusSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggingCollapsedSelection && draggedTextBlock && draggedSpan) {\n    // Looks like we are dragging an empty span\n    // Let's drag the entire block instead\n    dragSelection = {\n      anchor: utils.getBlockStartPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n      focus: utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n    }\n  }\n\n  const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n\n  if (\n    snapshot.context.selection &&\n    selectors.isSelectionExpanded(snapshot) &&\n    selectedBlocks.length > 1\n  ) {\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return dragSelection\n    }\n\n    const selectionStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n\n    const eventSelectionInsideBlocks = selectors.isOverlappingSelection(\n      eventSelection,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {anchor: selectionStartPoint, focus: selectionEndPoint},\n      },\n    })\n\n    if (eventSelectionInsideBlocks) {\n      dragSelection = {\n        anchor: selectionStartPoint,\n        focus: selectionEndPoint,\n      }\n    }\n  }\n\n  return dragSelection\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: EditorSchema},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: [\n                  {\n                    _key: VOID_CHILD_KEY,\n                    _type: 'span',\n                    text: '',\n                    marks: [],\n                  },\n                ],\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].name\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: [\n            {\n              _key: VOID_CHILD_KEY,\n              _type: 'span',\n              text: '',\n              marks: [],\n            },\n          ],\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: EditorSchema,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].name &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Element, Node, Range, type Path, type Point} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from './values'\n\nexport function getBlockPath({\n  editor,\n  _key,\n}: {\n  editor: PortableTextSlateEditor\n  _key: string\n}): [number] | undefined {\n  const [, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) => n._key === _key,\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  const blockIndex = blockPath?.at(0)\n\n  if (blockIndex === undefined) {\n    return undefined\n  }\n\n  return [blockIndex]\n}\n\nexport function getAnchorBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.anchor.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.focus.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusSpan({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: PortableTextSpan, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const [node, path] = Editor.node(editor, editor.selection.focus.path)\n\n    if (editor.isTextSpan(node)) {\n      return [node, path]\n    }\n  } catch {\n    return [undefined, undefined]\n  }\n\n  return [undefined, undefined]\n}\n\nexport function getSelectedSpans({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): Array<[node: PortableTextSpan, path: Path]> {\n  if (!editor.selection) {\n    return []\n  }\n\n  try {\n    return Array.from(\n      Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextSpan(node),\n      }),\n    )\n  } catch {\n    return []\n  }\n}\n\nexport function getSelectionStartBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionStartPoint = Range.start(editor.selection)\n\n  return getPointBlock({editor, point: selectionStartPoint})\n}\n\nexport function getSelectionEndBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionEndPoint = Range.end(editor.selection)\n\n  return getPointBlock({editor, point: selectionEndPoint})\n}\n\nexport function getPointBlock({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  try {\n    const [block] = Editor.node(editor, point.path.slice(0, 1)) ?? [\n      undefined,\n      undefined,\n    ]\n    return block ? [block, point.path.slice(0, 1)] : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusChild({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n  const childIndex = editor.selection?.focus.path.at(1)\n\n  if (!focusBlock || !focusBlockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const focusChild = Node.child(focusBlock, childIndex)\n\n    return focusChild\n      ? [focusChild, [...focusBlockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nfunction getPointChild({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [block, blockPath] = getPointBlock({editor, point})\n  const childIndex = point.path.at(1)\n\n  if (!block || !blockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const pointChild = Node.child(block, childIndex)\n\n    return pointChild\n      ? [pointChild, [...blockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFirstBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const firstPoint = Editor.start(editor, [])\n  const firstBlockPath = firstPoint.path.at(0)\n\n  try {\n    return firstBlockPath !== undefined\n      ? (Editor.node(editor, [firstBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getLastBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const lastPoint = Editor.end(editor, [])\n  const lastBlockPath = lastPoint.path.at(0)\n\n  try {\n    return lastBlockPath !== undefined\n      ? (Editor.node(editor, [lastBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getNodeBlock({\n  editor,\n  schema,\n  node,\n}: {\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n  node: Node\n}) {\n  if (Editor.isEditor(node)) {\n    return undefined\n  }\n\n  if (isBlockElement({editor, schema}, node)) {\n    return elementToBlock({schema, element: node})\n  }\n\n  const parent = Array.from(\n    Editor.nodes(editor, {\n      mode: 'highest',\n      at: [],\n      match: (n) =>\n        isBlockElement({editor, schema}, n) &&\n        n.children.some((child) => child._key === node._key),\n    }),\n  )\n    .at(0)\n    ?.at(0)\n\n  return Element.isElement(parent)\n    ? elementToBlock({\n        schema,\n        element: parent,\n      })\n    : undefined\n}\n\nfunction elementToBlock({\n  schema,\n  element,\n}: {\n  schema: EditorSchema\n  element: Element\n}) {\n  return fromSlateValue([element], schema.block.name)?.at(0)\n}\n\nfunction isBlockElement(\n  {editor, schema}: {editor: PortableTextSlateEditor; schema: EditorSchema},\n  node: Node,\n): node is Element {\n  return (\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    (schema.block.name === node._type ||\n      schema.blockObjects.some(\n        (blockObject) => blockObject.name === node._type,\n      ))\n  )\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n\nexport function slateRangeToSelection({\n  schema,\n  editor,\n  range,\n}: {\n  schema: EditorSchema\n  editor: PortableTextSlateEditor\n  range: Range\n}): EditorSelection {\n  const [anchorBlock] = getPointBlock({\n    editor,\n    point: range.anchor,\n  })\n  const [focusBlock] = getPointBlock({\n    editor,\n    point: range.focus,\n  })\n\n  if (!anchorBlock || !focusBlock) {\n    return null\n  }\n\n  const [anchorChild] =\n    anchorBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.anchor,\n        })\n      : [undefined, undefined]\n  const [focusChild] =\n    focusBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.focus,\n        })\n      : [undefined, undefined]\n\n  const selection: EditorSelection = {\n    anchor: {\n      path: [{_key: anchorBlock._key}],\n      offset: range.anchor.offset,\n    },\n    focus: {\n      path: [{_key: focusBlock._key}],\n      offset: range.focus.offset,\n    },\n    backward: Range.isBackward(range),\n  }\n\n  if (anchorChild) {\n    selection.anchor.path.push('children')\n    selection.anchor.path.push({_key: anchorChild._key})\n  }\n\n  if (focusChild) {\n    selection.focus.path.push('children')\n    selection.focus.path.push({_key: focusChild._key})\n  }\n\n  return selection\n}\n","import {Editor, type BaseRange, type Node} from 'slate'\nimport {DOMEditor, isDOMNode} from 'slate-dom'\nimport type {EditorSchema, EditorSelection} from '..'\nimport type {EditorActor} from '../editor/editor-machine'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport * as utils from '../utils'\nimport {\n  getFirstBlock,\n  getLastBlock,\n  getNodeBlock,\n  slateRangeToSelection,\n} from './slate-utils'\n\nexport type EventPosition = {\n  block: 'start' | 'end'\n  /**\n   * Did the event origin from the editor DOM node itself or from a child node?\n   */\n  isEditor: boolean\n  selection: NonNullable<EditorSelection>\n}\nexport type EventPositionBlock = EventPosition['block']\n\nexport function getEventPosition({\n  editorActor,\n  slateEditor,\n  event,\n}: {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPosition | undefined {\n  if (editorActor.getSnapshot().matches({setup: 'setting up'})) {\n    return undefined\n  }\n\n  const node = getEventNode({slateEditor, event})\n\n  if (!node) {\n    return undefined\n  }\n\n  const block = getNodeBlock({\n    editor: slateEditor,\n    schema: editorActor.getSnapshot().context.schema,\n    node,\n  })\n\n  const positionBlock = getEventPositionBlock({node, slateEditor, event})\n  const selection = getEventSelection({\n    schema: editorActor.getSnapshot().context.schema,\n    slateEditor,\n    event,\n  })\n\n  if (block && positionBlock && !selection && !Editor.isEditor(node)) {\n    return {\n      block: positionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: block,\n            path: [{_key: block._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: block,\n            path: [{_key: block._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  if (!positionBlock || !selection) {\n    return undefined\n  }\n\n  const focusBlockPath = selection.focus.path.at(0)\n  const focusBlockKey = utils.isKeyedSegment(focusBlockPath)\n    ? focusBlockPath._key\n    : undefined\n\n  if (!focusBlockKey) {\n    return undefined\n  }\n\n  if (\n    utils.isSelectionCollapsed(selection) &&\n    block &&\n    focusBlockKey !== block._key\n  ) {\n    return {\n      block: positionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: block,\n            path: [{_key: block._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: block,\n            path: [{_key: block._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  return {\n    block: positionBlock,\n    isEditor: Editor.isEditor(node),\n    selection,\n  }\n}\n\nexport function getEventNode({\n  slateEditor,\n  event,\n}: {\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}) {\n  if (!DOMEditor.hasTarget(slateEditor, event.target)) {\n    return undefined\n  }\n\n  const node = DOMEditor.toSlateNode(slateEditor, event.target)\n\n  return node\n}\n\nfunction getEventPositionBlock({\n  node,\n  slateEditor,\n  event,\n}: {\n  node: Node\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPositionBlock | undefined {\n  const [firstBlock] = getFirstBlock({editor: slateEditor})\n\n  if (!firstBlock) {\n    return undefined\n  }\n\n  const firstBlockElement = DOMEditor.toDOMNode(slateEditor, firstBlock)\n  const firstBlockRect = firstBlockElement.getBoundingClientRect()\n\n  if (event.pageY < firstBlockRect.top) {\n    return 'start'\n  }\n\n  const [lastBlock] = getLastBlock({editor: slateEditor})\n\n  if (!lastBlock) {\n    return undefined\n  }\n\n  const lastBlockElement = DOMEditor.toDOMNode(slateEditor, lastBlock)\n  const lastBlockRef = lastBlockElement.getBoundingClientRect()\n\n  if (event.pageY > lastBlockRef.bottom) {\n    return 'end'\n  }\n\n  const element = DOMEditor.toDOMNode(slateEditor, node)\n  const elementRect = element.getBoundingClientRect()\n  const top = elementRect.top\n  const height = elementRect.height\n  const location = Math.abs(top - event.pageY)\n\n  return location < height / 2 ? 'start' : 'end'\n}\n\nexport function getEventSelection({\n  schema,\n  slateEditor,\n  event,\n}: {\n  schema: EditorSchema\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EditorSelection {\n  const range = getSlateRangeFromEvent(slateEditor, event)\n\n  const selection = range\n    ? slateRangeToSelection({\n        schema,\n        editor: slateEditor,\n        range,\n      })\n    : null\n\n  return selection\n}\n\nfunction getSlateRangeFromEvent(\n  editor: PortableTextSlateEditor,\n  event: DragEvent | MouseEvent,\n) {\n  if (!event.target) {\n    return undefined\n  }\n\n  if (!isDOMNode(event.target)) {\n    return undefined\n  }\n\n  const window = DOMEditor.getWindow(editor)\n\n  let domRange: Range | undefined\n\n  if (window.document.caretPositionFromPoint !== undefined) {\n    const position = window.document.caretPositionFromPoint(\n      event.clientX,\n      event.clientY,\n    )\n\n    if (position) {\n      try {\n        domRange = window.document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      } catch {}\n    }\n  } else if (window.document.caretRangeFromPoint !== undefined) {\n    // Use WebKit-proprietary fallback method\n    domRange =\n      window.document.caretRangeFromPoint(event.clientX, event.clientY) ??\n      undefined\n  } else {\n    console.warn(\n      'Neither caretPositionFromPoint nor caretRangeFromPoint is supported',\n    )\n    return undefined\n  }\n\n  if (!domRange) {\n    return undefined\n  }\n\n  let range: BaseRange | undefined\n\n  try {\n    range = DOMEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      // It can still throw even with this option set to true\n      suppressThrow: false,\n    })\n  } catch {}\n\n  return range\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Element, type Descendant, type Path as SlatePath} from 'slate'\n\nexport function toSlatePath(path: Path, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(path[0]) && (n as Descendant)._key === path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n\n  const childPath = [path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n\n  return [blockPath[0], 0]\n}\n","import {Point, type Editor, type Operation, type Range} from 'slate'\nimport type {EditorSelection} from '../types/editor'\nimport {toSlatePath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import {Editor} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSnapshot} from '..'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {toSlateRange} from './ranges'\n\nexport type SelectionDomNodes = {\n  blockNodes: Array<Node>\n  childNodes: Array<Node>\n}\n\nexport function getSelectionDomNodes({\n  slateEditor,\n  snapshot,\n}: {\n  slateEditor: PortableTextSlateEditor\n  snapshot: EditorSnapshot\n}): SelectionDomNodes {\n  if (!snapshot.context.selection) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const range = toSlateRange(snapshot.context.selection, slateEditor)\n\n  if (!range) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const blockEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'highest',\n      match: (n) => !Editor.isEditor(n),\n    }),\n  )\n\n  const childEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'lowest',\n      match: (n) =>\n        (!Editor.isEditor(n) && slateEditor.isTextSpan(n)) ||\n        !slateEditor.isBlock(n),\n    }),\n  )\n\n  return {\n    blockNodes: blockEntries.map(([blockNode]) =>\n      DOMEditor.toDOMNode(slateEditor, blockNode),\n    ),\n    childNodes: childEntries.map(([childNode]) =>\n      DOMEditor.toDOMNode(slateEditor, childNode),\n    ),\n  }\n}\n","import type {Editor, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","export function DropIndicator() {\n  return (\n    <div\n      contentEditable={false}\n      className=\"pt-drop-indicator\"\n      style={{\n        position: 'absolute',\n        width: '100%',\n        height: 1,\n        borderBottom: '1px solid currentColor',\n        zIndex: 5,\n      }}\n    >\n      <span />\n    </div>\n  )\n}\n","import type {PortableTextChild, PortableTextObject} from '@sanity/types'\n\nexport function RenderDefaultBlockObject(props: {\n  blockObject: PortableTextObject\n}) {\n  return (\n    <div style={{userSelect: 'none'}}>\n      [{props.blockObject._type}: {props.blockObject._key}]\n    </div>\n  )\n}\n\nexport function RenderDefaultInlineObject(props: {\n  inlineObject: PortableTextObject | PortableTextChild\n}) {\n  return (\n    <span style={{userSelect: 'none'}}>\n      [{props.inlineObject._type}: {props.inlineObject._key}]\n    </span>\n  )\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import {defaultKeyGenerator} from '../editor/key-generator'\n\nexport type EditorPriority = {\n  id: string\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}\n\nexport function createEditorPriority(config?: {\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}): EditorPriority {\n  return {\n    id: defaultKeyGenerator(),\n    name: config?.name,\n    reference: config?.reference,\n  }\n}\n","import {createEditorPriority} from './priority.types'\n\nexport const corePriority = createEditorPriority({name: 'core'})\n","import type {EventPositionBlock} from '../internal-utils/event-position'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport * as selectors from '../selectors'\nimport {forward} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport function createCoreBlockElementBehaviorsConfig({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  return [\n    {\n      behavior: defineBehavior({\n        on: 'drag.dragover',\n        guard: ({snapshot, event}) => {\n          const dropFocusBlock = selectors.getFocusBlock({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: event.position.selection,\n            },\n          })\n\n          if (!dropFocusBlock || dropFocusBlock.node._key !== key) {\n            return false\n          }\n\n          const dragOrigin = snapshot.beta.internalDrag?.origin\n\n          if (!dragOrigin) {\n            return false\n          }\n\n          const draggedBlocks = selectors.getSelectedBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n\n          if (\n            draggedBlocks.some((draggedBlock) => draggedBlock.node._key === key)\n          ) {\n            return false\n          }\n\n          const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n\n          return draggingEntireBlocks\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(event.position.block)\n              },\n            },\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n    {\n      behavior: defineBehavior({\n        on: 'drag.*',\n        guard: ({event}) => {\n          return event.type !== 'drag.dragover'\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(undefined)\n              },\n            },\n            forward(event),\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n  ]\n}\n","import {useContext, useEffect} from 'react'\nimport {createCoreBlockElementBehaviorsConfig} from '../../behaviors/behavior.core.block-element'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport {EditorActorContext} from '../editor-actor-context'\n\nexport function useCoreBlockElementBehaviors({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  const editorActor = useContext(EditorActorContext)\n\n  useEffect(() => {\n    const behaviorConfigs = createCoreBlockElementBehaviorsConfig({\n      key,\n      onSetDragPositionBlock,\n    })\n\n    for (const behaviorConfig of behaviorConfigs) {\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig,\n      })\n    }\n\n    return () => {\n      for (const behaviorConfig of behaviorConfigs) {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig,\n        })\n      }\n    }\n  }, [editorActor, key, onSetDragPositionBlock])\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {useContext, useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {useSelected, useSlateStatic, type RenderElementProps} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {RenderBlockFunction} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {DropIndicator} from './drop-indicator'\nimport {RenderDefaultBlockObject} from './render-default-object'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderBlockObject(props: {\n  attributes: RenderElementProps['attributes']\n  blockObject: PortableTextObject\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockObjectRef = useRef<HTMLDivElement>(null)\n\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n\n  const editorActor = useContext(EditorActorContext)\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const legacySchemaType = useSelector(editorActor, (s) =>\n    s.context\n      .getLegacySchema()\n      .blockObjects.find(\n        (blockObject) => blockObject.name === props.element._type,\n      ),\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Block object type ${props.element._type} not found in Schema`,\n    )\n  }\n\n  const focused =\n    selected &&\n    slateEditor.selection !== null &&\n    Range.isCollapsed(slateEditor.selection)\n\n  return (\n    <div\n      {...props.attributes}\n      className=\"pt-block pt-object-block\"\n      data-block-key={props.element._key}\n      data-block-name={props.element._type}\n      data-block-type=\"object\"\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      {props.children}\n      <div\n        ref={blockObjectRef}\n        contentEditable={false}\n        draggable={!props.readOnly}\n      >\n        {props.renderBlock && legacySchemaType ? (\n          props.renderBlock({\n            children: (\n              <RenderDefaultBlockObject blockObject={props.blockObject} />\n            ),\n            editorElementRef: blockObjectRef,\n            focused,\n            path: [{_key: props.element._key}],\n            schemaType: legacySchemaType,\n            selected,\n            type: legacySchemaType,\n            value: props.blockObject,\n          })\n        ) : (\n          <RenderDefaultBlockObject blockObject={props.blockObject} />\n        )}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {useContext, useRef, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport {useSelected, useSlateStatic, type RenderElementProps} from 'slate-react'\nimport {getPointBlock} from '../../internal-utils/slate-utils'\nimport type {RenderChildFunction} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderDefaultInlineObject} from './render-default-object'\n\nexport function RenderInlineObject(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  inlineObject: PortableTextObject\n  readOnly: boolean\n  renderChild?: RenderChildFunction\n}) {\n  const inlineObjectRef = useRef<HTMLElement>(null)\n\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n\n  const editorActor = useContext(EditorActorContext)\n  const legacySchemaType = useSelector(editorActor, (s) =>\n    s.context\n      .getLegacySchema()\n      .inlineObjects.find(\n        (inlineObject) => inlineObject.name === props.element._type,\n      ),\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Inline object type ${props.element._type} not found in Schema`,\n    )\n  }\n\n  const focused =\n    selected &&\n    slateEditor.selection !== null &&\n    Range.isCollapsed(slateEditor.selection)\n  const path = DOMEditor.findPath(slateEditor, props.element)\n  const [block] = getPointBlock({\n    editor: slateEditor,\n    point: {\n      path,\n      offset: 0,\n    },\n  })\n\n  if (!block) {\n    console.error(\n      `Unable to find parent block of inline object ${props.element._key}`,\n    )\n  }\n\n  return (\n    <span\n      {...props.attributes}\n      draggable={!props.readOnly}\n      className=\"pt-inline-object\"\n      data-child-key={props.inlineObject._key}\n      data-child-name={props.inlineObject._type}\n      data-child-type=\"object\"\n    >\n      {props.children}\n      <span ref={inlineObjectRef} style={{display: 'inline-block'}}>\n        {props.renderChild && block && legacySchemaType ? (\n          props.renderChild({\n            annotations: [],\n            children: (\n              <RenderDefaultInlineObject inlineObject={props.inlineObject} />\n            ),\n            editorElementRef: inlineObjectRef,\n            selected,\n            focused,\n            path: [{_key: block._key}, 'children', {_key: props.element._key}],\n            schemaType: legacySchemaType,\n            value: props.inlineObject,\n            type: legacySchemaType,\n          })\n        ) : (\n          <RenderDefaultInlineObject inlineObject={props.inlineObject} />\n        )}\n      </span>\n    </span>\n  )\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {useContext, useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {useSelected, useSlateStatic, type RenderElementProps} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {\n  RenderBlockFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {DropIndicator} from './drop-indicator'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderTextBlock(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n  textBlock: PortableTextTextBlock\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockRef = useRef<HTMLDivElement>(null)\n\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n\n  const editorActor = useContext(EditorActorContext)\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n\n  const focused =\n    selected &&\n    slateEditor.selection !== null &&\n    Range.isCollapsed(slateEditor.selection)\n\n  let children = props.children\n\n  const legacyBlockSchemaType = legacySchema.block\n\n  if (props.renderStyle && props.textBlock.style) {\n    const legacyStyleSchemaType =\n      props.textBlock.style !== undefined\n        ? legacySchema.styles.find(\n            (style) => style.value === props.textBlock.style,\n          )\n        : undefined\n\n    if (legacyStyleSchemaType) {\n      children = props.renderStyle({\n        block: props.textBlock,\n        children,\n        editorElementRef: blockRef,\n        focused,\n        path: [{_key: props.textBlock._key}],\n        schemaType: legacyStyleSchemaType,\n        selected,\n        value: props.textBlock.style,\n      })\n    } else {\n      console.error(\n        `Unable to find Schema type for text block style ${props.textBlock.style}`,\n      )\n    }\n  }\n\n  if (props.renderListItem && props.textBlock.listItem) {\n    const legacyListItemSchemaType = legacySchema.lists.find(\n      (list) => list.value === props.textBlock.listItem,\n    )\n\n    if (legacyListItemSchemaType) {\n      children = props.renderListItem({\n        block: props.textBlock,\n        children,\n        editorElementRef: blockRef,\n        focused,\n        level: props.textBlock.level ?? 1,\n        path: [{_key: props.textBlock._key}],\n        selected,\n        value: props.textBlock.listItem,\n        schemaType: legacyListItemSchemaType,\n      })\n    } else {\n      console.error(\n        `Unable to find Schema type for text block list item ${props.textBlock.listItem}`,\n      )\n    }\n  }\n\n  return (\n    <div\n      {...props.attributes}\n      className={[\n        'pt-block',\n        'pt-text-block',\n        ...(props.textBlock.style\n          ? [`pt-text-block-style-${props.textBlock.style}`]\n          : []),\n        ...(props.textBlock.listItem\n          ? [\n              'pt-list-item',\n              `pt-list-item-${props.textBlock.listItem}`,\n              `pt-list-item-level-${props.textBlock.level ?? 1}`,\n            ]\n          : []),\n      ].join(' ')}\n      spellCheck={props.spellCheck}\n      data-block-key={props.textBlock._key}\n      data-block-name={props.textBlock._type}\n      data-block-type=\"text\"\n      {...(props.textBlock.listItem !== undefined\n        ? {\n            'data-list-item': props.textBlock.listItem,\n          }\n        : {})}\n      {...(props.textBlock.level !== undefined\n        ? {\n            'data-level': props.textBlock.level,\n          }\n        : {})}\n      {...(props.textBlock.style !== undefined\n        ? {\n            'data-style': props.textBlock.style,\n          }\n        : {})}\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      <div ref={blockRef}>\n        {props.renderBlock\n          ? props.renderBlock({\n              children,\n              editorElementRef: blockRef,\n              focused,\n              level: props.textBlock.level,\n              listItem: props.textBlock.listItem,\n              path: [{_key: props.textBlock._key}],\n              selected,\n              schemaType: legacyBlockSchemaType,\n              style: props.textBlock.style,\n              type: legacyBlockSchemaType,\n              value: props.textBlock,\n            })\n          : props.children}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport {useContext, type ReactElement} from 'react'\nimport type {Element as SlateElement} from 'slate'\nimport type {RenderElementProps} from 'slate-react'\nimport {\n  parseBlockObject,\n  parseInlineObject,\n  parseTextBlock,\n} from '../../internal-utils/parse-blocks'\nimport type {\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderBlockObject} from './render-block-object'\nimport {RenderInlineObject} from './render-inline-object'\nimport {RenderTextBlock} from './render-text-block'\n\nexport function RenderElement(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n  const isInline =\n    '__inline' in props.element && props.element.__inline === true\n\n  if (isInline) {\n    const inlineObject = parseInlineObject({\n      context: {\n        keyGenerator: () => '',\n        schema,\n      },\n      options: {refreshKeys: false, validateFields: false},\n      inlineObject: {\n        _key: props.element._key,\n        _type: props.element._type,\n        ...('value' in props.element && typeof props.element.value === 'object'\n          ? props.element.value\n          : {}),\n      },\n    })\n\n    if (!inlineObject) {\n      console.error(\n        `Unable to find Inline Object \"${props.element._type}\" in Schema`,\n      )\n    }\n\n    return (\n      <RenderInlineObject\n        attributes={props.attributes}\n        element={props.element}\n        inlineObject={\n          inlineObject ?? {\n            _key: props.element._key,\n            _type: props.element._type,\n          }\n        }\n        readOnly={props.readOnly}\n        renderChild={props.renderChild}\n      >\n        {props.children}\n      </RenderInlineObject>\n    )\n  }\n\n  const textBlock = parseTextBlock({\n    context: {\n      keyGenerator: () => '',\n      schema,\n    },\n    options: {refreshKeys: false, validateFields: false},\n    block: props.element,\n  })\n\n  if (textBlock) {\n    return (\n      <RenderTextBlock\n        attributes={props.attributes}\n        element={props.element}\n        readOnly={props.readOnly}\n        renderBlock={props.renderBlock}\n        renderListItem={props.renderListItem}\n        renderStyle={props.renderStyle}\n        spellCheck={props.spellCheck}\n        textBlock={textBlock}\n      >\n        {props.children}\n      </RenderTextBlock>\n    )\n  }\n\n  const blockObject = parseBlockObject({\n    context: {\n      keyGenerator: () => '',\n      schema,\n    },\n    options: {refreshKeys: false, validateFields: false},\n    blockObject: {\n      _key: props.element._key,\n      _type: props.element._type,\n      ...('value' in props.element && typeof props.element.value === 'object'\n        ? props.element.value\n        : {}),\n    },\n  })\n\n  if (!blockObject) {\n    console.error(\n      `Unable to find Block Object \"${props.element._type}\" in Schema`,\n    )\n  }\n\n  return (\n    <RenderBlockObject\n      attributes={props.attributes}\n      blockObject={\n        blockObject ?? {\n          _key: props.element._key,\n          _type: props.element._type,\n        }\n      }\n      element={props.element}\n      readOnly={props.readOnly}\n      renderBlock={props.renderBlock}\n    >\n      {props.children}\n    </RenderBlockObject>\n  )\n}\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","/**\n * Copy/pasted from https://github.com/statelyai/xstate/blob/main/packages/xstate-react/src/stopRootWithRehydration.ts\n * and renamed to `stopActor`\n */\n\nimport type {AnyActorRef, Snapshot} from 'xstate'\n\nconst forEachActor = (\n  actorRef: AnyActorRef,\n  callback: (ref: AnyActorRef) => void,\n) => {\n  callback(actorRef)\n  const children = actorRef.getSnapshot().children\n  if (children) {\n    Object.values(children).forEach((child) => {\n      forEachActor(child as AnyActorRef, callback)\n    })\n  }\n}\n\nexport function stopActor(actorRef: AnyActorRef) {\n  // persist snapshot here in a custom way allows us to persist inline actors and to preserve actor references\n  // we do it to avoid setState in useEffect when the effect gets \"reconnected\"\n  // this currently only happens in Strict Effects but it simulates the Offscreen aka Activity API\n  // it also just allows us to end up with a somewhat more predictable behavior for the users\n  const persistedSnapshots: Array<[AnyActorRef, Snapshot<unknown>]> = []\n  forEachActor(actorRef, (ref) => {\n    persistedSnapshots.push([ref, ref.getSnapshot()])\n    // muting observers allow us to avoid `useSelector` from being notified about the stopped snapshot\n    // React reconnects its subscribers (from the useSyncExternalStore) on its own\n    // and userland subscibers should basically always do the same anyway\n    // as each subscription should have its own cleanup logic and that should be called each such reconnect\n    ;(ref as any).observers = new Set()\n  })\n  const systemSnapshot = actorRef.system.getSnapshot?.()\n\n  actorRef.stop()\n  ;(actorRef.system as any)._snapshot = systemSnapshot\n  persistedSnapshots.forEach(([ref, snapshot]) => {\n    ;(ref as any)._processingStatus = 0\n    ;(ref as any)._snapshot = snapshot\n  })\n}\n","import {defineConverter} from './converter.types'\n\nexport const converterJson = defineConverter({\n  mimeType: 'application/json',\n  serialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/json',\n        originEvent: event.originEvent,\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const serializationEvent = portableTextConverter.serialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...serializationEvent,\n      mimeType: 'application/json',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/json',\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const deserializationEvent = portableTextConverter.deserialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...deserializationEvent,\n      mimeType: 'application/json',\n    }\n  },\n})\n","import {parseBlock} from '../internal-utils/parse-blocks'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterPortableText = defineConverter({\n  mimeType: 'application/x-portable-text',\n  serialize: ({snapshot, event}) => {\n    const selection =\n      snapshot.beta.internalDrag?.origin.selection ?? snapshot.context.selection\n\n    if (!selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      context: {\n        selection,\n        schema: snapshot.context.schema,\n      },\n      blocks: snapshot.context.value,\n    })\n\n    if (blocks.length === 0) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks serialized',\n        originEvent: event.originEvent,\n      }\n    }\n\n    return {\n      type: 'serialization.success',\n      data: JSON.stringify(blocks),\n      mimeType: 'application/x-portable-text',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const blocks = JSON.parse(event.data)\n\n    if (!Array.isArray(blocks)) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'Data is not an array',\n      }\n    }\n\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = parseBlock({\n        context: snapshot.context,\n        block,\n        options: {\n          /**\n           * If we are dragging internally then we would like to keep the\n           * dropped portable text as is.\n           */\n          refreshKeys: !snapshot.beta.hasTag?.('dragging internally'),\n          validateFields: false,\n        },\n      })\n      return parsedBlock ? [parsedBlock] : []\n    })\n\n    if (parsedBlocks.length === 0 && blocks.length > 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks were parsed',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: parsedBlocks,\n      mimeType: 'application/x-portable-text',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {toHTML} from '@portabletext/to-html'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextHtml(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/html',\n    serialize: ({snapshot, event}) => {\n      const selection =\n        snapshot.beta.internalDrag?.origin.selection ??\n        snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = sliceBlocks({\n        context: {\n          selection,\n          schema: snapshot.context.schema,\n        },\n        blocks: snapshot.context.value,\n      })\n\n      const html = toHTML(blocks, {\n        onMissingComponent: false,\n        components: {\n          unknownType: ({children}) =>\n            children !== undefined ? `${children}` : '',\n        },\n      })\n\n      if (html === '') {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'Serialized HTML is empty',\n        }\n      }\n\n      return {\n        type: 'serialization.success',\n        data: html,\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const blocks = htmlToBlocks(event.data, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n        unstable_whitespaceOnPasteMode:\n          legacySchema.block.options.unstable_whitespaceOnPasteMode,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: false,\n            validateFields: true,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/html',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/html',\n      }\n    },\n  })\n}\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextPlain(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/plain',\n    serialize: ({snapshot, event}) => {\n      const selection =\n        snapshot.beta.internalDrag?.origin.selection ??\n        snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/plain',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = sliceBlocks({\n        context: {\n          selection,\n          schema: snapshot.context.schema,\n        },\n        blocks: snapshot.context.value,\n      })\n\n      const data = blocks\n        .map((block) => {\n          if (isTextBlock(snapshot.context, block)) {\n            return block.children\n              .map((child) => {\n                if (child._type === snapshot.context.schema.span.name) {\n                  return child.text\n                }\n\n                return snapshot.beta.hasTag('dragging internally')\n                  ? `[${\n                      snapshot.context.schema.inlineObjects.find(\n                        (inlineObjectType) =>\n                          inlineObjectType.name === child._type,\n                      )?.title ?? 'Object'\n                    }]`\n                  : ''\n              })\n              .join('')\n          }\n\n          return snapshot.beta.hasTag('dragging internally')\n            ? `[${\n                snapshot.context.schema.blockObjects.find(\n                  (blockObjectType) => blockObjectType.name === block._type,\n                )?.title ?? 'Object'\n              }]`\n            : ''\n        })\n        .filter((block) => block !== '')\n        .join('\\n\\n')\n\n      return {\n        type: 'serialization.success',\n        data,\n        mimeType: 'text/plain',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const html = escapeHtml(event.data)\n        .split(/\\n{2,}/)\n        .map((line) =>\n          line\n            ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n            : '<p></p>',\n        )\n        .join('')\n\n      const textToHtml = `<html><body>${html}</body></html>`\n\n      const blocks = htmlToBlocks(textToHtml, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: false,\n            validateFields: true,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/plain',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/plain',\n      }\n    },\n  })\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\n\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n","import type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {converterJson} from './converter.json'\nimport {converterPortableText} from './converter.portable-text'\nimport {createConverterTextHtml} from './converter.text-html'\nimport {createConverterTextPlain} from './converter.text-plain'\n\nexport function createCoreConverters(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return [\n    converterJson,\n    converterPortableText,\n    createConverterTextHtml(legacySchema),\n    createConverterTextPlain(legacySchema),\n  ]\n}\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import type {EditorContext} from '../editor/editor-snapshot'\n\nexport function createPlaceholderBlock(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n) {\n  return {\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    style: context.schema.styles[0].name ?? 'normal',\n    markDefs: [],\n    children: [\n      {\n        _type: context.schema.span.name,\n        _key: context.keyGenerator(),\n        text: '',\n        marks: [],\n      },\n    ],\n  }\n}\n","import type {MarkState} from '../internal-utils/mark-state'\nimport type {EditorSchema} from './editor-schema'\n\nexport function getActiveAnnotations({\n  markState,\n  schema,\n}: {\n  markState: MarkState | undefined\n  schema: EditorSchema\n}) {\n  return (markState?.marks ?? []).filter(\n    (mark) =>\n      !schema.decorators.map((decorator) => decorator.name).includes(mark),\n  )\n}\n","import type {MarkState} from '../internal-utils/mark-state'\nimport type {EditorSchema} from './editor-schema'\n\nexport function getActiveDecorators({\n  decoratorState,\n  markState,\n  schema,\n}: {\n  decoratorState: Record<string, boolean | undefined>\n  markState: MarkState | undefined\n  schema: EditorSchema\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.name)\n\n  const markStateDecorators = (markState?.marks ?? []).filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  let activeDecorators: Array<string> = markStateDecorators\n\n  for (const decorator in decoratorState) {\n    if (decoratorState[decorator] === false) {\n      activeDecorators = activeDecorators.filter(\n        (activeDecorator) => activeDecorator !== decorator,\n      )\n    } else if (decoratorState[decorator] === true) {\n      if (!activeDecorators.includes(decorator)) {\n        activeDecorators.push(decorator)\n      }\n    }\n  }\n\n  return activeDecorators\n}\n","import {Transforms} from 'slate'\nimport {getActiveAnnotations} from '../editor/get-active-annotations'\nimport {getActiveDecorators} from '../editor/get-active-decorators'\nimport {getFocusSpan} from '../internal-utils/slate-utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertTextOperationImplementation: BehaviorOperationImplementation<\n  'insert.text'\n> = ({context, operation}) => {\n  const activeDecorators = getActiveDecorators({\n    decoratorState: operation.editor.decoratorState,\n    markState: operation.editor.markState,\n    schema: context.schema,\n  })\n  const activeAnnotations = getActiveAnnotations({\n    markState: operation.editor.markState,\n    schema: context.schema,\n  })\n\n  const [focusSpan] = getFocusSpan({\n    editor: operation.editor,\n  })\n\n  if (!focusSpan) {\n    Transforms.insertText(operation.editor, operation.text)\n    return\n  }\n\n  if (\n    operation.editor.markState &&\n    operation.editor.markState.state === 'unchanged'\n  ) {\n    const markStateDecorators = (operation.editor.markState.marks ?? []).filter(\n      (mark) =>\n        context.schema.decorators\n          .map((decorator) => decorator.name)\n          .includes(mark),\n    )\n\n    if (\n      markStateDecorators.length === activeDecorators.length &&\n      markStateDecorators.every((mark) => activeDecorators.includes(mark))\n    ) {\n      Transforms.insertText(operation.editor, operation.text)\n      return\n    }\n  }\n\n  Transforms.insertNodes(operation.editor, {\n    _type: focusSpan._type,\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [...activeDecorators, ...activeAnnotations],\n  })\n\n  operation.editor.decoratorState = {}\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a, _b;\n  const {\n      children\n    } = block,\n    markDefs = (_a = block.markDefs) != null ? _a : [];\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_b = nodeStack[pos]) == null ? void 0 : _b.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs == null ? void 0 : markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","import {useSelector} from '@xstate/react'\nimport type {Editor} from '../editor'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {InternalEditor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {getActiveAnnotations} from './get-active-annotations'\nimport {getActiveDecorators} from './get-active-decorators'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n * Hook to select a value from the editor state.\n * @example\n * Pass a selector as the second argument\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const value = useEditorSelector(editor, selector)\n * }\n * ```\n * @example\n * Pass an inline selector as the second argument.\n * In this case, use the editor context to obtain the schema.\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const schema = useEditorSelector(editor, (snapshot) => snapshot.context.schema)\n * }\n * ```\n * @group Hooks\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    (editor as InternalEditor)._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: (editor as InternalEditor)._internal.slateEditor\n          .instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  return {\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      readOnly: editorActorSnapshot.matches({'edit mode': 'read only'}),\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: slateEditorInstance.value,\n    },\n    beta: {\n      activeAnnotations: getActiveAnnotations({\n        markState: slateEditorInstance.markState,\n        schema: editorActorSnapshot.context.schema,\n      }),\n      activeDecorators: getActiveDecorators({\n        decoratorState: slateEditorInstance.decoratorState,\n        markState: slateEditorInstance.markState,\n        schema: editorActorSnapshot.context.schema,\n      }),\n      hasTag: (tag) => editorActorSnapshot.hasTag(tag),\n      internalDrag: editorActorSnapshot.context.internalDrag,\n    },\n  }\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../internal-utils/sibling-utils'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = editorActor\n      .getSnapshot()\n      .context.schema.decorators.map((t) => t.name)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = editorActor\n            .getSnapshot()\n            .context.schema.decorators.map((decorator) => decorator.name)\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        if (\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // We only want to clear the decorator state if the caret is visually\n            // moving\n            if (!movedToNextSpan && !movedToPreviousSpan) {\n              editor.decoratorState = {}\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        if (!editor.markState) {\n          apply(op)\n          return\n        }\n\n        if (editor.markState.state === 'unchanged') {\n          apply(op)\n          return\n        }\n\n        Transforms.insertNodes(editor, {\n          _type: 'span',\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          text: op.text,\n          marks: editor.markState.marks,\n        })\n\n        return\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const snapshot = getEditorSnapshot({\n                editorActorSnapshot: editorActor.getSnapshot(),\n                slateEditorInstance: editor,\n              })\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: snapshot.beta.activeDecorators},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type ===\n          editorActor.getSnapshot().context.schema.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const removeDecoratorOperationImplementation: BehaviorOperationImplementation<\n  'decorator.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        editor.decoratorState[mark] = false\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches,\n  xIndex\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_UNDO_STEP: WeakMap<Editor, {undoStepId: string} | undefined> =\n  new WeakMap()\n\nexport function withUndoStep(editor: Editor, fn: () => void) {\n  const current = CURRENT_UNDO_STEP.get(editor)\n\n  if (current) {\n    fn()\n    return\n  }\n\n  CURRENT_UNDO_STEP.set(\n    editor,\n    current ?? {\n      undoStepId: defaultKeyGenerator(),\n    },\n  )\n  fn()\n  CURRENT_UNDO_STEP.set(editor, undefined)\n}\n\nexport function getCurrentUndoStepId(editor: Editor) {\n  return CURRENT_UNDO_STEP.get(editor)?.undoStepId\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getCurrentUndoStepId} from '../with-undo-step'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      editorActor.getSnapshot().context.schema.block.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n    let previousUndoStepId = getCurrentUndoStepId(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n\n    const {apply} = editor\n\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      const currentUndoStepId = getCurrentUndoStepId(editor)\n\n      let merge =\n        currentUndoStepId !== undefined && previousUndoStepId === undefined\n          ? false\n          : currentUndoStepId !== undefined && previousUndoStepId !== undefined\n            ? currentUndoStepId === previousUndoStepId\n            : true\n\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge =\n            currentUndoStepId === undefined && previousUndoStepId === undefined\n              ? shouldMerge(op, lastOp) || overwrite\n              : merge\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n\n      previousUndoStepId = currentUndoStepId\n\n      apply(op)\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\nexport const historyUndoOperationImplementation: BehaviorOperationImplementation<\n  'history.undo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {undos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1]\n    debug('Undoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      const reversedOperations = transformedOperations\n        .map(Operation.inverse)\n        .reverse()\n\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform undo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsUndoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.redos.push(step)\n      editor.history.undos.pop()\n    }\n  }\n}\n\nexport const historyRedoOperationImplementation: BehaviorOperationImplementation<\n  'history.redo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {redos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1]\n    debug('Redoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform redo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsRedoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.undos.push(step)\n      editor.history.redos.pop()\n    }\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {Path} from '@sanity/types'\nimport {Editor, Node, Range, Text, Transforms} from 'slate'\nimport {parseAnnotation} from '../internal-utils/parse-blocks'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, operation}) => {\n  const parsedAnnotation = parseAnnotation({\n    annotation: {\n      _type: operation.annotation.name,\n      ...operation.annotation.value,\n    },\n    context,\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedAnnotation) {\n    throw new Error(\n      `Failed to parse annotation ${JSON.stringify(operation.annotation)}`,\n    )\n  }\n\n  const editor = operation.editor\n\n  if (!editor.selection || Range.isCollapsed(editor.selection)) {\n    return\n  }\n\n  let paths: AddedAnnotationPaths | undefined = undefined\n  let spanPath: Path | undefined\n  let markDefPath: Path | undefined\n  const markDefPaths: Path[] = []\n\n  const selectedBlocks = Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: Range.isBackward(editor.selection),\n  })\n\n  let blockIndex = 0\n\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0) {\n      continue\n    }\n\n    if (block.children.length === 1 && block.children[0].text === '') {\n      continue\n    }\n\n    // Make sure we don't generate more keys than needed\n    const annotationKey =\n      blockIndex === 0 ? parsedAnnotation._key : context.keyGenerator()\n    const markDefs = block.markDefs ?? []\n    const existingMarkDef = markDefs.find(\n      (markDef) =>\n        markDef._type === parsedAnnotation._type &&\n        markDef._key === annotationKey,\n    )\n\n    if (existingMarkDef === undefined) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: [\n            ...markDefs,\n            {\n              ...parsedAnnotation,\n              _key: annotationKey,\n            },\n          ],\n        },\n        {at: blockPath},\n      )\n\n      markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n\n      if (Range.isBackward(editor.selection)) {\n        markDefPaths.unshift(markDefPath)\n      } else {\n        markDefPaths.push(markDefPath)\n      }\n    }\n\n    Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n    const children = Node.children(editor, blockPath)\n\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span)) {\n        continue\n      }\n\n      if (!Range.includes(editor.selection, path)) {\n        continue\n      }\n\n      const marks = span.marks ?? []\n      const existingSameTypeAnnotations = marks.filter((mark) =>\n        markDefs.some(\n          (markDef) =>\n            markDef._key === mark && markDef._type === parsedAnnotation._type,\n        ),\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks: [\n            ...marks.filter(\n              (mark) => !existingSameTypeAnnotations.includes(mark),\n            ),\n            annotationKey,\n          ],\n        },\n        {at: path},\n      )\n\n      spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n    }\n\n    blockIndex++\n  }\n\n  if (markDefPath && spanPath) {\n    paths = {\n      markDefPath,\n      markDefPaths,\n      spanPath,\n    }\n  }\n\n  return paths\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const removeAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === operation.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== operation.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n","import {Editor, Transforms, type Element as SlateElement} from 'slate'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockSetOperationImplementation: BehaviorOperationImplementation<\n  'block.set'\n> = ({context, operation}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: operation.at, offset: 0},\n      focus: {path: operation.at, offset: 0},\n    },\n    operation.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(operation.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(operation.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, ...filteredProps} = operation.props\n\n  const updatedBlock = parseBlock({\n    context,\n    block: {\n      ...parsedBlock,\n      ...filteredProps,\n    },\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!updatedBlock) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const slateBlock = toSlateValue([updatedBlock], {\n    schemaTypes: context.schema,\n  })?.at(0) as SlateElement | undefined\n\n  if (!slateBlock) {\n    throw new Error(`Unable to convert block to Slate value`)\n  }\n\n  Transforms.setNodes(operation.editor, slateBlock, {at: location})\n}\n","import {omit} from 'lodash'\nimport {Editor, Transforms} from 'slate'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockUnsetOperationImplementation: BehaviorOperationImplementation<\n  'block.unset'\n> = ({context, operation}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: operation.at, offset: 0},\n      focus: {path: operation.at, offset: 0},\n    },\n    operation.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(operation.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(operation.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (isTextBlock(context, parsedBlock)) {\n    const propsToRemove = operation.props.filter((prop) => prop !== '_type')\n\n    const updatedTextBlock = parseBlock({\n      context,\n      block: omit(parsedBlock, propsToRemove),\n      options: {refreshKeys: false, validateFields: true},\n    })\n\n    if (!updatedTextBlock) {\n      throw new Error(\n        `Unable to update block at ${JSON.stringify(operation.at)}`,\n      )\n    }\n\n    const propsToSet: Record<string, unknown> = {}\n\n    for (const prop of propsToRemove) {\n      if (!(prop in updatedTextBlock)) {\n        propsToSet[prop] = undefined\n      } else {\n        propsToSet[prop] = (updatedTextBlock as Record<string, unknown>)[prop]\n      }\n    }\n\n    Transforms.setNodes(operation.editor, propsToSet, {at: location})\n\n    return\n  }\n\n  const updatedBlockObject = parseBlock({\n    context,\n    block: omit(\n      parsedBlock,\n      operation.props.filter((prop) => prop !== '_type'),\n    ),\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!updatedBlockObject) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, _key, ...props} = updatedBlockObject\n\n  Transforms.setNodes(\n    operation.editor,\n    {\n      _type,\n      _key,\n      value: props,\n    },\n    {at: location},\n  )\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const decoratorAddOperationImplementation: BehaviorOperationImplementation<\n  'decorator.add'\n> = ({context, operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const value = fromSlateValue(\n    editor.children,\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )\n\n  const manualAnchor = operation.at?.anchor\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.anchor,\n        direction: 'backward',\n      })\n    : undefined\n  const manualFocus = operation.at?.focus\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.focus,\n        direction: 'forward',\n      })\n    : undefined\n  const manualSelection =\n    manualAnchor && manualFocus\n      ? {\n          anchor: manualAnchor,\n          focus: manualFocus,\n        }\n      : undefined\n\n  const selection = manualSelection\n    ? (toSlateRange(manualSelection, operation.editor) ?? editor.selection)\n    : editor.selection\n\n  if (!selection) {\n    return\n  }\n\n  const editorSelection = slateRangeToSelection({\n    schema: context.schema,\n    editor,\n    range: selection,\n  })\n  const anchorOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.anchor,\n      })\n    : undefined\n  const focusOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.focus,\n      })\n    : undefined\n\n  if (!anchorOffset || !focusOffset) {\n    throw new Error('Unable to find anchor or focus offset')\n  }\n\n  if (Range.isExpanded(selection)) {\n    // Split if needed\n    Transforms.setNodes(\n      editor,\n      {},\n      {at: selection, match: Text.isText, split: true, hanging: true},\n    )\n\n    // The value might have changed after splitting\n    const newValue = fromSlateValue(\n      editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(editor),\n    )\n    // We need to find the new selection from the original offsets because the\n    // split operation might have changed the value.\n    const newSelection = utils.blockOffsetsToSelection({\n      context: {\n        ...context,\n        value: newValue,\n      },\n      offsets: {anchor: anchorOffset, focus: focusOffset},\n      backward: editorSelection?.backward,\n    })\n\n    const trimmedSelection = selectors.getTrimmedSelection({\n      beta: {\n        activeAnnotations: [],\n        activeDecorators: [],\n        hasTag: () => false,\n        internalDrag: undefined,\n      },\n      context: {\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        readOnly: false,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue,\n      },\n    })\n\n    if (!trimmedSelection) {\n      throw new Error('Unable to find trimmed selection')\n    }\n\n    const newRange = toSlateRange(trimmedSelection, editor)\n\n    if (!newRange) {\n      throw new Error('Unable to find new selection')\n    }\n\n    // Use new selection to find nodes to decorate\n    const splitTextNodes = Range.isRange(newRange)\n      ? [\n          ...Editor.nodes(editor, {\n            at: newRange,\n            match: (node) => Text.isText(node),\n          }),\n        ]\n      : []\n\n    for (const [node, path] of splitTextNodes) {\n      const marks = [\n        ...(Array.isArray(node.marks) ? node.marks : []).filter(\n          (eMark: string) => eMark !== mark,\n        ),\n        mark,\n      ]\n      Transforms.setNodes(\n        editor,\n        {marks},\n        {at: path, match: Text.isText, split: true, hanging: true},\n      )\n    }\n  } else {\n    const selectedSpan = Array.from(\n      Editor.nodes(editor, {\n        at: selection,\n        match: (node) => editor.isTextSpan(node),\n      }),\n    )?.at(0)\n\n    if (!selectedSpan) {\n      return\n    }\n\n    const [block, blockPath] = Editor.node(editor, selection, {\n      depth: 1,\n    })\n    const lonelyEmptySpan =\n      editor.isTextBlock(block) &&\n      block.children.length === 1 &&\n      editor.isTextSpan(block.children[0]) &&\n      block.children[0].text === ''\n        ? block.children[0]\n        : undefined\n\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? []\n      const existingMarksWithoutDecorator = existingMarks.filter(\n        (existingMark) => existingMark !== mark,\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks:\n            existingMarks.length === existingMarksWithoutDecorator.length\n              ? [...existingMarks, mark]\n              : existingMarksWithoutDecorator,\n        },\n        {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node),\n        },\n      )\n    } else {\n      editor.decoratorState[mark] = true\n    }\n  }\n\n  if (editor.selection) {\n    // Reselect\n    const selection = editor.selection\n    editor.selection = {...selection}\n  }\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {getBlockPath} from '../internal-utils/slate-utils'\nimport {isKeyedSegment} from '../utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const deleteOperationImplementation: BehaviorOperationImplementation<\n  'delete'\n> = ({operation}) => {\n  const anchorBlockPath = isKeyedSegment(operation.at.anchor.path[0])\n    ? getBlockPath({\n        editor: operation.editor,\n        _key: operation.at.anchor.path[0]._key,\n      })\n    : undefined\n  const focusBlockPath = isKeyedSegment(operation.at.focus.path[0])\n    ? getBlockPath({\n        editor: operation.editor,\n        _key: operation.at.focus.path[0]._key,\n      })\n    : undefined\n\n  if (\n    operation.at.anchor.path.length === 1 &&\n    operation.at.focus.path.length === 1 &&\n    anchorBlockPath &&\n    focusBlockPath &&\n    anchorBlockPath[0] === focusBlockPath[0]\n  ) {\n    Transforms.removeNodes(operation.editor, {\n      at: [anchorBlockPath[0]],\n    })\n\n    return\n  }\n\n  const range = toSlateRange(operation.at, operation.editor)\n\n  if (!range) {\n    throw new Error(\n      `Failed to get Slate Range for selection ${JSON.stringify(operation.at)}`,\n    )\n  }\n\n  operation.editor.delete({\n    at: range,\n    reverse: operation.direction === 'backward',\n    unit: operation.unit,\n  })\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {parseInlineObject} from '../internal-utils/parse-blocks'\nimport {toSlateValue} from '../internal-utils/values'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertInlineObjectOperationImplementation: BehaviorOperationImplementation<\n  'insert.inline object'\n> = ({context, operation}) => {\n  const parsedInlineObject = parseInlineObject({\n    context,\n    inlineObject: {\n      _type: operation.inlineObject.name,\n      ...(operation.inlineObject.value ?? {}),\n    },\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedInlineObject) {\n    throw new Error(\n      `Failed to parse inline object ${JSON.stringify(operation.inlineObject)}`,\n    )\n  }\n\n  if (!operation.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(operation.editor, {\n      at: operation.editor.selection.focus.path,\n      match: (node) => operation.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [parsedInlineObject],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(operation.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertSpanOperationImplementation: BehaviorOperationImplementation<\n  'insert.span'\n> = ({context, operation}) => {\n  if (!operation.editor.selection) {\n    console.error('Unable to perform action without selection', operation)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(operation.editor, {\n      at: operation.editor.selection.focus.path,\n      match: (node) => operation.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', operation)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = operation.annotations\n    ? operation.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(operation.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(operation.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(operation.decorators ?? []),\n    ],\n  })\n}\n","import {Editor, Path, Point, Range, Transforms, type Descendant} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {\n  getFocusBlock,\n  getFocusChild,\n  getLastBlock,\n  getSelectionEndBlock,\n  getSelectionStartBlock,\n} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor, toSlateValue} from '../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertBlockOperationImplementation: BehaviorOperationImplementation<\n  'insert.block'\n> = ({context, operation}) => {\n  const parsedBlock = parseBlock({\n    block: operation.block,\n    context,\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Failed to parse block ${JSON.stringify(operation.block)}`)\n  }\n\n  const fragment = toSlateValue([parsedBlock], {schemaTypes: context.schema})[0]\n\n  if (!fragment) {\n    throw new Error(\n      `Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`,\n    )\n  }\n\n  insertBlock({\n    block: fragment,\n    placement: operation.placement,\n    select: operation.select ?? 'start',\n    editor: operation.editor,\n    schema: context.schema,\n  })\n}\n\nexport function insertBlock({\n  block,\n  placement,\n  select,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  select: 'start' | 'end' | 'none'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  const [startBlock, startBlockPath] = getSelectionStartBlock({editor})\n  const [endBlock, endBlockPath] = getSelectionEndBlock({editor})\n\n  if (\n    !editor.selection ||\n    !startBlock ||\n    !startBlockPath ||\n    !endBlock ||\n    !endBlockPath\n  ) {\n    if (select !== 'none') {\n      DOMEditor.focus(editor)\n    }\n\n    const [lastBlock, lastBlockPath] = getLastBlock({editor})\n\n    if (placement === 'before') {\n      Transforms.insertNodes(editor, [block], {at: [0]})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, [0]))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, [0]))\n      }\n    } else if (placement === 'after') {\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      if (lastBlock && isEqualToEmptyEditor([lastBlock], schema)) {\n        // And if the last block was an empty text block, let's remove\n        // that too\n        Transforms.removeNodes(editor, {at: lastBlockPath})\n\n        Transforms.insertNodes(editor, [block], {\n          at: lastBlockPath,\n          select: false,\n        })\n\n        Transforms.deselect(editor)\n\n        if (select === 'start') {\n          Transforms.select(editor, Editor.start(editor, lastBlockPath))\n        } else if (select === 'end') {\n          Transforms.select(editor, Editor.end(editor, lastBlockPath))\n        }\n\n        return\n      }\n\n      if (\n        editor.isTextBlock(block) &&\n        lastBlock &&\n        editor.isTextBlock(lastBlock)\n      ) {\n        const selectionBefore = Editor.end(editor, lastBlockPath)\n\n        Transforms.insertFragment(editor, [block], {\n          at: Editor.end(editor, lastBlockPath),\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionBefore)\n        } else if (select === 'none') {\n          Transforms.deselect(editor)\n        }\n\n        return\n      }\n\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    }\n  } else {\n    if (placement === 'before') {\n      const currentSelection = editor.selection\n      const selectionStartPoint = Range.start(currentSelection)\n\n      Transforms.insertNodes(editor, [block], {\n        at: [selectionStartPoint.path[0]],\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(\n          editor,\n          Editor.start(editor, [selectionStartPoint.path[0]]),\n        )\n      } else if (select === 'end') {\n        Transforms.select(\n          editor,\n          Editor.end(editor, [selectionStartPoint.path[0]]),\n        )\n      }\n    } else if (placement === 'after') {\n      const currentSelection = editor.selection\n      const selectionEndPoint = Range.end(currentSelection)\n\n      const nextPath = [selectionEndPoint.path[0] + 1]\n\n      Transforms.insertNodes(editor, [block], {\n        at: nextPath,\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      const currentSelection = editor.selection\n      const endBlockEndPoint = Editor.start(editor, endBlockPath)\n\n      if (Range.isExpanded(currentSelection) && !editor.isTextBlock(block)) {\n        Transforms.delete(editor, {at: currentSelection})\n\n        const newSelection = editor.selection\n\n        const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n\n        Transforms.insertNodes(editor, [block], {\n          voids: true,\n        })\n\n        const adjustedSelection =\n          newSelection.anchor.offset === 0\n            ? Range.transform(newSelection, {\n                type: 'insert_node',\n                node: block,\n                path: [newSelection.anchor.path[0]],\n              })\n            : newSelection\n\n        if (select === 'none' && adjustedSelection) {\n          Transforms.select(editor, adjustedSelection)\n        }\n\n        if (focusBlock && isEqualToEmptyEditor([focusBlock], schema)) {\n          Transforms.removeNodes(editor, {at: focusBlockPath})\n        }\n\n        return\n      }\n\n      if (editor.isTextBlock(endBlock) && editor.isTextBlock(block)) {\n        const selectionStartPoint = Range.start(currentSelection)\n\n        if (isEqualToEmptyEditor([endBlock], schema)) {\n          const currentSelection = editor.selection\n\n          Transforms.insertNodes(editor, [block], {\n            at: endBlockPath,\n            select: false,\n          })\n          Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n\n          if (select === 'start') {\n            Transforms.select(editor, selectionStartPoint)\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, endBlockPath))\n          } else {\n            Transforms.select(editor, currentSelection)\n          }\n\n          return\n        }\n\n        if (select === 'end') {\n          Transforms.insertFragment(editor, [block], {\n            voids: true,\n          })\n\n          return\n        }\n\n        Transforms.insertFragment(editor, [block], {\n          at: currentSelection,\n          voids: true,\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionStartPoint)\n        } else {\n          if (!Point.equals(selectionStartPoint, endBlockEndPoint)) {\n            Transforms.select(editor, selectionStartPoint)\n          }\n        }\n      } else {\n        if (!editor.isTextBlock(endBlock)) {\n          Transforms.insertNodes(editor, [block], {select: false})\n\n          const nextPath = [endBlockPath[0] + 1]\n\n          if (select === 'start') {\n            Transforms.select(editor, Editor.start(editor, nextPath))\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, nextPath))\n          }\n        } else {\n          const endBlockStartPoint = Editor.start(editor, endBlockPath)\n          const endBlockEndPoint = Editor.end(editor, endBlockPath)\n          const selectionStartPoint = Range.start(currentSelection)\n          const selectionEndPoint = Range.end(currentSelection)\n\n          if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertNodes(editor, [block], {\n              at: endBlockPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            }\n\n            if (isEqualToEmptyEditor([endBlock], schema)) {\n              Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n            }\n          } else if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            const nextPath = [endBlockPath[0] + 1]\n\n            Transforms.insertNodes(editor, [block], {\n              at: nextPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, nextPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(\n                editor,\n                Editor.start(editor, Path.next(endBlockPath)),\n              )\n            } else if (select === 'end') {\n              Transforms.select(\n                editor,\n                Editor.end(editor, Path.next(endBlockPath)),\n              )\n            }\n          } else {\n            const currentSelection = editor.selection\n            const [focusChild] = getFocusChild({editor})\n\n            if (focusChild && editor.isTextSpan(focusChild)) {\n              Transforms.insertFragment(editor, [block], {\n                at: currentSelection,\n              })\n\n              if (select === 'start' || select === 'end') {\n                Transforms.select(editor, [endBlockPath[0] + 1])\n              } else {\n                Transforms.select(editor, currentSelection)\n              }\n            } else {\n              const nextPath = [endBlockPath[0] + 1]\n              Transforms.insertNodes(editor, [block], {\n                at: nextPath,\n                select: false,\n              })\n              Transforms.select(editor, currentSelection)\n\n              if (select === 'start') {\n                Transforms.select(editor, Editor.start(editor, nextPath))\n              } else if (select === 'end') {\n                Transforms.select(editor, Editor.end(editor, nextPath))\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBackwardOperationImplementation: BehaviorOperationImplementation<\n  'move.backward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n    reverse: true,\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlatePath} from '../internal-utils/paths'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBlockOperationImplementation: BehaviorOperationImplementation<\n  'move.block'\n> = ({operation}) => {\n  const at = [toSlatePath(operation.at, operation.editor)[0]]\n  const to = [toSlatePath(operation.to, operation.editor)[0]]\n\n  Transforms.moveNodes(operation.editor, {\n    at,\n    to,\n    mode: 'highest',\n  })\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveForwardOperationImplementation: BehaviorOperationImplementation<\n  'move.forward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const selectOperationImplementation: BehaviorOperationImplementation<\n  'select'\n> = ({operation}) => {\n  const newSelection = toSlateRange(operation.at, operation.editor)\n\n  if (newSelection) {\n    Transforms.select(operation.editor, newSelection)\n  } else {\n    Transforms.deselect(operation.editor)\n  }\n}\n","import type {\n  AbstractBehaviorEventType,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types.event'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {removeDecoratorOperationImplementation} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {\n  historyRedoOperationImplementation,\n  historyUndoOperationImplementation,\n} from '../editor/plugins/createWithUndoRedo'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {addAnnotationOperationImplementation} from './behavior.operation.annotation.add'\nimport {removeAnnotationOperationImplementation} from './behavior.operation.annotation.remove'\nimport {blockSetOperationImplementation} from './behavior.operation.block.set'\nimport {blockUnsetOperationImplementation} from './behavior.operation.block.unset'\nimport {decoratorAddOperationImplementation} from './behavior.operation.decorator.add'\nimport {deleteOperationImplementation} from './behavior.operation.delete'\nimport {insertInlineObjectOperationImplementation} from './behavior.operation.insert-inline-object'\nimport {insertSpanOperationImplementation} from './behavior.operation.insert-span'\nimport {insertBlockOperationImplementation} from './behavior.operation.insert.block'\nimport {insertTextOperationImplementation} from './behavior.operation.insert.text'\nimport {moveBackwardOperationImplementation} from './behavior.operation.move.backward'\nimport {moveBlockOperationImplementation} from './behavior.operation.move.block'\nimport {moveForwardOperationImplementation} from './behavior.operation.move.forward'\nimport {selectOperationImplementation} from './behavior.operation.select'\n\nexport type BehaviorOperationImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorOperationImplementation<\n  TBehaviorOperationType extends BehaviorOperation['type'],\n  TReturnType = void,\n> = ({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: PickFromUnion<BehaviorOperation, 'type', TBehaviorOperationType>\n}) => TReturnType\n\ntype BehaviorOperation = OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> & {\n  editor: PortableTextSlateEditor\n}\n\ntype BehaviorOperationImplementations = {\n  [TBehaviorOperationType in BehaviorOperation['type']]: BehaviorOperationImplementation<TBehaviorOperationType>\n}\n\nconst behaviorOperationImplementations: BehaviorOperationImplementations = {\n  'annotation.add': addAnnotationOperationImplementation,\n  'annotation.remove': removeAnnotationOperationImplementation,\n  'block.set': blockSetOperationImplementation,\n  'block.unset': blockUnsetOperationImplementation,\n  'decorator.add': decoratorAddOperationImplementation,\n  'decorator.remove': removeDecoratorOperationImplementation,\n  'delete': deleteOperationImplementation,\n  'history.redo': historyRedoOperationImplementation,\n  'history.undo': historyUndoOperationImplementation,\n  'insert.block': insertBlockOperationImplementation,\n  'insert.inline object': insertInlineObjectOperationImplementation,\n  'insert.span': insertSpanOperationImplementation,\n  'insert.text': insertTextOperationImplementation,\n  'move.backward': moveBackwardOperationImplementation,\n  'move.block': moveBlockOperationImplementation,\n  'move.forward': moveForwardOperationImplementation,\n  'select': selectOperationImplementation,\n}\n\nexport function performOperation({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: BehaviorOperation\n}) {\n  try {\n    switch (operation.type) {\n      case 'annotation.add': {\n        behaviorOperationImplementations['annotation.add']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'annotation.remove': {\n        behaviorOperationImplementations['annotation.remove']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'block.set': {\n        behaviorOperationImplementations['block.set']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'block.unset': {\n        behaviorOperationImplementations['block.unset']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'decorator.add': {\n        behaviorOperationImplementations['decorator.add']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'decorator.remove': {\n        behaviorOperationImplementations['decorator.remove']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'delete': {\n        behaviorOperationImplementations.delete({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'history.redo': {\n        behaviorOperationImplementations['history.redo']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'history.undo': {\n        behaviorOperationImplementations['history.undo']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.block': {\n        behaviorOperationImplementations['insert.block']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.inline object': {\n        behaviorOperationImplementations['insert.inline object']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.span': {\n        behaviorOperationImplementations['insert.span']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.text': {\n        behaviorOperationImplementations['insert.text']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.backward': {\n        behaviorOperationImplementations['move.backward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.block': {\n        behaviorOperationImplementations['move.block']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.forward': {\n        behaviorOperationImplementations['move.forward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      default: {\n        behaviorOperationImplementations.select({\n          context,\n          operation: operation,\n        })\n        break\n      }\n    }\n  } catch (error) {\n    console.error(\n      new Error(\n        `Executing \"${operation.type}\" failed due to: ${error.message}`,\n      ),\n    )\n  }\n}\n","import {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_OPERATION_ID: WeakMap<Editor, string | undefined> = new WeakMap()\n\nexport function withApplyingBehaviorOperations(editor: Editor, fn: () => void) {\n  CURRENT_OPERATION_ID.set(editor, defaultKeyGenerator())\n  Editor.withoutNormalizing(editor, fn)\n  CURRENT_OPERATION_ID.set(editor, undefined)\n}\n\nexport function getCurrentOperationId(editor: Editor) {\n  return CURRENT_OPERATION_ID.get(editor)\n}\n\nexport function isApplyingBehaviorOperations(editor: Editor) {\n  return getCurrentOperationId(editor) !== undefined\n}\n","import {Editor} from 'slate'\nimport {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {insertTextOperationImplementation} from '../../operations/behavior.operation.insert.text'\nimport {performOperation} from '../../operations/behavior.operations'\nimport type {EditorActor} from '../editor-machine'\nimport {isApplyingBehaviorOperations} from '../with-applying-behavior-operations'\n\nexport function createWithEventListeners(editorActor: EditorActor) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    const {delete: editorDelete, select} = editor\n\n    editor.delete = (options) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        editorDelete(options)\n        return\n      }\n\n      const at = options?.at ?? editor.selection\n\n      if (!at) {\n        console.error('Unexpected call to .delete(...) without `at` option')\n        return\n      }\n\n      const range = Editor.range(editor, at)\n\n      const selection = slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor,\n        range,\n      })\n\n      if (!selection) {\n        console.error(\n          'Unexpected call to .delete(...) with invalid `at` option',\n        )\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete',\n          at: selection,\n          direction: options?.reverse ? 'backward' : 'forward',\n          unit: options?.unit,\n        },\n        editor,\n      })\n    }\n\n    editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .deleteBackward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .deleteForward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .insertBreak(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertData = (dataTransfer) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .insertData(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'input.*',\n          originEvent: {\n            dataTransfer,\n          },\n        },\n        editor,\n      })\n    }\n\n    editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertTextOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text: '\\n', editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertTextOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text, editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.redo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.redo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.select = (location) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        select(location)\n        return\n      }\n\n      const range = Editor.range(editor, location)\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          at: slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range,\n          }),\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.setFragmentData = () => {\n      console.error('Unexpected call to .setFragmentData(...)')\n      return\n    }\n\n    editor.undo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.undo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(editorActor: EditorActor) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        const existingKeys = [...Node.descendants(editor)].map(\n          ([node]) => node._key,\n        )\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key:\n              operation.properties._key === undefined ||\n              existingKeys.includes(operation.properties._key)\n                ? editorActor.getSnapshot().context.keyGenerator()\n                : operation.properties._key,\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          const existingKeys = [...Node.descendants(editor)].map(\n            ([node]) => node._key,\n          )\n\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key:\n                operation.node._key === undefined ||\n                existingKeys.includes(operation.node._key)\n                  ? editorActor.getSnapshot().context.keyGenerator()\n                  : operation.node._key,\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (\n        Element.isElement(node) &&\n        node._type === editorActor.getSnapshot().context.schema.block.name\n      ) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {Path, PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {Element, Node, Text, Transforms, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {isKeyedSegment} from '../utils'\nimport {isEqualToEmptyEditor, toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schema: EditorSchema,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schema)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\nfunction diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  if (!child) {\n    return false\n  }\n\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block.node) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child.node)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.node.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.node.text, newValue), 5)\n\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({\n        type: 'insert_text',\n        path: [block.index, child.index],\n        offset,\n        text,\n      })\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({\n        type: 'remove_text',\n        path: [block.index, child.index],\n        offset: offset,\n        text,\n      })\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schema: EditorSchema,\n) {\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    return false\n  }\n\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes: schema},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = block.index\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n\n    const editorWasEmptyBefore = isEqualToEmptyEditor(editor.children, schema)\n\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n\n    if (\n      editorWasEmptyBefore &&\n      typeof patch.path[0] === 'number' &&\n      patch.path[0] === 0\n    ) {\n      Transforms.removeNodes(editor, {\n        at: [position === 'before' ? targetBlockIndex + 1 : targetBlockIndex],\n      })\n    }\n\n    return true\n  }\n\n  // Insert children\n  const {items, position} = patch\n\n  const targetChild = findBlockChild(block, patch.path)\n\n  if (!targetChild) {\n    return false\n  }\n\n  const childrenToInsert = toSlateValue(\n    [{...block.node, children: items as PortableTextChild[]}],\n    {schemaTypes: schema},\n    KEY_TO_SLATE_ELEMENT.get(editor),\n  )\n  const normalizedIdx =\n    position === 'after' ? targetChild.index + 1 : targetChild.index\n  const childInsertPath = [block.index, normalizedIdx]\n\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  const isTextBlock = editor.isTextBlock(block.node)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    return false\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  // If this is targeting a text block child\n  if (isTextBlock && child) {\n    if (Text.isText(child.node)) {\n      if (Text.isText(value)) {\n        const oldText = child.node.text\n        const newText = value.text\n        if (oldText !== newText) {\n          editor.apply({\n            type: 'remove_text',\n            path: [block.index, child.index],\n            offset: 0,\n            text: oldText,\n          })\n          editor.apply({\n            type: 'insert_text',\n            path: [block.index, child.index],\n            offset: 0,\n            text: newText,\n          })\n          // call OnChange here to emit the new selection\n          // the user's selection might be interfering with\n          editor.onChange()\n        }\n      } else {\n        // Setting non-text span property\n\n        const propPath = patch.path.slice(3)\n        const propEntry = propPath.at(0)\n        const reservedProps = ['_key', '_type', 'text']\n\n        if (propEntry === undefined) {\n          return false\n        }\n\n        if (\n          typeof propEntry === 'string' &&\n          reservedProps.includes(propEntry)\n        ) {\n          return false\n        }\n\n        const newNode = applyAll(child.node, [\n          {\n            ...patch,\n            path: propPath,\n          },\n        ])\n\n        Transforms.setNodes(editor, newNode, {at: [block.index, child.index]})\n      }\n    } else {\n      // Setting inline object property\n\n      const propPath = patch.path.slice(3)\n      const reservedProps = ['_key', '_type', 'children', '__inline']\n      const propEntry = propPath.at(0)\n\n      if (propEntry === undefined) {\n        return false\n      }\n\n      if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n        return false\n      }\n\n      // If the child is an inline object, we need to apply the patch to the\n      // `value` property object.\n      const value =\n        'value' in child.node && typeof child.node.value === 'object'\n          ? child.node.value\n          : {}\n\n      const newValue = applyAll(value, [\n        {\n          ...patch,\n          path: patch.path.slice(3),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...child.node, value: newValue},\n        {at: [block.index, child.index]},\n      )\n    }\n\n    return true\n  } else if (Element.isElement(block.node) && patch.path.length === 1) {\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block.node || {\n      children: undefined,\n    }\n\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: [block.index],\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    const blockNode = block.node\n\n    blockNode.children.forEach((child, childIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: [block.index, blockNode.children.length - 1 - childIndex],\n        node: child,\n      })\n    })\n\n    if (Array.isArray(children)) {\n      children.forEach((child, childIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: [block.index, childIndex],\n          node: child,\n        })\n      })\n    }\n  } else if (block && 'value' in block.node) {\n    if (patch.path.length > 1 && patch.path[1] !== 'children') {\n      const newVal = applyAll(block.node.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...block.node, value: newVal},\n        {at: [block.index]},\n      )\n    } else {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n\n    const children = Node.children(editor, [], {\n      reverse: true,\n    })\n\n    for (const [_, path] of children) {\n      Transforms.removeNodes(editor, {at: path})\n    }\n\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    return true\n  }\n\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    Transforms.removeNodes(editor, {at: [block.index]})\n\n    return true\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  // Unset on text block children\n  if (editor.isTextBlock(block.node) && child) {\n    if (patch.path[1] === 'children' && patch.path.length === 3) {\n      Transforms.removeNodes(editor, {at: [block.index, child.index]})\n\n      return true\n    }\n  }\n\n  if (child && !Text.isText(child.node)) {\n    // Unsetting inline object property\n\n    const propPath = patch.path.slice(3)\n    const propEntry = propPath.at(0)\n    const reservedProps = ['_key', '_type', 'children', '__inline']\n\n    if (propEntry === undefined) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n      // All custom properties are stored on the `value` property object.\n      // If you try to unset any of the other top-level properties it's a\n      // no-op.\n      return false\n    }\n\n    const value =\n      'value' in child.node && typeof child.node.value === 'object'\n        ? child.node.value\n        : {}\n\n    const newValue = applyAll(value, [\n      {\n        ...patch,\n        path: patch.path.slice(3),\n      },\n    ])\n\n    Transforms.setNodes(\n      editor,\n      {...child.node, value: newValue},\n      {at: [block.index, child.index]},\n    )\n\n    return true\n  }\n\n  if (child && Text.isText(child.node)) {\n    const propPath = patch.path.slice(3)\n    const propEntry = propPath.at(0)\n    const reservedProps = ['_key', '_type']\n\n    if (propEntry === undefined) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && propEntry === 'text') {\n      editor.apply({\n        type: 'remove_text',\n        path: [block.index, child.index],\n        offset: 0,\n        text: child.node.text,\n      })\n\n      return true\n    }\n\n    const newNode = applyAll(child.node, [\n      {\n        ...patch,\n        path: propPath,\n      },\n    ])\n    const newKeys = Object.keys(newNode)\n\n    const removedProperties = Object.keys(child.node).filter(\n      (property) => !newKeys.includes(property),\n    )\n\n    Transforms.unsetNodes(editor, removedProperties, {\n      at: [block.index, child.index],\n    })\n\n    return true\n  }\n\n  if (!child) {\n    if ('value' in block.node) {\n      const newVal = applyAll(block.node.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...block.node, value: newVal},\n        {at: [block.index]},\n      )\n\n      return true\n    }\n\n    return false\n  }\n\n  return false\n}\n\nfunction findBlock(\n  children: Descendant[],\n  path: Path,\n): {node: Descendant; index: number} | undefined {\n  let blockIndex = -1\n\n  const block = children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n\n    if (isMatch) {\n      blockIndex = index\n    }\n\n    return isMatch\n  })\n\n  if (!block) {\n    return undefined\n  }\n\n  return {node: block, index: blockIndex}\n}\n\nfunction findBlockChild(\n  block: {node: Descendant; index: number},\n  path: Path,\n): {node: Descendant; index: number} | undefined {\n  const blockNode = block.node\n\n  if (!Element.isElement(blockNode) || path[1] !== 'children') {\n    return undefined\n  }\n\n  let childIndex = -1\n\n  const child = blockNode.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n\n    if (isMatch) {\n      childIndex = index\n    }\n\n    return isMatch\n  })\n\n  if (!child) {\n    return undefined\n  }\n\n  return {\n    node: child,\n    index: childIndex,\n  }\n}\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {isSpan, isTextBlock} from './parse-blocks'\nimport {fromSlateValue} from './values'\n\nexport function insertTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block =\n    isTextBlock({schema}, children[operation.path[0]]) &&\n    children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const textChild =\n    isTextBlock({schema}, block) &&\n    isSpan({schema}, block.children[operation.path[1]]) &&\n    (block.children[operation.path[1]] as PortableTextSpan)\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const prevBlock = beforeValue[operation.path[0]]\n  const prevChild =\n    isTextBlock({schema}, prevBlock) && prevBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevChild) ? prevChild.text : ''\n  const patch = diffMatchPatch(prevText, textChild.text, path)\n  return patch.value.length ? [patch] : []\n}\n\nexport function removeTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: RemoveTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const child =\n    (isTextBlock({schema}, block) && block.children[operation.path[1]]) ||\n    undefined\n  const textChild: PortableTextSpan | undefined = isSpan({schema}, child)\n    ? child\n    : undefined\n  if (child && !textChild) {\n    throw new Error('Expected span')\n  }\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const beforeBlock = beforeValue[operation.path[0]]\n  const prevTextChild =\n    isTextBlock({schema}, beforeBlock) &&\n    beforeBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevTextChild) && prevTextChild.text\n  const patch = diffMatchPatch(prevText || '', textChild.text, path)\n  return patch.value ? [patch] : []\n}\n\nexport function setNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SetNodeOperation,\n): Array<Patch> {\n  if (operation.path.length === 1) {\n    const block = children[operation.path[0]]\n    if (typeof block._key !== 'string') {\n      throw new Error('Expected block to have a _key')\n    }\n    const setNode = omitBy(\n      {...children[operation.path[0]], ...operation.newProperties},\n      isUndefined,\n    ) as unknown as Descendant\n    return [\n      set(fromSlateValue([setNode], schema.block.name)[0], [\n        {_key: block._key},\n      ]),\n    ]\n  } else if (operation.path.length === 2) {\n    const block = children[operation.path[0]]\n    if (isTextBlock({schema}, block)) {\n      const child = block.children[operation.path[1]]\n      if (child) {\n        const blockKey = block._key\n        const childKey = child._key\n        const patches: Patch[] = []\n        const keys = Object.keys(operation.newProperties)\n        keys.forEach((keyName) => {\n          // Special case for setting _key on a child. We have to target it by index and not the _key.\n          if (keys.length === 1 && keyName === '_key') {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                block.children.indexOf(child),\n                keyName,\n              ]),\n            )\n          } else {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                {_key: childKey},\n                keyName,\n              ]),\n            )\n          }\n        })\n        return patches\n      }\n      throw new Error('Could not find a valid child')\n    }\n    throw new Error('Could not find a valid block')\n  } else {\n    throw new Error(\n      `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n    )\n  }\n}\n\nexport function insertNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    const position = operation.path[0] === 0 ? 'before' : 'after'\n    const beforeBlock = beforeValue[operation.path[0] - 1]\n    const targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key\n    if (targetKey) {\n      return [\n        insert(\n          [\n            fromSlateValue(\n              [operation.node as Descendant],\n              schema.block.name,\n            )[0],\n          ],\n          position,\n          [{_key: targetKey}],\n        ),\n      ]\n    }\n    return [\n      setIfMissing(beforeValue, []),\n      insert(\n        [fromSlateValue([operation.node as Descendant], schema.block.name)[0]],\n        'before',\n        [operation.path[0]],\n      ),\n    ]\n  } else if (\n    isTextBlock({schema}, block) &&\n    operation.path.length === 2 &&\n    children[operation.path[0]]\n  ) {\n    const position =\n      block.children.length === 0 || !block.children[operation.path[1] - 1]\n        ? 'before'\n        : 'after'\n    const node = {...operation.node} as Descendant\n    if (!node._type && Text.isText(node)) {\n      node._type = 'span'\n      node.marks = []\n    }\n    const blk = fromSlateValue(\n      [\n        {\n          _key: 'bogus',\n          _type: schema.block.name,\n          children: [node],\n        },\n      ],\n      schema.block.name,\n    )[0] as PortableTextTextBlock\n    const child = blk.children[0]\n    return [\n      insert([child], position, [\n        {_key: block._key},\n        'children',\n        block.children.length <= 1 || !block.children[operation.path[1] - 1]\n          ? 0\n          : {_key: block.children[operation.path[1] - 1]._key},\n      ]),\n    ]\n  }\n  return []\n}\n\nexport function splitNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SplitNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n  const splitBlock = children[operation.path[0]]\n  if (!isTextBlock({schema}, splitBlock)) {\n    throw new Error(\n      `Block with path ${JSON.stringify(\n        operation.path[0],\n      )} is not a text block and can't be split`,\n    )\n  }\n  if (operation.path.length === 1) {\n    const oldBlock = beforeValue[operation.path[0]]\n    if (isTextBlock({schema}, oldBlock)) {\n      const targetValue = fromSlateValue(\n        [children[operation.path[0] + 1]],\n        schema.block.name,\n      )[0]\n      if (targetValue) {\n        patches.push(insert([targetValue], 'after', [{_key: splitBlock._key}]))\n        const spansToUnset = oldBlock.children.slice(operation.position)\n        spansToUnset.forEach((span) => {\n          const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n          patches.push(unset(path))\n        })\n      }\n    }\n    return patches\n  }\n  if (operation.path.length === 2) {\n    const splitSpan = splitBlock.children[operation.path[1]]\n    if (isSpan({schema}, splitSpan)) {\n      const targetSpans = (\n        fromSlateValue(\n          [\n            {\n              ...splitBlock,\n              children: splitBlock.children.slice(\n                operation.path[1] + 1,\n                operation.path[1] + 2,\n              ),\n            } as Descendant,\n          ],\n          schema.block.name,\n        )[0] as PortableTextTextBlock\n      ).children\n\n      patches.push(\n        insert(targetSpans, 'after', [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n        ]),\n      )\n      patches.push(\n        set(splitSpan.text, [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n          'text',\n        ]),\n      )\n    }\n    return patches\n  }\n  return patches\n}\n\nexport function removeNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: RemoveNodeOperation,\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    // Remove a single block\n    if (block && block._key) {\n      return [unset([{_key: block._key}])]\n    }\n    throw new Error('Block not found')\n  } else if (isTextBlock({schema}, block) && operation.path.length === 2) {\n    const spanToRemove = block.children[operation.path[1]]\n\n    if (spanToRemove) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === operation.node._key,\n      )\n\n      if (spansMatchingKey.length > 1) {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n        return []\n      }\n\n      return [\n        unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n      ]\n    }\n    return []\n  } else {\n    return []\n  }\n}\n\nexport function mergeNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: MergeNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n\n  const block = beforeValue[operation.path[0]]\n  const updatedBlock = children[operation.path[0]]\n\n  if (operation.path.length === 1) {\n    if (block?._key) {\n      const newBlock = fromSlateValue(\n        [children[operation.path[0] - 1]],\n        schema.block.name,\n      )[0]\n      patches.push(set(newBlock, [{_key: newBlock._key}]))\n      patches.push(unset([{_key: block._key}]))\n    } else {\n      throw new Error('Target key not found!')\n    }\n  } else if (\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, updatedBlock) &&\n    operation.path.length === 2\n  ) {\n    const updatedSpan =\n      updatedBlock.children[operation.path[1] - 1] &&\n      isSpan({schema}, updatedBlock.children[operation.path[1] - 1])\n        ? updatedBlock.children[operation.path[1] - 1]\n        : undefined\n    const removedSpan =\n      block.children[operation.path[1]] &&\n      isSpan({schema}, block.children[operation.path[1]])\n        ? block.children[operation.path[1]]\n        : undefined\n\n    if (updatedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === updatedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          set(updatedSpan.text, [\n            {_key: block._key},\n            'children',\n            {_key: updatedSpan._key},\n            'text',\n          ]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n\n    if (removedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === removedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n  }\n  return patches\n}\n\nexport function moveNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: MoveNodeOperation,\n): Array<Patch> {\n  const patches: Patch[] = []\n  const block = beforeValue[operation.path[0]]\n  const targetBlock = beforeValue[operation.newPath[0]]\n\n  if (!targetBlock) {\n    return patches\n  }\n\n  if (operation.path.length === 1) {\n    const position: InsertPosition =\n      operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n    patches.push(unset([{_key: block._key}]))\n    patches.push(\n      insert([fromSlateValue([block], schema.block.name)[0]], position, [\n        {_key: targetBlock._key},\n      ]),\n    )\n  } else if (\n    operation.path.length === 2 &&\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, targetBlock)\n  ) {\n    const child = block.children[operation.path[1]]\n    const targetChild = targetBlock.children[operation.newPath[1]]\n    const position =\n      operation.newPath[1] === targetBlock.children.length ? 'after' : 'before'\n    const childToInsert = (\n      fromSlateValue([block], schema.block.name)[0] as PortableTextTextBlock\n    ).children[operation.path[1]]\n    patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n    patches.push(\n      insert([childToInsert], position, [\n        {_key: targetBlock._key},\n        'children',\n        {_key: targetChild._key},\n      ]),\n    )\n  }\n  return patches\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {Editor, type Descendant, type Operation} from 'slate'\nimport {createApplyPatch} from '../../internal-utils/applyPatch'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  insertNodePatch,\n  insertTextPatch,\n  mergeNodePatch,\n  moveNodePatch,\n  removeNodePatch,\n  removeTextPatch,\n  setNodePatch,\n  splitNodePatch,\n} from '../../internal-utils/operation-to-patches'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../internal-utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../internal-utils/weakMaps'\nimport {withRemoteChanges} from '../../internal-utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../internal-utils/withoutPatching'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {getCurrentOperationId} from '../with-applying-behavior-operations'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\ninterface Options {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  relayActor,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(editorActor.getSnapshot().context.schema)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              for (const patch of patches) {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n\n                try {\n                  changed = applyPatch(editor, patch)\n                } catch (error) {\n                  console.error(\n                    `Applying patch ${JSON.stringify(patch)} failed due to: ${error.message}`,\n                  )\n                }\n              }\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(\n        previousChildren,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(\n        editor.children,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...insertTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...removeTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...removeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...splitNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...insertNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...setNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n            ),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...mergeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...moveNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        relayActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            editorActor.getSnapshot().context.schema.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        for (const patch of patches) {\n          editorActor.send({\n            type: 'internal.patch',\n            patch: {...patch, origin: 'local'},\n            operationId: getCurrentOperationId(editor),\n            value: fromSlateValue(\n              editor.children,\n              editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n          })\n        }\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = editorActor.getSnapshot().context.schema.styles[0].name\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    return editor\n  }\n}\n","import type {BaseRange} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../internal-utils/weakMaps'\nimport type {EditorSelection, PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection | null = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            ptRange = slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor,\n              range: editor.selection,\n            })\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'update selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'update selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      onChange()\n      if (!editorActor.getSnapshot().matches({setup: 'setting up'})) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import type {\n  PortableTextListBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  isListBlock,\n  isSpan,\n  isTextBlock,\n} from '../../internal-utils/parse-blocks'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n}: {\n  editorActor: EditorActor\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return isTextBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isSpan(editorActor.getSnapshot().context, value)\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return isListBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        editorActor.getSnapshot().context.schema.block.name !== element._type &&\n        (editorActor\n          .getSnapshot()\n          .context.schema.blockObjects.map((obj) => obj.name)\n          .includes(element._type) ||\n          editorActor\n            .getSnapshot()\n            .context.schema.inlineObjects.map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = editorActor\n        .getSnapshot()\n        .context.schema.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {\n            ...span,\n            _type: editorActor.getSnapshot().context.schema.span.name,\n            _key: key,\n          },\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {toSlateValue} from '../../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\ninterface Options {\n  editorActor: EditorActor\n}\n\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: editorActor.getSnapshot().context.schema.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style:\n              editorActor.getSnapshot().context.schema.styles[0].name ||\n              'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  editorActor\n                    .getSnapshot()\n                    .context.schema.decorators.find(\n                      ({name}) => name === decorator,\n                    ),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import {Range} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {getNextSpan, getPreviousSpan} from './sibling-utils'\nimport {getFocusBlock, getFocusSpan, getSelectedSpans} from './slate-utils'\n\nexport type MarkState = {\n  state: 'changed' | 'unchanged'\n  marks: Array<string>\n}\n\n/**\n * Given that text is inserted at the current position, what marks should\n * be applied?\n */\nexport function getMarkState({\n  schema,\n  editor,\n}: {\n  schema: EditorSchema\n  editor: PortableTextSlateEditor\n}): MarkState | undefined {\n  if (!editor.selection) {\n    return undefined\n  }\n\n  const [block, blockPath] = getFocusBlock({\n    editor,\n  })\n  const [span, spanPath] = getFocusSpan({\n    editor,\n  })\n\n  if (!block || !editor.isTextBlock(block) || !span) {\n    return undefined\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    const selectedSpans = getSelectedSpans({editor})\n\n    let index = 0\n    let marks: Array<string> = []\n\n    for (const [span] of selectedSpans) {\n      if (index === 0) {\n        marks = span.marks ?? []\n      } else {\n        if (\n          span.marks?.length === 0 ||\n          (span.marks ?? [])?.some((mark) => !marks.includes(mark))\n        ) {\n          marks = []\n        }\n      }\n\n      index++\n    }\n\n    return {\n      state: 'unchanged',\n      marks,\n    }\n  }\n\n  const decorators = schema.decorators.map((decorator) => decorator.name)\n  const marks = span.marks ?? []\n  const marksWithoutAnnotations = marks.filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  const spanHasAnnotations = marks.length > marksWithoutAnnotations.length\n\n  const spanIsEmpty = span.text.length === 0\n\n  const atTheBeginningOfSpan = editor.selection.anchor.offset === 0\n  const atTheEndOfSpan = editor.selection.anchor.offset === span.text.length\n\n  const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n  const nextSpan = getNextSpan({editor, blockPath, spanPath})\n  const nextSpanAnnotations =\n    nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n  const spanAnnotations = marks.filter((mark) => !decorators.includes(mark))\n\n  const previousSpanHasAnnotations = previousSpan\n    ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n    : false\n  const previousSpanHasSameAnnotations = previousSpan\n    ? previousSpan.marks\n        ?.filter((mark) => !decorators.includes(mark))\n        .every((mark) => marks.includes(mark))\n    : false\n  const previousSpanHasSameAnnotation = previousSpan\n    ? previousSpan.marks?.some(\n        (mark) => !decorators.includes(mark) && marks.includes(mark),\n      )\n    : false\n\n  const previousSpanHasSameMarks = previousSpan\n    ? previousSpan.marks?.every((mark) => marks.includes(mark))\n    : false\n  const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n    nextSpanAnnotations?.includes(mark),\n  )\n\n  if (spanHasAnnotations && !spanIsEmpty) {\n    if (atTheBeginningOfSpan) {\n      if (previousSpanHasSameMarks) {\n        return {\n          state: 'changed',\n          marks: previousSpan?.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotations) {\n        return {\n          state: 'changed',\n          marks: previousSpan?.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotation) {\n        return {\n          state: 'unchanged',\n          marks: span.marks ?? [],\n        }\n      } else if (!previousSpan) {\n        return {\n          state: 'changed',\n          marks: [],\n        }\n      }\n    }\n\n    if (atTheEndOfSpan) {\n      if (\n        (nextSpan &&\n          nextSpanSharesSomeAnnotations &&\n          nextSpanAnnotations.length < spanAnnotations.length) ||\n        !nextSpanSharesSomeAnnotations\n      ) {\n        return {\n          state: 'changed',\n          marks: nextSpan?.marks ?? [],\n        }\n      }\n\n      if (!nextSpan) {\n        return {\n          state: 'changed',\n          marks: [],\n        }\n      }\n    }\n  }\n\n  if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n    if (previousSpanHasAnnotations) {\n      return {\n        state: 'changed',\n        marks: [],\n      }\n    } else {\n      return {\n        state: 'changed',\n        marks: (previousSpan?.marks ?? []).filter((mark) =>\n          decorators.includes(mark),\n        ),\n      }\n    }\n  }\n\n  return {\n    state: 'unchanged',\n    marks: span.marks ?? [],\n  }\n}\n","import {getMarkState} from '../../internal-utils/mark-state'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorContext} from '../editor-snapshot'\n\nexport function pluginUpdateMarkState(\n  context: Pick<EditorContext, 'schema'>,\n  editor: PortableTextSlateEditor,\n) {\n  const {apply} = editor\n\n  editor.apply = (operation) => {\n    apply(operation)\n\n    editor.markState = getMarkState({\n      editor,\n      schema: context.schema,\n    })\n  }\n\n  return editor\n}\n","import type {EditorSchema} from '../editor/editor-schema'\nimport {isTypedObject} from './asserters'\n\ntype Path = Array<number>\n\nexport type PortableTextNode<TEditorSchema extends EditorSchema> =\n  | EditorNode<TEditorSchema>\n  | TextBlockNode<TEditorSchema>\n  | SpanNode<TEditorSchema>\n  | PartialSpanNode\n  | ObjectNode\n\n//////////\n\nexport type EditorNode<TEditorSchema extends EditorSchema> = {\n  children: Array<TextBlockNode<TEditorSchema> | ObjectNode>\n}\n\nexport function isEditorNode<TEditorSchema extends EditorSchema>(\n  node: unknown,\n): node is EditorNode<TEditorSchema> {\n  if (typeof node === 'object' && node !== null) {\n    return (\n      !('_type' in node) && 'children' in node && Array.isArray(node.children)\n    )\n  }\n\n  return false\n}\n\n//////////\n\nexport type TextBlockNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type: TEditorSchema['block']['name']\n  children: Array<SpanNode<TEditorSchema> | ObjectNode>\n  [other: string]: unknown\n}\n\nexport function isTextBlockNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is TextBlockNode<TEditorSchema> {\n  return isTypedObject(node) && node._type === context.schema.block.name\n}\n\n//////////\n\nexport type SpanNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type?: TEditorSchema['span']['name']\n  text: string\n  [other: string]: unknown\n}\n\nexport function isSpanNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is SpanNode<TEditorSchema> {\n  if (typeof node !== 'object' || node === null) {\n    return false\n  }\n\n  if ('children' in node) {\n    return false\n  }\n\n  if ('_type' in node) {\n    return node._type === context.schema.span.name\n  }\n\n  return 'text' in node\n}\n\n//////////\n\nexport type PartialSpanNode = {\n  text: string\n  [other: string]: unknown\n}\n\nexport function isPartialSpanNode(node: unknown): node is PartialSpanNode {\n  return (\n    typeof node === 'object' &&\n    node !== null &&\n    'text' in node &&\n    typeof node.text === 'string'\n  )\n}\n\n//////////\n\nexport type ObjectNode = {\n  _type: string\n  _key: string\n  [other: string]: unknown\n}\n\nexport function isObjectNode(\n  context: {schema: EditorSchema},\n  node: unknown,\n): node is ObjectNode {\n  return (\n    !isEditorNode(node) &&\n    !isTextBlockNode(context, node) &&\n    !isSpanNode(context, node) &&\n    !isPartialSpanNode(node)\n  )\n}\n\n/**\n *\n */\nexport function getBlock<TEditorSchema extends EditorSchema>(\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): TextBlockNode<TEditorSchema> | ObjectNode | undefined {\n  const index = path.at(0)\n\n  if (index === undefined || path.length !== 1) {\n    return undefined\n  }\n\n  return root.children.at(index)\n}\n\n/**\n * A \"node\" can either be\n * 1. The root (path length is 0)\n * 2. A block (path length is 1)\n * 3. A span (path length is 2)\n * 4. Or an inline object (path length is 2)\n */\nexport function getNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): PortableTextNode<TEditorSchema> | undefined {\n  if (path.length === 0) {\n    return root\n  }\n\n  if (path.length === 1) {\n    return getBlock(root, path)\n  }\n\n  if (path.length === 2) {\n    const block = getBlock(root, path.slice(0, 1))\n\n    if (!block || !isTextBlockNode(context, block)) {\n      return undefined\n    }\n\n    const child = block.children.at(path[1])\n\n    if (!child) {\n      return undefined\n    }\n\n    return child\n  }\n}\n\nexport function getSpan<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  const node = getNode(context, root, path)\n\n  if (node && isSpanNode(context, node)) {\n    return node\n  }\n\n  return undefined\n}\n\n/**\n * A parent can either be the root or a text block\n */\nexport function getParent<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  if (path.length === 0) {\n    return undefined\n  }\n\n  const parentPath = path.slice(0, -1)\n\n  if (parentPath.length === 0) {\n    return root\n  }\n\n  const blockIndex = parentPath.at(0)\n\n  if (blockIndex === undefined || parentPath.length !== 1) {\n    return undefined\n  }\n\n  const block = root.children.at(blockIndex)\n\n  if (block && isTextBlockNode(context, block)) {\n    return block\n  }\n\n  return undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {createDraft, finishDraft, type WritableDraft} from 'immer'\nimport {Element, Path, type Node, type Operation} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {OmitFromUnion} from '../type-utils'\nimport {\n  getBlock,\n  getNode,\n  getParent,\n  getSpan,\n  isEditorNode,\n  isObjectNode,\n  isPartialSpanNode,\n  isSpanNode,\n  isTextBlockNode,\n  type PortableTextNode,\n  type SpanNode,\n  type TextBlockNode,\n} from './portable-text-node'\n\nexport function applyOperationToPortableText(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  value: Array<PortableTextBlock>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  const draft = createDraft({children: value})\n\n  try {\n    applyOperationToPortableTextDraft(context, draft, operation)\n  } catch (e) {\n    console.error(e)\n  }\n\n  return finishDraft(draft).children\n}\n\nfunction applyOperationToPortableTextDraft(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  root: WritableDraft<{\n    children: Array<PortableTextBlock>\n  }>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  switch (operation.type) {\n    case 'insert_node': {\n      const {path, node: insertedNode} = operation\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (index > parent.children.length) {\n        break\n      }\n\n      if (path.length === 1) {\n        // Inserting block at the root\n\n        if (isTextBlockNode(context, insertedNode)) {\n          // Text blocks can be inserted as is\n\n          parent.children.splice(index, 0, {\n            ...insertedNode,\n            children: insertedNode.children.map((child) => {\n              if ('__inline' in child) {\n                // Except for inline object children which need to have their\n                // `value` spread onto the block\n                return {\n                  _key: child._key,\n                  _type: child._type,\n                  ...('value' in child && typeof child.value === 'object'\n                    ? child.value\n                    : {}),\n                }\n              }\n\n              return child\n            }),\n          })\n\n          break\n        }\n\n        if (Element.isElement(insertedNode) && !('__inline' in insertedNode)) {\n          // Void blocks have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      if (path.length === 2) {\n        // Inserting children into blocks\n\n        if (!isTextBlockNode(context, parent)) {\n          // Only text blocks can have children\n          break\n        }\n\n        if (isPartialSpanNode(insertedNode)) {\n          // Text nodes can be inserted as is\n\n          parent.children.splice(index, 0, insertedNode)\n          break\n        }\n\n        if ('__inline' in insertedNode) {\n          // Void children have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      break\n    }\n\n    case 'insert_text': {\n      const {path, offset, text} = operation\n      if (text.length === 0) break\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset)\n      span.text = before + text + after\n\n      break\n    }\n\n    case 'merge_node': {\n      const {path} = operation\n      const node = getNode(context, root, path)\n      const prevPath = Path.previous(path)\n      const prev = getNode(context, root, prevPath)\n      const parent = getParent(context, root, path)\n\n      if (!node || !prev || !parent) {\n        break\n      }\n\n      const index = path[path.length - 1]\n\n      if (isPartialSpanNode(node) && isPartialSpanNode(prev)) {\n        prev.text += node.text\n      } else if (\n        isTextBlockNode(context, node) &&\n        isTextBlockNode(context, prev)\n      ) {\n        prev.children.push(...node.children)\n      } else {\n        break\n      }\n\n      parent.children.splice(index, 1)\n\n      break\n    }\n\n    case 'move_node': {\n      const {path, newPath} = operation\n\n      if (Path.isAncestor(path, newPath)) {\n        break\n      }\n\n      const node = getNode(context, root, path)\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!node || !parent) {\n        break\n      }\n\n      // This is tricky, but since the `path` and `newPath` both refer to\n      // the same snapshot in time, there's a mismatch. After either\n      // removing the original position, the second step's path can be out\n      // of date. So instead of using the `op.newPath` directly, we\n      // transform `op.path` to ascertain what the `newPath` would be after\n      // the operation was applied.\n      parent.children.splice(index, 1)\n      const truePath = Path.transform(path, operation)!\n      const newParent = getNode(context, root, Path.parent(truePath))\n      const newIndex = truePath[truePath.length - 1]\n\n      if (!newParent) {\n        break\n      }\n\n      if (!('children' in newParent)) {\n        break\n      }\n\n      if (!Array.isArray(newParent.children)) {\n        break\n      }\n\n      newParent.children.splice(newIndex, 0, node)\n\n      break\n    }\n\n    case 'remove_node': {\n      const {path} = operation\n      const index = path[path.length - 1]\n      const parent = getParent(context, root, path)\n      parent?.children.splice(index, 1)\n\n      break\n    }\n\n    case 'remove_text': {\n      const {path, offset, text} = operation\n\n      if (text.length === 0) {\n        break\n      }\n\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset + text.length)\n      span.text = before + after\n\n      break\n    }\n\n    case 'set_node': {\n      const {path, properties, newProperties} = operation\n\n      const node = getNode(context, root, path)\n\n      if (!node) {\n        break\n      }\n\n      if (isEditorNode(node)) {\n        break\n      }\n\n      if (isObjectNode(context, node)) {\n        const valueBefore = (\n          'value' in properties && typeof properties.value === 'object'\n            ? properties.value\n            : {}\n        ) as Partial<Node>\n        const valueAfter = (\n          'value' in newProperties && typeof newProperties.value === 'object'\n            ? newProperties.value\n            : {}\n        ) as Partial<Node>\n\n        for (const key in newProperties) {\n          if (key === 'value') {\n            continue\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in properties) {\n          if (key === 'value') {\n            continue\n          }\n\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        for (const key in valueAfter) {\n          const value = valueAfter[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in valueBefore) {\n          if (!valueAfter.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isTextBlockNode(context, node)) {\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof Partial<Node>>key]\n          } else {\n            node[<keyof Partial<Node>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof Partial<Node>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isPartialSpanNode(node)) {\n        for (const key in newProperties) {\n          if (key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      break\n    }\n\n    case 'split_node': {\n      const {path, position, properties} = operation\n\n      if (path.length === 0) {\n        break\n      }\n\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (isEditorNode(parent)) {\n        const block = getBlock(root, path)\n\n        if (!block || !isTextBlockNode(context, block)) {\n          break\n        }\n\n        const before = block.children.slice(0, position)\n        const after = block.children.slice(position)\n        block.children = before\n\n        // _key is deliberately left out\n        const newTextBlockNode = {\n          ...properties,\n          children: after,\n          _type: context.schema.block.name,\n        } as unknown as TextBlockNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newTextBlockNode)\n\n        break\n      }\n\n      if (isTextBlockNode(context, parent)) {\n        const node = getNode(context, root, path)\n\n        if (!node || !isSpanNode(context, node)) {\n          break\n        }\n\n        const before = node.text.slice(0, position)\n        const after = node.text.slice(position)\n        node.text = before\n\n        // _key is deliberately left out\n        const newSpanNode = {\n          ...properties,\n          text: after,\n        } as unknown as SpanNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newSpanNode)\n      }\n\n      break\n    }\n  }\n\n  return root\n}\n","import {applyOperationToPortableText} from '../../internal-utils/apply-operation-to-portable-text'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorContext} from '../editor-snapshot'\n\nexport function pluginUpdateValue(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  editor: PortableTextSlateEditor,\n) {\n  const {apply} = editor\n\n  editor.apply = (operation) => {\n    if (operation.type === 'set_selection') {\n      apply(operation)\n      return\n    }\n\n    editor.value = applyOperationToPortableText(\n      context,\n      editor.value,\n      operation,\n    )\n\n    apply(operation)\n  }\n\n  return editor\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\nimport {pluginUpdateMarkState} from './slate-plugin.update-mark-state'\nimport {pluginUpdateValue} from './slate-plugin.update-value'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor, relayActor} = options\n  const withObjectKeys = createWithObjectKeys(editorActor)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    relayActor,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor)\n  const withPortableTextBlockStyle =\n    createWithPortableTextBlockStyle(editorActor)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n  })\n  const withPortableTextSelections =\n    createWithPortableTextSelections(editorActor)\n  const withEventListeners = createWithEventListeners(editorActor)\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPlaceholderBlock(\n              withUtils(\n                withMaxBlocks(\n                  withUndoRedo(\n                    withPatches(\n                      withPortableTextSelections(\n                        pluginUpdateValue(\n                          editorActor.getSnapshot().context,\n                          pluginUpdateMarkState(\n                            editorActor.getSnapshot().context,\n                            e,\n                          ),\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport {createPlaceholderBlock} from '../internal-utils/create-placeholder-block'\nimport {debugWithName} from '../internal-utils/debug'\nimport {toSlateValue} from '../internal-utils/values'\nimport {\n  KEY_TO_SLATE_ELEMENT,\n  KEY_TO_VALUE_ELEMENT,\n} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\nimport type {RelayActor} from './relay-machine'\n\nconst debug = debugWithName('setup')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  debug('Creating new Slate editor instance')\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    relayActor: config.relayActor,\n    subscriptions: config.subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  instance.decoratorState = {}\n  instance.markState = undefined\n  instance.value = [\n    createPlaceholderBlock(config.editorActor.getSnapshot().context),\n  ]\n\n  const initialValue = toSlateValue(instance.value, {\n    schemaTypes: config.editorActor.getSnapshot().context.schema,\n  })\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  return slateEditor\n}\n","import * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst addAnnotationOnCollapsedSelection = defineBehavior({\n  on: 'annotation.add',\n  guard: ({snapshot}) => {\n    if (!selectors.isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const caretWordSelection = selectors.getCaretWordSelection(snapshot)\n\n    if (\n      !caretWordSelection ||\n      !selectors.isSelectionExpanded({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: caretWordSelection,\n        },\n      })\n    ) {\n      return false\n    }\n\n    return {caretWordSelection}\n  },\n  actions: [\n    ({event}, {caretWordSelection}) => [\n      raise({type: 'select', at: caretWordSelection}),\n      raise({type: 'annotation.add', annotation: event.annotation}),\n    ],\n  ],\n})\n\nexport const coreAnnotationBehaviors = {\n  addAnnotationOnCollapsedSelection,\n}\n","export interface KeyboardEventLike {\n  key: string\n  keyCode?: number\n  altKey: boolean\n  ctrlKey: boolean\n  metaKey: boolean\n  shiftKey: boolean\n}\n\ninterface HotKey {\n  keyCode?: number | undefined\n  key?: string | undefined\n  altKey: boolean | null\n  ctrlKey: boolean | null\n  metaKey: boolean | null\n  shiftKey: boolean | null\n}\n\nconst IS_MAC =\n  typeof window !== 'undefined' &&\n  /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent)\n\ntype Modifier = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n\nconst modifiers: Record<string, Modifier | undefined> = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey',\n}\n\nconst aliases: Record<string, string | undefined> = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta',\n}\n\nconst keyCodes: Record<string, number | undefined> = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'escape': 27,\n  ' ': 32,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'arrowleft': 37,\n  'arrowup': 38,\n  'arrowright': 39,\n  'arrowdown': 40,\n  'insert': 45,\n  'delete': 46,\n  'meta': 91,\n  'numlock': 144,\n  'scrolllock': 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'f13': 124,\n  'f14': 125,\n  'f15': 126,\n  'f16': 127,\n  'f17': 128,\n  'f18': 129,\n  'f19': 130,\n  'f20': 131,\n}\n\nexport function isHotkey(hotkey: string, event: KeyboardEventLike): boolean {\n  return compareHotkey(parseHotkey(hotkey), event)\n}\n\nfunction parseHotkey(hotkey: string): HotKey {\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n  const parsedHotkey: HotKey = {\n    altKey: false,\n    ctrlKey: false,\n    metaKey: false,\n    shiftKey: false,\n  }\n\n  // Special case to handle the `+` key since we use it as a separator.\n  const hotkeySegments = hotkey.replace('++', '+add').split('+')\n\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional =\n      rawHotkeySegment.endsWith('?') && rawHotkeySegment.length > 1\n    const hotkeySegment = optional\n      ? rawHotkeySegment.slice(0, -1)\n      : rawHotkeySegment\n    const keyName = toKeyName(hotkeySegment)\n    const modifier = modifiers[keyName]\n    const alias = aliases[hotkeySegment]\n    const code = keyCodes[keyName]\n\n    if (\n      hotkeySegment.length > 1 &&\n      modifier === undefined &&\n      alias === undefined &&\n      code === undefined\n    ) {\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`)\n    }\n\n    if (hotkeySegments.length === 1 || modifier === undefined) {\n      parsedHotkey.key = keyName\n      parsedHotkey.keyCode = toKeyCode(hotkeySegment)\n    }\n\n    if (modifier !== undefined) {\n      parsedHotkey[modifier] = optional ? null : true\n    }\n  }\n\n  return parsedHotkey\n}\n\nfunction compareHotkey(\n  parsedHotkey: HotKey,\n  event: KeyboardEventLike,\n): boolean {\n  const matchingModifiers =\n    (parsedHotkey.altKey != null\n      ? parsedHotkey.altKey === event.altKey\n      : true) &&\n    (parsedHotkey.ctrlKey != null\n      ? parsedHotkey.ctrlKey === event.ctrlKey\n      : true) &&\n    (parsedHotkey.metaKey != null\n      ? parsedHotkey.metaKey === event.metaKey\n      : true) &&\n    (parsedHotkey.shiftKey != null\n      ? parsedHotkey.shiftKey === event.shiftKey\n      : true)\n\n  if (!matchingModifiers) {\n    return false\n  }\n\n  if (parsedHotkey.keyCode !== undefined && event.keyCode !== undefined) {\n    if (parsedHotkey.keyCode === 91 && event.keyCode === 93) {\n      return true\n    }\n\n    return parsedHotkey.keyCode === event.keyCode\n  }\n\n  return (\n    parsedHotkey.keyCode === event.keyCode ||\n    parsedHotkey.key === event.key.toLowerCase()\n  )\n}\n\nfunction toKeyCode(name: string): number {\n  const keyName = toKeyName(name)\n  const keyCode = keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0)\n\n  return keyCode\n}\n\nfunction toKeyName(name: string): string {\n  const keyName = name.toLowerCase()\n\n  return aliases[keyName] ?? keyName\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst arrowDownOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowDown = isHotkey('ArrowDown', event.originEvent)\n\n    if (!isArrowDown) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    return focusBlockObject && !nextBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst arrowUpOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowUp = isHotkey('ArrowUp', event.originEvent)\n\n    if (!isArrowUp) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    return focusBlockObject && !previousBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n      }),\n    ],\n  ],\n})\n\nconst breakingBlockObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    return collapsedSelection && focusBlockObject !== undefined\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst clickingAboveLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const previousBlock = selectors.getPreviousBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'start' &&\n      focusBlockObject &&\n      !previousBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst clickingBelowLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const nextBlock = selectors.getNextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'end' &&\n      focusBlockObject &&\n      !nextBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete.forward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  clickingAboveLonelyBlockObject,\n  clickingBelowLonelyBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDecoratorBehaviors = {\n  strongShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+b', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'strong',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'strong'})]],\n  }),\n  emShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+i', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'em',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'em'})]],\n  }),\n  underlineShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+u', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'underline',\n      ),\n    actions: [\n      () => [raise({type: 'decorator.toggle', decorator: 'underline'})],\n    ],\n  }),\n  codeShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey(\"mod+'\", event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'code',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'code'})]],\n  }),\n}\n","import * as selectors from '../selectors'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDndBehaviors = [\n  /**\n   * When dragging over the drag origin, we don't want to show the caret in the\n   * text.\n   */\n  defineBehavior({\n    on: 'drag.dragover',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = snapshot.beta.internalDrag?.origin\n      const draggingOverDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(event.position.selection)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      return draggingOverDragOrigin\n    },\n    actions: [],\n  }),\n]\n","import * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst breakingAtTheEndOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const atTheEndOfBlock =\n      selectors.isAtTheEndOfBlock(focusTextBlock)(snapshot)\n\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    if (atTheEndOfBlock) {\n      return {focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {focusListItem, focusLevel}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n          markDefs: [],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst breakingAtTheStartOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    const focusDecorators = focusSpan?.node.marks?.filter(\n      (mark) =>\n        snapshot.context.schema.decorators.some(\n          (decorator) => decorator.name === mark,\n        ) ?? [],\n    )\n    const focusAnnotations =\n      focusSpan?.node.marks?.filter(\n        (mark) =>\n          !snapshot.context.schema.decorators.some(\n            (decorator) => decorator.name === mark,\n          ),\n      ) ?? []\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    const atTheStartOfBlock =\n      selectors.isAtTheStartOfBlock(focusTextBlock)(snapshot)\n\n    if (atTheStartOfBlock) {\n      return {focusAnnotations, focusDecorators, focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    (\n      {snapshot},\n      {focusAnnotations, focusDecorators, focusListItem, focusLevel},\n    ) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              marks: focusAnnotations.length === 0 ? focusDecorators : [],\n              text: '',\n            },\n          ],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'before',\n        select: 'none',\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireDocument = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const firstBlock = selectors.getFirstBlock(snapshot)\n    const lastBlock = selectors.getLastBlock(snapshot)\n\n    if (!firstBlock || !lastBlock) {\n      return false\n    }\n\n    const firstBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: firstBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const lastBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: lastBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(firstBlockStartPoint, selectionStartPoint) &&\n      utils.isEqualSelectionPoints(lastBlockEndPoint, selectionEndPoint)\n    ) {\n      return {selection: snapshot.context.selection}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selection}) => [\n      raise({\n        type: 'delete',\n        at: selection,\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireBlocks = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return false\n    }\n\n    const startBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const endBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(selectionStartPoint, startBlockStartPoint) &&\n      utils.isEqualSelectionPoints(selectionEndPoint, endBlockEndPoint)\n    ) {\n      return {selectedBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {selectedBlocks}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n      ...selectedBlocks.map((block) =>\n        raise({\n          type: 'delete.block',\n          at: block.path,\n        }),\n      ),\n    ],\n  ],\n})\n\nexport const coreInsertBreakBehaviors = {\n  breakingAtTheEndOfTextBlock,\n  breakingAtTheStartOfTextBlock,\n  breakingEntireDocument,\n  breakingEntireBlocks,\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {isListBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst MAX_LIST_LEVEL = 10\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (atTheBeginningOfBLock && focusTextBlock.node.level === 1) {\n      return {focusTextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      raise({\n        type: 'block.set',\n        props: {level},\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst clearListOnEnter = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (\n      !selectionCollapsed ||\n      !focusListBlock ||\n      !isEmptyTextBlock(snapshot.context, focusListBlock.node)\n    ) {\n      return false\n    }\n\n    return {focusListBlock}\n  },\n  actions: [\n    (_, {focusListBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusListBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst indentListOnTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isTab = isHotkey('Tab', event.originEvent)\n\n    if (!isTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level + 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nconst unindentListOnShiftTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isShiftTab = isHotkey('Shift+Tab', event.originEvent)\n\n    if (!isShiftTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level - 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nexport const coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n}\n","import {corePriority} from '../priority/priority.core'\nimport {coreAnnotationBehaviors} from './behavior.core.annotations'\nimport {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreDecoratorBehaviors} from './behavior.core.decorators'\nimport {coreDndBehaviors} from './behavior.core.dnd'\nimport {coreInsertBreakBehaviors} from './behavior.core.insert-break'\nimport {coreListBehaviors} from './behavior.core.lists'\n\nexport const coreBehaviorsConfig = [\n  coreAnnotationBehaviors.addAnnotationOnCollapsedSelection,\n  coreDecoratorBehaviors.strongShortcut,\n  coreDecoratorBehaviors.emShortcut,\n  coreDecoratorBehaviors.underlineShortcut,\n  coreDecoratorBehaviors.codeShortcut,\n  ...coreDndBehaviors,\n  coreBlockObjectBehaviors.clickingAboveLonelyBlockObject,\n  coreBlockObjectBehaviors.clickingBelowLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject,\n  coreBlockObjectBehaviors.breakingBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n  coreListBehaviors.clearListOnBackspace,\n  coreListBehaviors.unindentListOnBackspace,\n  coreListBehaviors.clearListOnEnter,\n  coreListBehaviors.indentListOnTab,\n  coreListBehaviors.unindentListOnShiftTab,\n  coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock,\n  coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock,\n  coreInsertBreakBehaviors.breakingEntireDocument,\n  coreInsertBreakBehaviors.breakingEntireBlocks,\n].map((behavior) => ({\n  behavior,\n  priority: corePriority,\n}))\n","import {isActiveAnnotation} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractAnnotationBehaviors = [\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.remove', annotation: event.annotation}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      !isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.add', annotation: event.annotation}),\n      ],\n    ],\n  }),\n]\n","import {isActiveDecorator} from '../selectors'\nimport {blockOffsetsToSelection} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDecoratorBehaviors = [\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => isActiveDecorator(event.decorator)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'decorator.remove', decorator: event.decorator}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => {\n      const manualSelection = event.at\n        ? blockOffsetsToSelection({\n            context: snapshot.context,\n            offsets: event.at,\n          })\n        : null\n\n      if (manualSelection) {\n        return !isActiveDecorator(event.decorator)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: manualSelection,\n          },\n        })\n      }\n\n      return !isActiveDecorator(event.decorator)(snapshot)\n    },\n    actions: [\n      ({event}) => [\n        raise({\n          ...event,\n          type: 'decorator.add',\n        }),\n      ],\n    ],\n  }),\n]\n","import * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDeleteBehaviors = [\n  defineBehavior({\n    on: 'delete.backward',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      return {selection: snapshot.context.selection}\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          direction: 'backward',\n          unit: event.unit,\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.forward',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      return {selection: snapshot.context.selection}\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          direction: 'forward',\n          unit: event.unit,\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.block',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'delete',\n          at: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.text',\n    guard: ({snapshot, event}) => {\n      const selection = utils.blockOffsetsToSelection({\n        context: snapshot.context,\n        offsets: event.at,\n      })\n\n      if (!selection) {\n        return false\n      }\n\n      const trimmedSelection = selectors.getTrimmedSelection({\n        beta: {\n          activeAnnotations: [],\n          activeDecorators: [],\n          hasTag: () => false,\n          internalDrag: undefined,\n        },\n        context: {\n          converters: [],\n          schema: snapshot.context.schema,\n          keyGenerator: snapshot.context.keyGenerator,\n          readOnly: false,\n          value: snapshot.context.value,\n          selection,\n        },\n      })\n\n      if (!trimmedSelection) {\n        return false\n      }\n\n      return {\n        selection: trimmedSelection,\n      }\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n]\n","import {getFocusTextBlock} from '../selectors'\nimport {isEmptyTextBlock} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractInsertBehaviors = [\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'before',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'before' : 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'after',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'auto') {\n        return false\n      }\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      return {focusTextBlock}\n    },\n    actions: [\n      ({snapshot, event}, {focusTextBlock}) =>\n        event.blocks.length === 1\n          ? [\n              raise({\n                type: 'insert.block',\n                block: event.blocks[0],\n                placement: 'auto',\n                select: 'end',\n              }),\n            ]\n          : isEmptyTextBlock(snapshot.context, focusTextBlock.node)\n            ? event.blocks.map((block, index) =>\n                raise({\n                  type: 'insert.block',\n                  block,\n                  placement: index === 0 ? 'auto' : 'after',\n                  select: 'end',\n                }),\n              )\n            : event.blocks.flatMap((block, index) =>\n                index === 0\n                  ? [\n                      raise({\n                        type: 'split',\n                      }),\n                      raise({\n                        type: 'select.previous block',\n                        select: 'end',\n                      }),\n                      raise({\n                        type: 'insert.block',\n                        block,\n                        placement: 'auto',\n                        select: 'end',\n                      }),\n                    ]\n                  : index === event.blocks.length - 1\n                    ? [\n                        raise({\n                          type: 'select.next block',\n                          select: 'start',\n                        }),\n                        raise({\n                          type: 'insert.block',\n                          block,\n                          placement: 'auto',\n                          select: 'end',\n                        }),\n                      ]\n                    : [\n                        raise({\n                          type: 'insert.block',\n                          block,\n                          placement: 'after',\n                          select: 'end',\n                        }),\n                      ],\n              ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'auto',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'auto' : 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.break',\n    actions: [() => [raise({type: 'split'})]],\n  }),\n  defineBehavior({\n    on: 'insert.soft break',\n    actions: [() => [raise({type: 'insert.text', text: '\\n'})]],\n  }),\n]\n","export const keyIs = {\n  lineBreak: (event) => event.key === 'Enter' && event.shiftKey,\n} satisfies Record<string, KeyboardEventPredicate>\n\ntype KeyboardEventPredicate = (\n  event: Pick<\n    KeyboardEvent,\n    'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n  >,\n) => boolean\n","import {keyIs} from '../internal-utils/key-is'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractKeyboardBehaviors = [\n  /**\n   * On WebKit, Shift+Enter results in an `insertParagraph` input event rather\n   * than an `insertLineBreak` input event. This Behavior makes sure we catch\n   * that `keyboard.keydown` event beforehand and raise an `insert.soft break` manually.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) => keyIs.lineBreak(event.originEvent),\n    actions: [() => [raise({type: 'insert.soft break'})]],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveListItem} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractListItemBehaviors = [\n  defineBehavior({\n    on: 'list item.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              level: 1,\n              listItem: event.listItem,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['level', 'listItem'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'list item.remove', listItem: event.listItem}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => !isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [raise({type: 'list item.add', listItem: event.listItem})],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractMoveBehaviors = [\n  defineBehavior({\n    on: 'move.block up',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (previousBlock) {\n        return {previousBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {previousBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: previousBlock.path,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'move.block down',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (nextBlock) {\n        return {nextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {nextBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: nextBlock.path,\n        }),\n      ],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {getBlockEndPoint, getBlockStartPoint} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSelectBehaviors = [\n  defineBehavior({\n    on: 'select.previous block',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock(snapshot)\n\n      if (!previousBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint({\n              context: snapshot.context,\n              block: previousBlock,\n            })\n          : getBlockStartPoint({\n              context: snapshot.context,\n              block: previousBlock,\n            })\n\n      return {\n        selection: {\n          anchor: point,\n          focus: point,\n        },\n      }\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.next block',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock(snapshot)\n\n      if (!nextBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint({\n              context: snapshot.context,\n              block: nextBlock,\n            })\n          : getBlockStartPoint({\n              context: snapshot.context,\n              block: nextBlock,\n            })\n\n      return {selection: {anchor: point, focus: point}}\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n]\n","import {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {getSelectionStartPoint, isSelectionCollapsed} from '../utils'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {sliceBlocks} from '../utils/util.slice-blocks'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSplitBehaviors = [\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      const selectionStartPoint = getSelectionStartPoint(\n        snapshot.context.selection,\n      )\n      const selectionEndPoint = getSelectionEndPoint(snapshot.context.selection)\n\n      const focusTextBlock = selectors.getFocusTextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: selectionStartPoint,\n            focus: selectionEndPoint,\n          },\n        },\n      })\n\n      if (focusTextBlock) {\n        const blockEndPoint = getBlockEndPoint({\n          context: snapshot.context,\n          block: focusTextBlock,\n        })\n        const newTextBlockSelection = {\n          anchor: selectionEndPoint,\n          focus: blockEndPoint,\n        }\n        const newTextBlock = parseBlock({\n          block: sliceBlocks({\n            context: {\n              ...snapshot.context,\n              selection: newTextBlockSelection,\n            },\n            blocks: [focusTextBlock.node],\n          }).at(0),\n          context: snapshot.context,\n          options: {refreshKeys: true, validateFields: true},\n        })\n\n        if (!newTextBlock || !isTextBlock(snapshot.context, newTextBlock)) {\n          return false\n        }\n\n        return {\n          newTextBlock,\n          newTextBlockSelection,\n          selection: {\n            anchor: selectionStartPoint,\n            focus: blockEndPoint,\n          },\n        }\n      }\n\n      const focusBlockObject = selectors.getFocusBlockObject({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: selectionStartPoint,\n            focus: selectionEndPoint,\n          },\n        },\n      })\n\n      if (focusBlockObject) {\n        const newTextBlock = parseBlock({\n          block: {\n            _type: snapshot.context.schema.block.name,\n            children: [],\n          },\n          context: snapshot.context,\n          options: {refreshKeys: true, validateFields: true},\n        })\n\n        if (!newTextBlock) {\n          return false\n        }\n\n        return {\n          newTextBlock,\n          newTextBlockSelection: {\n            anchor: selectionEndPoint,\n            focus: selectionEndPoint,\n          },\n          selection: snapshot.context.selection,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {newTextBlock, selection}) =>\n        isSelectionCollapsed(selection)\n          ? [\n              raise({\n                type: 'insert.block',\n                block: newTextBlock,\n                placement: 'after',\n                select: 'start',\n              }),\n            ]\n          : [\n              raise({\n                type: 'delete',\n                at: selection,\n              }),\n              raise({\n                type: 'insert.block',\n                block: newTextBlock,\n                placement: 'after',\n                select: 'start',\n              }),\n            ],\n    ],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveStyle} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractStyleBehaviors = [\n  defineBehavior({\n    on: 'style.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              style: event.style,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['style'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.remove', style: event.style})]],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => !isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.add', style: event.style})]],\n  }),\n]\n","import type {ConverterEvent} from '../converters/converter.types'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport type {PickFromUnion} from '../type-utils'\nimport {getTextBlockText} from '../utils'\nimport {abstractAnnotationBehaviors} from './behavior.abstract.annotation'\nimport {abstractDecoratorBehaviors} from './behavior.abstract.decorator'\nimport {abstractDeleteBehaviors} from './behavior.abstract.delete'\nimport {abstractInsertBehaviors} from './behavior.abstract.insert'\nimport {abstractKeyboardBehaviors} from './behavior.abstract.keyboard'\nimport {abstractListItemBehaviors} from './behavior.abstract.list-item'\nimport {abstractMoveBehaviors} from './behavior.abstract.move'\nimport {abstractSelectBehaviors} from './behavior.abstract.select'\nimport {abstractSplitBehaviors} from './behavior.abstract.split'\nimport {abstractStyleBehaviors} from './behavior.abstract.style'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst raiseDeserializationSuccessOrFailure = defineBehavior({\n  on: 'deserialize',\n  guard: ({snapshot, event}) => {\n    let success:\n      | PickFromUnion<ConverterEvent, 'type', 'deserialization.success'>\n      | undefined\n    const failures: Array<\n      PickFromUnion<ConverterEvent, 'type', 'deserialization.failure'>\n    > = []\n\n    for (const converter of snapshot.context.converters) {\n      const data = event.originEvent.originEvent.dataTransfer.getData(\n        converter.mimeType,\n      )\n\n      if (!data) {\n        continue\n      }\n\n      const deserializeEvent = converter.deserialize({\n        snapshot,\n        event: {type: 'deserialize', data},\n      })\n\n      if (deserializeEvent.type === 'deserialization.success') {\n        success = deserializeEvent\n        break\n      } else {\n        failures.push(deserializeEvent)\n      }\n    }\n\n    if (!success) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: '*/*',\n        reason: failures.map((failure) => failure.reason).join(', '),\n      } as const\n    }\n\n    return success\n  },\n  actions: [\n    ({event}, deserializeEvent) => [\n      raise({\n        ...deserializeEvent,\n        originEvent: event.originEvent,\n      }),\n    ],\n  ],\n})\n\nconst raiseSerializationSuccessOrFailure = defineBehavior({\n  on: 'serialize',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.converters.length === 0) {\n      return false\n    }\n\n    const serializeEvents = snapshot.context.converters.map((converter) =>\n      converter.serialize({\n        snapshot,\n        event: {\n          ...event,\n          originEvent: event.originEvent.type,\n        },\n      }),\n    )\n\n    if (serializeEvents.length === 0) {\n      return false\n    }\n\n    return serializeEvents\n  },\n  actions: [\n    ({event}, serializeEvents) =>\n      serializeEvents.map((serializeEvent) => {\n        return raise({\n          ...serializeEvent,\n          originEvent: event.originEvent,\n        })\n      }),\n  ],\n})\n\nexport const abstractBehaviors = [\n  defineBehavior({\n    on: 'clipboard.copy',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.copy',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection\n        ? {\n            selection: snapshot.context.selection,\n          }\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.dragstart',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.success',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            event.originEvent.originEvent.dataTransfer.setData(\n              event.mimeType,\n              event.data,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Serialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = snapshot.beta.internalDrag?.origin\n      const dropPosition = event.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n      return droppingOnDragOrigin\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'drag.drop',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'select',\n          at: event.position.selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      if (\n        event.originEvent.type !== 'drag.drop' ||\n        snapshot.beta.internalDrag === undefined\n      ) {\n        return false\n      }\n\n      const dragOrigin = snapshot.beta.internalDrag.origin\n      const dropPosition = event.originEvent.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection,\n        },\n      })\n\n      const draggedBlocks = selectors.getSelectedBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection,\n        },\n      })\n\n      if (!droppingOnDragOrigin) {\n        return {\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          originEvent: event.originEvent,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (\n        {event},\n        {draggingEntireBlocks, draggedBlocks, dragOrigin, originEvent},\n      ) => [\n        ...(draggingEntireBlocks\n          ? draggedBlocks.map((block) =>\n              raise({\n                type: 'delete.block',\n                at: block.path,\n              }),\n            )\n          : [\n              raise({\n                type: 'delete',\n                at: dragOrigin.selection,\n              }),\n            ]),\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: draggingEntireBlocks\n            ? originEvent.position.block === 'start'\n              ? 'before'\n              : originEvent.position.block === 'end'\n                ? 'after'\n                : 'auto'\n            : 'auto',\n        }),\n      ],\n    ],\n  }),\n  /**\n   * If we are pasting text/plain into a text block then we can probably\n   * assume that the intended behavior is that the pasted text inherits\n   * formatting from the text it's pasted into.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (\n        focusTextBlock &&\n        event.mimeType === 'text/plain' &&\n        event.originEvent.type === 'clipboard.paste'\n      ) {\n        const activeDecorators = snapshot.beta.activeDecorators\n        const activeAnnotations = selectors.getActiveAnnotations(snapshot)\n\n        return {\n          activeAnnotations,\n          activeDecorators,\n          textRuns: event.data.flatMap((block) =>\n            isTextBlock(snapshot.context, block)\n              ? [getTextBlockText(block)]\n              : [],\n          ),\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {activeAnnotations, activeDecorators, textRuns}) =>\n        textRuns.flatMap((textRun, index) =>\n          index !== textRuns.length - 1\n            ? [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n                raise({type: 'insert.break'}),\n              ]\n            : [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n              ],\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: 'auto',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Deserialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection &&\n        selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'input.*',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  ...abstractAnnotationBehaviors,\n  ...abstractDecoratorBehaviors,\n  ...abstractDeleteBehaviors,\n  ...abstractInsertBehaviors,\n  ...abstractKeyboardBehaviors,\n  ...abstractListItemBehaviors,\n  ...abstractMoveBehaviors,\n  ...abstractStyleBehaviors,\n  ...abstractSelectBehaviors,\n  ...abstractSplitBehaviors,\n  raiseDeserializationSuccessOrFailure,\n  raiseSerializationSuccessOrFailure,\n]\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport type {MIMEType} from '../internal-utils/mime-type'\nimport type {OmitFromUnion, PickFromUnion, StrictExtract} from '../type-utils'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {BlockWithOptionalKey} from '../types/block-with-optional-key'\nimport type {EditorSelection} from '../types/editor'\n\n/**\n * @beta\n */\nexport type BehaviorEvent =\n  | SyntheticBehaviorEvent\n  | NativeBehaviorEvent\n  | CustomBehaviorEvent\n\nexport type BehaviorEventTypeNamespace =\n  | SyntheticBehaviorEventNamespace\n  | NativeBehaviorEventNamespace\n  | CustomBehaviorEventNamespace\n\ntype NamespacedBehaviorEventType<\n  TNamespace extends BehaviorEventTypeNamespace | '',\n> = TNamespace extends ''\n  ? BehaviorEvent['type']\n  : Extract<BehaviorEvent['type'], TNamespace | `${TNamespace}.${string}`>\n\n/**************************************\n * External events\n **************************************/\n\ntype ExternalBehaviorEventNamespace = 'blur' | 'focus' | 'insert'\n\ntype ExternalBehaviorEventType<\n  TNamespace extends ExternalBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\nexport type ExternalBehaviorEvent =\n  | {\n      type: ExternalBehaviorEventType<'blur'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'focus'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'insert', 'block object'>\n      placement: InsertPlacement\n      blockObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | SyntheticBehaviorEvent\n  | CustomBehaviorEvent\n\n/**************************************\n * Synthetic events\n **************************************/\n\nconst syntheticBehaviorEventTypes = [\n  'annotation.add',\n  'annotation.remove',\n  'block.set',\n  'block.unset',\n  'decorator.add',\n  'decorator.remove',\n  'delete',\n  'history.redo',\n  'history.undo',\n  'insert.inline object',\n  'insert.block',\n  'insert.span',\n  'insert.text',\n  'move.backward',\n  'move.block',\n  'move.forward',\n  'select',\n] as const\n\ntype SyntheticBehaviorEventType =\n  | (typeof syntheticBehaviorEventTypes)[number]\n  | (typeof abstractBehaviorEventTypes)[number]\n\ntype SyntheticBehaviorEventNamespace =\n  ExtractNamespace<SyntheticBehaviorEventType>\n\n/**\n * @beta\n */\nexport type SyntheticBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.add'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.remove'>\n      annotation: {\n        name: string\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.set'>\n      at: [KeyedSegment]\n      props: Record<string, unknown>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.unset'>\n      at: [KeyedSegment]\n      props: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.add'>\n      decorator: string\n      at?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.remove'>\n      decorator: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete'>\n      at: NonNullable<EditorSelection>\n      /**\n       * Defaults to forward deletion.\n       */\n      direction?: 'backward' | 'forward'\n      /**\n       * Defaults to character deletion.\n       */\n      unit?: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.redo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.undo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.inline object'>\n      inlineObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.block'>\n      block: BlockWithOptionalKey\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.span'>\n      text: string\n      annotations?: Array<{\n        name: string\n        value: {[prop: string]: unknown}\n      }>\n      decorators?: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.text'>\n      text: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.backward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block'>\n      at: [KeyedSegment]\n      to: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.forward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select'>\n      at: EditorSelection\n    }\n  | AbstractBehaviorEvent\n\nexport type InsertPlacement = 'auto' | 'after' | 'before'\n\nexport function isSyntheticBehaviorEvent(\n  event: BehaviorEvent,\n): event is OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> {\n  return (\n    !isCustomBehaviorEvent(event) &&\n    !isNativeBehaviorEvent(event) &&\n    !isAbstractBehaviorEvent(event)\n  )\n}\n\n/**************************************\n * Abstract events\n **************************************/\n\nconst abstractBehaviorEventTypes = [\n  'annotation.toggle',\n  'decorator.toggle',\n  'delete.backward',\n  'delete.block',\n  'delete.forward',\n  'delete.text',\n  'deserialize',\n  'deserialization.success',\n  'deserialization.failure',\n  'insert.blocks',\n  'insert.break',\n  'insert.soft break',\n  'list item.add',\n  'list item.remove',\n  'list item.toggle',\n  'move.block down',\n  'move.block up',\n  'select.previous block',\n  'select.next block',\n  'serialize',\n  'serialization.success',\n  'serialization.failure',\n  'split',\n  'style.add',\n  'style.remove',\n  'style.toggle',\n] as const\n\nexport type AbstractBehaviorEventType =\n  (typeof abstractBehaviorEventTypes)[number]\n\ntype AbstractBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.toggle'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.toggle'>\n      decorator: string\n      at?: {anchor: BlockOffset; focus: BlockOffset}\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.backward'>\n      unit: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.block'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.forward'>\n      unit: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.text'>\n      at: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialize'>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialize'>\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.success'>\n      mimeType: MIMEType\n      data: Array<PortableTextBlock>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.success'>\n      mimeType: MIMEType\n      data: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.blocks'>\n      blocks: Array<BlockWithOptionalKey>\n      placement: InsertPlacement\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.soft break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.add'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.remove'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.toggle'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block down'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block up'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.previous block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.next block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'split'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.add'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.remove'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.toggle'>\n      style: string\n    }\n\nexport function isAbstractBehaviorEvent(\n  event: BehaviorEvent,\n): event is AbstractBehaviorEvent {\n  return (abstractBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**************************************\n * Native events\n **************************************/\n\nconst nativeBehaviorEventTypes = [\n  'clipboard.copy',\n  'clipboard.cut',\n  'clipboard.paste',\n  'drag.dragstart',\n  'drag.drag',\n  'drag.dragend',\n  'drag.dragenter',\n  'drag.dragover',\n  'drag.dragleave',\n  'drag.drop',\n  'input.*',\n  'keyboard.keydown',\n  'keyboard.keyup',\n  'mouse.click',\n] as const\n\ntype NativeBehaviorEventType = (typeof nativeBehaviorEventTypes)[number]\n\ntype NativeBehaviorEventNamespace = ExtractNamespace<NativeBehaviorEventType>\n\nexport function isNativeBehaviorEvent(\n  event: BehaviorEvent,\n): event is NativeBehaviorEvent {\n  return (nativeBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**\n * @beta\n */\nexport type NativeBehaviorEvent =\n  | ClipboardBehaviorEvent\n  | DragBehaviorEvent\n  | InputBehaviorEvent\n  | KeyboardBehaviorEvent\n  | MouseBehaviorEvent\n\ntype ClipboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.copy'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.cut'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.paste'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n\ntype DragBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragstart'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drag'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragend'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragenter'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragover'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drop'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragleave'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n\n/**\n * Used to represent native InputEvents that hold a DataTransfer object.\n *\n * These can either be one of:\n *\n * - insertFromPaste\n * - insertFromPasteAsQuotation\n * - insertFromDrop\n * - insertReplacementText\n * - insertFromYank\n */\nexport type InputBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'input.*'>\n  originEvent: {\n    dataTransfer: DataTransfer\n  }\n}\n\nexport type KeyboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keydown'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keyup'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n\nexport type MouseBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'mouse.click'>\n  position: EventPosition\n}\n\n/**************************************\n * Custom events\n **************************************/\n\ntype CustomBehaviorEventNamespace = 'custom'\n\ntype CustomBehaviorEventType<\n  TNamespace extends CustomBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\n/**\n * @beta\n */\nexport type CustomBehaviorEvent<\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n  TType extends string = string,\n  TInternalType extends CustomBehaviorEventType<\n    'custom',\n    TType\n  > = CustomBehaviorEventType<'custom', TType>,\n> = {\n  type: TInternalType\n} & TPayload\n\nexport function isCustomBehaviorEvent(\n  event: BehaviorEvent,\n): event is CustomBehaviorEvent {\n  return event.type.startsWith('custom.')\n}\n\n/**************************************\n * Resolve behavior event\n **************************************/\n\nexport type ResolveBehaviorEvent<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n> = TBehaviorEventType extends '*'\n  ? BehaviorEvent\n  : TBehaviorEventType extends `${infer TNamespace}.*`\n    ? TNamespace extends BehaviorEventTypeNamespace\n      ? PickFromUnion<\n          BehaviorEvent,\n          'type',\n          NamespacedBehaviorEventType<TNamespace>\n        >\n      : never\n    : TBehaviorEventType extends `custom.${infer TType}`\n      ? CustomBehaviorEvent<TPayload, TType>\n      : TBehaviorEventType extends BehaviorEvent['type']\n        ? PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n        : never\n\ntype ExtractNamespace<TType extends string> =\n  TType extends `${infer Namespace}.${string}` ? Namespace : TType\n","import type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {withApplyingBehaviorOperations} from '../editor/with-applying-behavior-operations'\nimport {withUndoStep} from '../editor/with-undo-step'\nimport {debugWithName} from '../internal-utils/debug'\nimport {performOperation} from '../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {abstractBehaviors} from './behavior.abstract'\nimport type {BehaviorAction} from './behavior.types.action'\nimport type {Behavior} from './behavior.types.behavior'\nimport {\n  isAbstractBehaviorEvent,\n  isCustomBehaviorEvent,\n  isNativeBehaviorEvent,\n  isSyntheticBehaviorEvent,\n  type BehaviorEvent,\n} from './behavior.types.event'\n\nconst debug = debugWithName('behaviors:event')\n\nfunction eventCategory(event: BehaviorEvent) {\n  return isNativeBehaviorEvent(event)\n    ? 'native'\n    : isAbstractBehaviorEvent(event)\n      ? 'synthetic'\n      : isCustomBehaviorEvent(event)\n        ? 'custom'\n        : 'synthetic'\n}\n\nexport function performEvent({\n  mode,\n  behaviors,\n  remainingEventBehaviors,\n  event,\n  editor,\n  keyGenerator,\n  schema,\n  getSnapshot,\n  nativeEvent,\n}: {\n  mode: 'raise' | 'execute' | 'forward'\n  behaviors: Array<Behavior>\n  remainingEventBehaviors: Array<Behavior>\n  event: BehaviorEvent\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  schema: EditorSchema\n  getSnapshot: () => EditorSnapshot\n  nativeEvent:\n    | {\n        preventDefault: () => void\n      }\n    | undefined\n}) {\n  debug(`(${mode}:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n  const eventBehaviors = [\n    ...remainingEventBehaviors,\n    ...abstractBehaviors,\n  ].filter((behavior) => {\n    // Catches all events\n    if (behavior.on === '*') {\n      return true\n    }\n\n    const [listenedNamespace] =\n      behavior.on.includes('*') && behavior.on.includes('.')\n        ? behavior.on.split('.')\n        : [undefined]\n    const [eventNamespace] = event.type.includes('.')\n      ? event.type.split('.')\n      : [undefined]\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select.block` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace !== undefined &&\n      listenedNamespace === eventNamespace\n    ) {\n      return true\n    }\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace === undefined &&\n      listenedNamespace === event.type\n    ) {\n      return true\n    }\n\n    return behavior.on === event.type\n  })\n\n  if (eventBehaviors.length === 0 && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    withApplyingBehaviorOperations(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {\n          keyGenerator,\n          schema,\n        },\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n\n    return\n  }\n\n  const guardSnapshot = getSnapshot()\n\n  let nativeEventPrevented = false\n  let defaultBehaviorOverwritten = false\n  let eventBehaviorIndex = -1\n\n  for (const eventBehavior of eventBehaviors) {\n    eventBehaviorIndex++\n\n    let shouldRun = false\n\n    try {\n      shouldRun =\n        eventBehavior.guard === undefined ||\n        eventBehavior.guard({\n          snapshot: guardSnapshot,\n          event,\n        })\n    } catch (error) {\n      console.error(\n        new Error(\n          `Evaluating guard for \"${event.type}\" failed due to: ${error.message}`,\n        ),\n      )\n    }\n\n    if (!shouldRun) {\n      continue\n    }\n\n    // This Behavior now \"owns\" the event and we can consider the default\n    // action prevented\n    defaultBehaviorOverwritten = true\n\n    for (const actionSet of eventBehavior.actions) {\n      const actionsSnapshot = getSnapshot()\n\n      let actions: Array<BehaviorAction> = []\n\n      try {\n        actions = actionSet(\n          {\n            snapshot: actionsSnapshot,\n            event,\n          },\n          shouldRun,\n        )\n      } catch (error) {\n        console.error(\n          new Error(\n            `Evaluating actions for \"${event.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n\n      if (actions.length === 0) {\n        continue\n      }\n\n      if (actions.some((action) => action.type === 'execute')) {\n        // Since at least one action is about to `execute` changes in the editor,\n        // we set up a new undo step.\n        // All actions performed recursively from now will be squashed into this\n        // undo step\n        withUndoStep(editor, () => {\n          for (const action of actions) {\n            if (action.type === 'effect') {\n              nativeEventPrevented = true\n\n              try {\n                action.effect()\n              } catch (error) {\n                console.error(\n                  new Error(\n                    `Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`,\n                  ),\n                )\n              }\n\n              continue\n            }\n\n            if (action.type === 'forward') {\n              const remainingEventBehaviors = eventBehaviors.slice(\n                eventBehaviorIndex + 1,\n              )\n\n              performEvent({\n                mode: 'forward',\n                behaviors,\n                remainingEventBehaviors: remainingEventBehaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n              })\n\n              continue\n            }\n\n            if (action.type === 'raise') {\n              nativeEventPrevented = true\n\n              performEvent({\n                mode: 'raise',\n                behaviors,\n                remainingEventBehaviors: behaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n              })\n\n              continue\n            }\n\n            nativeEventPrevented = true\n\n            performEvent({\n              mode: 'execute',\n              behaviors,\n              remainingEventBehaviors: isAbstractBehaviorEvent(action.event)\n                ? behaviors\n                : [],\n              event: action.event,\n              editor,\n              keyGenerator,\n              schema,\n              getSnapshot,\n              nativeEvent: undefined,\n            })\n          }\n        })\n\n        continue\n      }\n\n      for (const action of actions) {\n        if (action.type === 'effect') {\n          nativeEventPrevented = true\n\n          try {\n            action.effect()\n          } catch (error) {\n            console.error(\n              new Error(\n                `Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`,\n              ),\n            )\n          }\n\n          continue\n        }\n\n        if (action.type === 'forward') {\n          const remainingEventBehaviors = eventBehaviors.slice(\n            eventBehaviorIndex + 1,\n          )\n\n          performEvent({\n            mode: 'forward',\n            behaviors,\n            remainingEventBehaviors: remainingEventBehaviors,\n            event: action.event,\n            editor,\n            keyGenerator,\n            schema,\n            getSnapshot,\n            nativeEvent,\n          })\n\n          continue\n        }\n\n        if (action.type === 'raise') {\n          nativeEventPrevented = true\n\n          performEvent({\n            mode: 'raise',\n            behaviors,\n            remainingEventBehaviors: behaviors,\n            event: action.event,\n            editor,\n            keyGenerator,\n            schema,\n            getSnapshot,\n            nativeEvent,\n          })\n\n          continue\n        }\n\n        if (action.type === 'execute') {\n          console.error('Unexpected action type: `execute`')\n        }\n      }\n    }\n\n    break\n  }\n\n  if (!defaultBehaviorOverwritten && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    withApplyingBehaviorOperations(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {keyGenerator, schema},\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n  } else if (nativeEventPrevented) {\n    nativeEvent?.preventDefault()\n  }\n}\n","import type {EditorPriority} from './priority.types'\n\nexport function sortByPriority<\n  T extends {\n    priority?: EditorPriority\n  },\n>(items: Array<T>): Array<T> {\n  if (items.length === 0) {\n    return []\n  }\n\n  // Separate items with and without priority\n  const itemsWithPriority = items.filter(\n    (item): item is T & {priority: EditorPriority} =>\n      item.priority !== undefined,\n  )\n  const itemsWithoutPriority = items.filter(\n    (item) => item.priority === undefined,\n  )\n\n  if (itemsWithPriority.length === 0) {\n    return items\n  }\n\n  // Create a map of items by their priority ID\n  const itemsByPriorityId = new Map(\n    itemsWithPriority.map((item) => [item.priority.id, item]),\n  )\n\n  // Build the dependency graph\n  const graph = new Map<string, Set<string>>()\n  const inDegree = new Map<string, number>()\n\n  // Helper function to ensure a node exists in the graph\n  function ensureNode(id: string) {\n    if (!graph.has(id)) {\n      graph.set(id, new Set())\n      inDegree.set(id, 0)\n    }\n  }\n\n  // Initialize graph and in-degree for all items\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    ensureNode(id)\n  }\n\n  // Helper function to add an edge to the graph\n  function addEdge(fromId: string, toId: string) {\n    if (!graph.has(fromId) || !graph.has(toId)) return\n    graph.get(fromId)?.add(toId)\n    inDegree.set(toId, (inDegree.get(toId) ?? 0) + 1)\n  }\n\n  // Add edges based on references\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    const visited = new Set<string>()\n    let ref = item.priority.reference\n\n    while (ref) {\n      const refId = ref.priority.id\n      ensureNode(refId)\n\n      // Check for cyclic reference\n      if (visited.has(refId)) {\n        throw new Error('Circular dependency detected in priorities')\n      }\n      visited.add(refId)\n\n      if (ref.importance === 'higher') {\n        // Reference must come before current item\n        addEdge(id, refId)\n      } else {\n        // Current item must come before reference\n        addEdge(refId, id)\n      }\n\n      ref = ref.priority.reference\n    }\n  }\n\n  const queue: string[] = []\n\n  // Find all nodes with no incoming edges\n  for (const [id, degree] of inDegree) {\n    if (degree === 0) {\n      queue.push(id)\n    }\n  }\n\n  const result: T[] = []\n\n  // Perform topological sort\n  while (queue.length > 0) {\n    const currentId = queue.shift()!\n    const currentItem = itemsByPriorityId.get(currentId)\n    if (currentItem) {\n      result.push(currentItem)\n    }\n\n    // Decrease in-degree of neighbors\n    for (const neighborId of graph.get(currentId) ?? []) {\n      const newDegree = (inDegree.get(neighborId) ?? 0) - 1\n      inDegree.set(neighborId, newDegree)\n      if (newDegree === 0) {\n        queue.push(neighborId)\n      }\n    }\n  }\n\n  // Add any remaining items that weren't processed\n  for (const item of itemsWithPriority) {\n    if (!result.includes(item)) {\n      result.push(item)\n    }\n  }\n\n  // Append items without priority at the end in their original order\n  return [...result, ...itemsWithoutPriority]\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Converter} from '../converters/converter.types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport type {HasTag} from './editor-machine'\nimport type {EditorSchema} from './editor-schema'\nimport {getActiveAnnotations} from './get-active-annotations'\nimport {getActiveDecorators} from './get-active-decorators'\n\n/**\n * @public\n */\nexport type EditorContext = {\n  converters: Array<Converter>\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  selection: EditorSelection\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @public\n */\nexport type EditorSnapshot = {\n  context: EditorContext\n  /**\n   * @beta\n   * Do not rely on this externally\n   */\n  beta: {\n    activeAnnotations: Array<string>\n    activeDecorators: Array<string>\n    hasTag: HasTag\n    internalDrag:\n      | {\n          origin: Pick<EventPosition, 'selection'>\n        }\n      | undefined\n  }\n}\n\nexport function createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  readOnly,\n  schema,\n  hasTag,\n  internalDrag,\n}: {\n  converters: Array<Converter>\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  hasTag: HasTag\n  internalDrag:\n    | {\n        origin: Pick<EventPosition, 'selection'>\n      }\n    | undefined\n}) {\n  const selection = editor.selection\n    ? slateRangeToSelection({\n        schema,\n        editor,\n        range: editor.selection,\n      })\n    : null\n\n  const context = {\n    converters,\n    keyGenerator,\n    readOnly,\n    schema,\n    selection,\n    value: editor.value,\n  } satisfies EditorContext\n\n  return {\n    context,\n    beta: {\n      activeAnnotations: getActiveAnnotations({\n        markState: editor.markState,\n        schema,\n      }),\n      activeDecorators: getActiveDecorators({\n        decoratorState: editor.decoratorState,\n        markState: editor.markState,\n        schema,\n      }),\n      hasTag,\n      internalDrag,\n    },\n  } satisfies EditorSnapshot\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Transforms} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport type {BehaviorConfig} from '../behaviors/behavior.config'\nimport {coreBehaviorsConfig} from '../behaviors/behavior.core'\nimport {performEvent} from '../behaviors/behavior.perform-event'\nimport type {BehaviorEvent} from '../behaviors/behavior.types.event'\nimport type {Converter} from '../converters/converter.types'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {sortByPriority} from '../priority/priority.sort'\nimport type {NamespaceEvent, OmitFromUnion} from '../type-utils'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {createEditorSnapshot} from './editor-snapshot'\nimport type {\n  EditorEmittedEvent,\n  MutationEvent,\n  PatchEvent,\n} from './relay-machine'\n\nexport * from 'xstate/guards'\n\nconst debug = debugWithName('editor machine')\n\n/**\n * @public\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type ExternalEditorEvent =\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | PatchesEvent\n\ntype InternalPatchEvent = NamespaceEvent<PatchEvent, 'internal'> & {\n  operationId?: string\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\nexport type HasTag = ReturnType<EditorActor['getSnapshot']>['hasTag']\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | ExternalEditorEvent\n  | {\n      type: 'add behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'remove behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'blur'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'focus'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'normalizing'\n    }\n  | {\n      type: 'update selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'done normalizing'\n    }\n  | {\n      type: 'done syncing value'\n    }\n  | {\n      type: 'syncing value'\n    }\n  | {\n      type: 'behavior event'\n      behaviorEvent: BehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | MutationEvent\n  | InternalPatchEvent\n  | {\n      type: 'dragstart'\n      origin: Pick<EventPosition, 'selection'>\n      ghost?: HTMLElement\n    }\n  | {type: 'dragend'}\n  | {type: 'drop'}\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | OmitFromUnion<EditorEmittedEvent, 'type', 'patch'>\n  | InternalPatchEvent\n  | PatchesEvent\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Set<BehaviorConfig>\n      converters: Set<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      pendingEvents: Array<InternalPatchEvent | MutationEvent>\n      pendingIncomingPatchesEvents: Array<PatchesEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      initialValue: Array<PortableTextBlock> | undefined\n      internalDrag?: {\n        ghost?: HTMLElement\n        origin: Pick<EventPosition, 'selection'>\n      }\n      slateEditor?: PortableTextSlateEditor\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      converters?: Array<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      initialValue?: Array<PortableTextBlock>\n    },\n    tags: {} as 'dragging internally',\n  },\n  actions: {\n    'add behavior to context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'add behavior')\n\n        return new Set([...context.behaviors, event.behaviorConfig])\n      },\n    }),\n    'remove behavior from context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'remove behavior')\n\n        context.behaviors.delete(event.behaviorConfig)\n\n        return new Set([...context.behaviors])\n      },\n    }),\n    'emit patch event': enqueueActions(({event, enqueue}) => {\n      assertEvent(event, 'internal.patch')\n\n      enqueue.emit(event)\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['internal.patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'defer incoming patches': assign({\n      pendingIncomingPatchesEvents: ({context, event}) => {\n        return event.type === 'patches'\n          ? [...context.pendingIncomingPatchesEvents, event]\n          : context.pendingIncomingPatchesEvents\n      },\n    }),\n    'emit pending incoming patches': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingIncomingPatchesEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'clear pending incoming patches': assign({\n      pendingIncomingPatchesEvents: [],\n    }),\n    'handle blur': ({event}) => {\n      assertEvent(event, 'blur')\n\n      try {\n        ReactEditor.blur(event.editor)\n      } catch (error) {\n        console.error(new Error(`Failed to blur editor: ${error.message}`))\n      }\n    },\n    'handle focus': ({context}) => {\n      if (!context.slateEditor) {\n        console.error('No Slate editor found to focus')\n        return\n      }\n\n      try {\n        const currentSelection = context.slateEditor.selection\n        ReactEditor.focus(context.slateEditor)\n        if (currentSelection) {\n          Transforms.select(context.slateEditor, currentSelection)\n        }\n      } catch (error) {\n        console.error(new Error(`Failed to focus editor: ${error.message}`))\n      }\n    },\n    'handle behavior event': ({context, event, self}) => {\n      assertEvent(event, ['behavior event'])\n\n      try {\n        const behaviors = sortByPriority([\n          ...context.behaviors.values(),\n          ...coreBehaviorsConfig,\n        ]).map((config) => config.behavior)\n\n        performEvent({\n          mode: 'raise',\n          behaviors,\n          remainingEventBehaviors: behaviors,\n          event: event.behaviorEvent,\n          editor: event.editor,\n          keyGenerator: context.keyGenerator,\n          schema: context.schema,\n          getSnapshot: () =>\n            createEditorSnapshot({\n              converters: [...context.converters],\n              editor: event.editor,\n              keyGenerator: context.keyGenerator,\n              readOnly: self.getSnapshot().matches({'edit mode': 'read only'}),\n              schema: context.schema,\n              hasTag: (tag) => self.getSnapshot().hasTag(tag),\n              internalDrag: context.internalDrag,\n            }),\n          nativeEvent: event.nativeEvent,\n        })\n      } catch (error) {\n        console.error(\n          new Error(\n            `Raising \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n    },\n  },\n  guards: {\n    'slate is busy': ({context}) => {\n      if (!context.slateEditor) {\n        return false\n      }\n\n      return context.slateEditor.operations.length > 0\n    },\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: new Set([]),\n    converters: new Set(input.converters ?? []),\n    getLegacySchema: input.getLegacySchema,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    pendingIncomingPatchesEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    initialValue: input.initialValue,\n  }),\n  on: {\n    'add behavior': {actions: 'add behavior to context'},\n    'remove behavior': {actions: 'remove behavior from context'},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n    'update selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => ({...event, type: 'selection'})),\n      ],\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          on: {\n            'behavior event': {\n              actions: 'handle behavior event',\n              guard: ({event}) =>\n                event.behaviorEvent.type === 'clipboard.copy' ||\n                event.behaviorEvent.type === 'mouse.click' ||\n                event.behaviorEvent.type === 'serialize' ||\n                event.behaviorEvent.type === 'serialization.failure' ||\n                event.behaviorEvent.type === 'serialization.success' ||\n                event.behaviorEvent.type === 'select',\n            },\n          },\n          states: {\n            'determine initial edit mode': {\n              entry: [\n                () => {\n                  debug(\n                    'entry: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              exit: [\n                () => {\n                  debug(\n                    'exit: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              on: {\n                'done syncing value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->read only->read only')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->read only->read only')\n                },\n              ],\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: 'handle behavior event',\n            },\n            'blur': {\n              actions: 'handle blur',\n            },\n            'focus': {\n              target: '.focusing',\n              actions: [assign({slateEditor: ({event}) => event.editor})],\n            },\n          },\n          initial: 'idle',\n          states: {\n            'idle': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->idle')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable-idle')\n                },\n              ],\n              on: {\n                dragstart: {\n                  actions: [\n                    assign({\n                      internalDrag: ({event}) => ({\n                        ghost: event.ghost,\n                        origin: event.origin,\n                      }),\n                    }),\n                  ],\n                  target: 'dragging internally',\n                },\n              },\n            },\n            'focusing': {\n              initial: 'checking if busy',\n              states: {\n                'checking if busy': {\n                  entry: [\n                    () => {\n                      debug(\n                        'entry: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug(\n                        'exit: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  always: [\n                    {\n                      guard: 'slate is busy',\n                      target: 'busy',\n                    },\n                    {\n                      target: '#editor.edit mode.editable.idle',\n                      actions: ['handle focus'],\n                    },\n                  ],\n                },\n                'busy': {\n                  entry: [\n                    () => {\n                      debug('entry: edit mode->editable->focusing-busy')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: edit mode->editable->focusing->busy')\n                    },\n                  ],\n                  after: {\n                    10: {\n                      target: 'checking if busy',\n                    },\n                  },\n                },\n              },\n            },\n            'dragging internally': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->dragging internally')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable->dragging internally')\n                },\n                ({context}) => {\n                  if (context.internalDrag?.ghost) {\n                    try {\n                      context.internalDrag.ghost.parentNode?.removeChild(\n                        context.internalDrag.ghost,\n                      )\n                    } catch (error) {\n                      console.error(\n                        new Error(\n                          `Removing the internal drag ghost failed due to: ${error.message}`,\n                        ),\n                      )\n                    }\n                  }\n                },\n                assign({internalDrag: undefined}),\n              ],\n              tags: ['dragging internally'],\n              on: {\n                dragend: {target: 'idle'},\n                drop: {target: 'idle'},\n              },\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          entry: [\n            () => {\n              debug('entry: setup->setting up')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: setup->setting up')\n            },\n            'emit ready',\n            'emit pending incoming patches',\n            'clear pending incoming patches',\n          ],\n          on: {\n            'internal.patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing value': {\n              target: 'set up',\n            },\n            'patches': {\n              actions: ['defer incoming patches'],\n            },\n          },\n        },\n        'set up': {\n          type: 'parallel',\n          states: {\n            'value sync': {\n              initial: 'idle',\n              states: {\n                'idle': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->idle')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->idle')\n                    },\n                  ],\n                  on: {\n                    'patches': {\n                      actions: [emit(({event}) => event)],\n                    },\n                    'syncing value': {\n                      target: 'syncing value',\n                    },\n                  },\n                },\n                'syncing value': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->syncing value')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->syncing value')\n                    },\n                    'emit pending incoming patches',\n                    'clear pending incoming patches',\n                  ],\n                  on: {\n                    'patches': {\n                      actions: ['defer incoming patches'],\n                    },\n                    'done syncing value': {\n                      target: 'idle',\n                    },\n                  },\n                },\n              },\n            },\n            'writing': {\n              initial: 'pristine',\n              states: {\n                pristine: {\n                  initial: 'idle',\n                  states: {\n                    idle: {\n                      entry: [\n                        () => {\n                          debug('entry: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug('exit: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      on: {\n                        'normalizing': {\n                          target: 'normalizing',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                      },\n                    },\n                    normalizing: {\n                      entry: [\n                        () => {\n                          debug(\n                            'entry: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug(\n                            'exit: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      on: {\n                        'done normalizing': {\n                          target: 'idle',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                        },\n                      },\n                    },\n                  },\n                },\n                dirty: {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->writing->dirty')\n                    },\n                    'emit pending events',\n                    'clear pending events',\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->writing->dirty')\n                    },\n                  ],\n                  on: {\n                    'internal.patch': {\n                      actions: 'emit patch event',\n                    },\n                    'mutation': {\n                      actions: 'emit mutation event',\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function createLegacySchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): PortableTextMemberSchemaTypes {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {defineField, defineType, type ObjectSchemaType} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createLegacySchema} from './legacy-schema'\n\n/**\n * @public\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n}\n\nexport type FieldDefinition = {\n  name: string\n  type: 'string' | 'number' | 'boolean' | 'array' | 'object'\n}\n\n/**\n * @public\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  inlineObjects?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  annotations?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @public\n * A helper wrapper that adds editor support, such as autocomplete and type checking, for a schema definition.\n * @example\n * ```ts\n * import { defineSchema } from '@portabletext/editor'\n *\n * const schemaDefinition = defineSchema({\n *  decorators: [{name: 'strong'}, {name: 'em'}, {name: 'underline'}],\n *  annotations: [{name: 'link'}],\n *  styles: [\n *    {name: 'normal'},\n *    {name: 'h1'},\n *    {name: 'h2'},\n *    {name: 'h3'},\n *    {name: 'blockquote'},\n *  ],\n *  lists: [],\n *  inlineObjects: [],\n *  blockObjects: [],\n * }\n * ```\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\nconst temporaryImageName = `tmp-${defaultKeyGenerator()}-image`\nconst temporaryUrlName = `tmp-${defaultKeyGenerator()}-url`\n\nconst temporaryObjectNames: Record<string, string> = {\n  image: temporaryImageName,\n  url: temporaryUrlName,\n}\n\nconst objectNames: Record<string, string> = {\n  [temporaryImageName]: 'image',\n  [temporaryUrlName]: 'url',\n}\n\nconst defaultObjectTitles: Record<string, string> = {\n  image: 'Image',\n  url: 'URL',\n}\n\n/**\n * @public\n */\nexport type EditorSchema = {\n  annotations: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  block: {\n    name: string\n  }\n  blockObjects: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  decorators: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n  inlineObjects: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  span: {\n    name: string\n  }\n  styles: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n  lists: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n}\n\nexport function legacySchemaToEditorSchema(\n  schema: PortableTextMemberSchemaTypes,\n): EditorSchema {\n  return {\n    annotations: schema.annotations.map((annotation) => ({\n      name: annotation.name,\n      fields: annotation.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: annotation.title,\n    })),\n    block: {\n      name: schema.block.name,\n    },\n    blockObjects: schema.blockObjects.map((blockObject) => ({\n      name: blockObject.name,\n      fields: blockObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: blockObject.title,\n    })),\n    decorators: schema.decorators.map((decorator) => ({\n      name: decorator.value,\n      title: decorator.title,\n      value: decorator.value,\n    })),\n    inlineObjects: schema.inlineObjects.map((inlineObject) => ({\n      name: inlineObject.name,\n      fields: inlineObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: inlineObject.title,\n    })),\n    span: {\n      name: schema.span.name,\n    },\n    styles: schema.styles.map((style) => ({\n      name: style.value,\n      title: style.title,\n      value: style.value,\n    })),\n    lists: schema.lists.map((list) => ({\n      name: list.value,\n      title: list.title,\n      value: list.value,\n    })),\n  }\n}\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition: TSchemaDefinition): EditorSchema {\n  return legacySchemaToEditorSchema(\n    compileSchemaDefinitionToLegacySchema(definition),\n  )\n}\n\nexport function compileSchemaDefinitionToLegacySchema<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition): PortableTextMemberSchemaTypes {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with certain names.\n        name: temporaryObjectNames[blockObject.name] ?? blockObject.name,\n        title:\n          blockObject.title === undefined\n            ? // This avoids the default title which is a title case of the object name\n              defaultObjectTitles[blockObject.name]\n            : blockObject.title,\n        fields:\n          blockObject.fields?.map((field) => ({\n            name: field.name,\n            type: field.type,\n          })) ?? [],\n      }),\n    ) ?? []\n\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with certain names.\n        name: temporaryObjectNames[inlineObject.name] ?? inlineObject.name,\n\n        title:\n          inlineObject.title === undefined\n            ? // This avoids the default title which is a title case of the object name\n              defaultObjectTitles[inlineObject.name]\n            : inlineObject.title,\n        fields:\n          inlineObject.fields?.map((field) => ({\n            name: field.name,\n            type: field.type,\n          })) ?? [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n              fields:\n                annotation.fields?.map((field) => ({\n                  name: field.name,\n                  type: field.type,\n                })) ?? [],\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createLegacySchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      objectNames[blockObject.name] !== undefined\n        ? ({\n            ...blockObject,\n            name: objectNames[blockObject.name],\n            type: {\n              ...blockObject.type,\n              name: objectNames[blockObject.name],\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n    inlineObjects: pteSchema.inlineObjects.map((inlineObject) =>\n      objectNames[inlineObject.name] !== undefined\n        ? ({\n            ...inlineObject,\n            name: objectNames[inlineObject.name],\n          } as ObjectSchemaType)\n        : inlineObject,\n    ),\n  } satisfies PortableTextMemberSchemaTypes\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport type {ActorRefFrom} from 'xstate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  fromCallback,\n  not,\n  setup,\n  stateIn,\n  type AnyEventObject,\n} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport type {PatchEvent} from './relay-machine'\n\nconst debug = debugWithName('mutation-machine')\n\nexport type MutationActor = ActorRefFrom<typeof mutationMachine>\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingMutations: Array<{\n        operationId?: string\n        value: Array<PortableTextBlock> | undefined\n        patches: Array<Patch>\n      }>\n      pendingPatchEvents: Array<PatchEvent>\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'mutation delay passed'\n        }\n      | {\n          type: 'patch'\n          patch: Patch\n          operationId?: string\n          value: Array<PortableTextBlock>\n        }\n      | {\n          type: 'typing'\n        }\n      | {\n          type: 'not typing'\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        },\n    input: {} as {\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        }\n      | PatchEvent,\n  },\n  actions: {\n    'assign readOnly': assign({\n      readOnly: ({context, event}) =>\n        event.type === 'update readOnly' ? event.readOnly : context.readOnly,\n    }),\n    'emit patch': enqueueActions(({event, enqueue}) => {\n      if (event.type === 'patch') {\n        enqueue.emit({type: 'patch', patch: event.patch})\n      }\n    }),\n    'emit has pending mutations': emit({type: 'has pending mutations'}),\n    'emit mutations': enqueueActions(({context, enqueue}) => {\n      for (const bulk of context.pendingMutations) {\n        enqueue.emit({\n          type: 'mutation',\n          patches: bulk.patches,\n          snapshot: bulk.value,\n        })\n      }\n    }),\n    'clear pending mutations': assign({\n      pendingMutations: [],\n    }),\n    'defer mutation': assign({\n      pendingMutations: ({context, event}) => {\n        assertEvent(event, 'patch')\n\n        if (context.pendingMutations.length === 0) {\n          return [\n            {\n              operationId: event.operationId,\n              value: event.value,\n              patches: [event.patch],\n            },\n          ]\n        }\n\n        const lastBulk = context.pendingMutations.at(-1)\n\n        if (lastBulk && lastBulk.operationId === event.operationId) {\n          return context.pendingMutations.slice(0, -1).concat({\n            value: event.value,\n            operationId: lastBulk.operationId,\n            patches: [...lastBulk.patches, event.patch],\n          })\n        }\n\n        return context.pendingMutations.concat({\n          value: event.value,\n          operationId: event.operationId,\n          patches: [event.patch],\n        })\n      },\n    }),\n    'clear pending patch events': assign({\n      pendingPatchEvents: [],\n    }),\n    'defer patch': assign({\n      pendingPatchEvents: ({context, event}) =>\n        event.type === 'patch'\n          ? [...context.pendingPatchEvents, event]\n          : context.pendingPatchEvents,\n    }),\n    'emit pending patch events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingPatchEvents) {\n        enqueue.emit(event)\n      }\n    }),\n  },\n  actors: {\n    'type listener': fromCallback<\n      AnyEventObject,\n      {slateEditor: PortableTextSlateEditor},\n      {type: 'typing'} | {type: 'not typing'}\n    >(({input, sendBack}) => {\n      const originalApply = input.slateEditor.apply\n\n      input.slateEditor.apply = (op) => {\n        if (op.type === 'insert_text' || op.type === 'remove_text') {\n          sendBack({type: 'typing'})\n        } else {\n          sendBack({type: 'not typing'})\n        }\n        originalApply(op)\n      }\n\n      return () => {\n        input.slateEditor.apply = originalApply\n      }\n    }),\n    'mutation debouncer': fromCallback(({sendBack}) => {\n      const interval = setInterval(\n        () => {\n          sendBack({type: 'mutation delay passed'})\n        },\n        process.env.NODE_ENV === 'test' ? 250 : 0,\n      )\n\n      return () => {\n        clearInterval(interval)\n      }\n    }),\n  },\n  guards: {\n    'is read-only': ({context}) => context.readOnly,\n    'is typing': stateIn({typing: 'typing'}),\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n  delays: {\n    'type debounce': process.env.NODE_ENV === 'test' ? 0 : 250,\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingMutations: [],\n    pendingPatchEvents: [],\n    readOnly: input.readOnly,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  on: {\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    typing: {\n      initial: 'idle',\n      invoke: {\n        src: 'type listener',\n        input: ({context}) => ({slateEditor: context.slateEditor}),\n      },\n      states: {\n        idle: {\n          entry: [\n            () => {\n              debug('entry: typing->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: typing->idle')\n              debug('entry: typing->typing')\n            },\n          ],\n          on: {\n            typing: {\n              target: 'typing',\n            },\n          },\n        },\n        typing: {\n          after: {\n            'type debounce': {\n              target: 'idle',\n              actions: [\n                () => {\n                  debug('exit: typing->typing')\n                },\n              ],\n            },\n          },\n          on: {\n            'not typing': {\n              target: 'idle',\n            },\n            'typing': {\n              target: 'typing',\n              reenter: true,\n            },\n          },\n        },\n      },\n    },\n    mutations: {\n      initial: 'idle',\n      states: {\n        'idle': {\n          entry: [\n            () => {\n              debug('entry: mutations->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->idle')\n            },\n          ],\n          on: {\n            patch: [\n              {\n                guard: 'is read-only',\n                actions: ['defer patch', 'defer mutation'],\n                target: 'has pending mutations',\n              },\n              {\n                actions: ['emit patch', 'defer mutation'],\n                target: 'has pending mutations',\n              },\n            ],\n          },\n        },\n        'has pending mutations': {\n          entry: [\n            () => {\n              debug('entry: mutations->has pending mutations')\n            },\n            'emit has pending mutations',\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->has pending mutations')\n            },\n          ],\n          invoke: {\n            src: 'mutation debouncer',\n          },\n          on: {\n            'mutation delay passed': {\n              guard: and([\n                not('is read-only'),\n                not('is typing'),\n                'slate is normalizing',\n              ]),\n              target: 'idle',\n              actions: [\n                'emit pending patch events',\n                'clear pending patch events',\n                'emit mutations',\n                'clear pending mutations',\n              ],\n            },\n            'patch': [\n              {\n                guard: 'is read-only',\n                actions: ['defer patch', 'defer mutation'],\n              },\n              {\n                actions: ['emit patch', 'defer mutation'],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n})\n","import {\n  isPortableTextSpan,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {toSlateRange} from '../../internal-utils/ranges'\nimport {\n  isListItemActive,\n  isStyleActive,\n  slateRangeToSelection,\n} from '../../internal-utils/slate-utils'\nimport {fromSlateValue, toSlateValue} from '../../internal-utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../internal-utils/weakMaps'\nimport {addAnnotationOperationImplementation} from '../../operations/behavior.operation.annotation.add'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'focus',\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'blur',\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      return snapshot.beta.activeDecorators.includes(mark)\n    },\n    marks: (): string[] => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      return [\n        ...snapshot.beta.activeAnnotations,\n        ...snapshot.beta.activeDecorators,\n      ]\n    },\n    undo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n    },\n    redo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n    },\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return editor.selection\n          ? (slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor,\n              range: editor.selection,\n            })?.focus.path ?? [])\n          : []\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block',\n          block: {\n            _type: type.name,\n            ...(value ? value : {}),\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      return isAnnotationActive({editor, annotation: {name: annotationType}})\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          operation: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection,\n        })\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n\nfunction isAnnotationActive({\n  editor,\n  annotation,\n}: {\n  editor: PortableTextSlateEditor\n  annotation: {\n    name: string\n  }\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2) {\n    return false\n  }\n\n  try {\n    const spans = [\n      ...Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => Text.isText(node),\n      }),\n    ]\n\n    if (spans.length === 0) {\n      return false\n    }\n\n    if (\n      spans.some(\n        ([span]) =>\n          !isPortableTextSpan(span) || !span.marks || span.marks?.length === 0,\n      )\n    )\n      return false\n\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = Editor.node(editor, path, {depth: 1})\n      if (editor.isTextBlock(block) && block.markDefs) {\n        return [...accMarkDefs, ...block.markDefs]\n      }\n      return accMarkDefs\n    }, [] as PortableTextObject[])\n\n    return spans.every(([span]) => {\n      if (!isPortableTextSpan(span)) return false\n\n      const spanMarkDefs = span.marks?.map(\n        (markKey) =>\n          selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n      )\n\n      return spanMarkDefs?.includes(annotation.name)\n    })\n  } catch {\n    return false\n  }\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {emit, setup, type ActorRefFrom} from 'xstate'\nimport type {EditorSelection, InvalidValueResolution} from '../types/editor'\n\n/**\n * @public\n */\nexport type EditorEmittedEvent =\n  | {\n      type: 'blurred'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      /**\n       * @deprecated\n       */\n      type: 'done loading'\n    }\n  | {\n      type: 'editable'\n    }\n  | ErrorEvent\n  | {\n      type: 'focused'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      /**\n       * @deprecated\n       */\n      type: 'loading'\n    }\n  | MutationEvent\n  | PatchEvent\n  | {\n      type: 'read only'\n    }\n  | {\n      type: 'ready'\n    }\n  | {\n      type: 'selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n\n/**\n * @deprecated The event is no longer emitted\n */\ntype ErrorEvent = {\n  type: 'error'\n  name: string\n  description: string\n  data: unknown\n}\n\nexport type InternalEditorEmittedEvent = EditorEmittedEvent | UnsetEvent\n\n/**\n * @public\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\nexport type PatchEvent = {\n  type: 'patch'\n  patch: Patch\n}\n\nexport type UnsetEvent = {\n  /**\n   * @deprecated Use `'patch'` events instead\n   */\n  type: 'unset'\n  previousValue: Array<PortableTextBlock>\n}\n\nexport type RelayActor = ActorRefFrom<typeof relayMachine>\n\nexport const relayMachine = setup({\n  types: {\n    events: {} as InternalEditorEmittedEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n  },\n}).createMachine({\n  id: 'relay',\n  on: {\n    '*': {\n      actions: emit(({event}) => event),\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport type {\n  PortableTextBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {InvalidValueResolution} from '../types/editor'\nimport {isTextBlock} from './parse-blocks'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: EditorSchema,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isTextBlock({schema: types}, {...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.name).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  not,\n  raise,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport type {ActorRefFrom} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport {validateValue} from '../internal-utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../internal-utils/values'\nimport {\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../internal-utils/withChanges'\nimport {withoutPatching} from '../internal-utils/withoutPatching'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\nconst debug = debugWithName('sync machine')\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\nexport type SyncActor = ActorRefFrom<typeof syncMachine>\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing value'}\n      | {type: 'syncing value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing value': emit({\n      type: 'done syncing value',\n    }),\n    'emit syncing value': emit({\n      type: 'syncing value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      const editable = !context.readOnly\n      const isProcessingLocalChanges = context.isProcessingLocalChanges\n      const isChanging = isChangingRemotely(context.slateEditor) ?? false\n      const isBusy = editable && (isProcessingLocalChanges || isChanging)\n\n      debug('isBusy', {isBusy, editable, isProcessingLocalChanges, isChanging})\n\n      return isBusy\n    },\n    'is empty value': ({event}) => {\n      return event.type === 'update value' && event.value === undefined\n    },\n    'is empty array': ({event}) => {\n      return (\n        event.type === 'update value' &&\n        Array.isArray(event.value) &&\n        event.value.length === 0\n      )\n    },\n    'is new value': ({context, event}) => {\n      return (\n        event.type === 'update value' && context.previousValue !== event.value\n      )\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) => {\n      return isEqual(context.pendingValue, context.previousValue)\n    },\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValue: input.initialValue,\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  entry: [\n    raise(({context}) => {\n      return {type: 'update value', value: context.initialValue}\n    }),\n  ],\n  on: {\n    'has pending mutations': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'idle',\n  states: {\n    idle: {\n      entry: [\n        () => {\n          debug('entry: syncing->idle')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->idle')\n        },\n      ],\n      on: {\n        'update value': [\n          {\n            guard: and(['is empty value', not('initial value synced')]),\n            actions: ['assign initial value synced', 'emit done syncing value'],\n          },\n          {\n            guard: and(['is empty array', not('initial value synced')]),\n            actions: [\n              'assign initial value synced',\n              emit({type: 'value changed', value: []}),\n              'emit done syncing value',\n            ],\n          },\n          {\n            guard: and(['is busy', 'is new value']),\n            target: 'busy',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: 'is new value',\n            target: 'syncing',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: not('initial value synced'),\n            actions: [\n              () => {\n                debug('no new value – setting initial value as synced')\n              },\n              'assign initial value synced',\n              'emit done syncing value',\n            ],\n          },\n          {\n            actions: [\n              () => {\n                debug('no new value and initial value already synced')\n              },\n            ],\n          },\n        ],\n      },\n    },\n    busy: {\n      entry: [\n        () => {\n          debug('entry: syncing->busy')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->busy')\n        },\n      ],\n      after: {\n        1000: [\n          {\n            guard: 'is busy',\n            target: '.',\n            reenter: true,\n            actions: [\n              () => {\n                debug('reenter: syncing->busy')\n              },\n            ],\n          },\n          {\n            target: 'syncing',\n          },\n        ],\n      },\n      on: {\n        'update value': [\n          {\n            guard: 'is new value',\n            actions: ['assign pending value'],\n          },\n        ],\n      },\n    },\n    syncing: {\n      entry: [\n        () => {\n          debug('entry: syncing->syncing')\n        },\n        'emit syncing value',\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->syncing')\n        },\n        'emit done syncing value',\n      ],\n      invoke: {\n        src: 'sync value',\n        id: 'sync value',\n        input: ({context}) => {\n          return {\n            context: {\n              keyGenerator: context.keyGenerator,\n              previousValue: context.previousValue,\n              readOnly: context.readOnly,\n              schema: context.schema,\n            },\n            slateEditor: context.slateEditor,\n            streamBlocks: !context.initialValueSynced,\n            value: context.pendingValue,\n          }\n        },\n      },\n      on: {\n        'update value': {\n          guard: 'is new value',\n          actions: ['assign pending value'],\n        },\n        'patch': {\n          actions: [emit(({event}) => event)],\n        },\n        'invalid value': {\n          actions: [emit(({event}) => event)],\n        },\n        'value changed': {\n          actions: [emit(({event}) => event)],\n        },\n        'done syncing': [\n          {\n            guard: 'value changed while syncing',\n            actions: ['assign previous value', 'assign initial value synced'],\n            target: 'syncing',\n            reenter: true,\n          },\n          {\n            target: 'idle',\n            actions: [\n              'clear pending value',\n              'assign previous value',\n              'assign initial value synced',\n            ],\n          },\n        ],\n      },\n    },\n  },\n})\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let doneSyncing = false\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            if (hadSelection) {\n              Transforms.deselect(slateEditor)\n            }\n\n            const childrenLength = slateEditor.children.length\n\n            slateEditor.children.forEach((_, index) => {\n              Transforms.removeNodes(slateEditor, {\n                at: [childrenLength - 1 - index],\n              })\n            })\n\n            Transforms.insertNodes(\n              slateEditor,\n              slateEditor.pteCreateTextBlock({decorators: []}),\n              {at: [0]},\n            )\n\n            // Add a new selection in the top of the document\n            if (hadSelection) {\n              Transforms.select(slateEditor, [0, 0])\n            }\n          })\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    if (streamBlocks) {\n      await new Promise<void>((resolve) => {\n        Editor.withoutNormalizing(slateEditor, () => {\n          withRemoteChanges(slateEditor, () => {\n            withoutPatching(slateEditor, () => {\n              if (doneSyncing) {\n                resolve()\n                return\n              }\n\n              isChanged = removeExtraBlocks({\n                slateEditor,\n                slateValueFromProps,\n              })\n\n              const processBlocks = async () => {\n                for await (const [\n                  currentBlock,\n                  currentBlockIndex,\n                ] of getStreamedBlocks({\n                  slateValue: slateValueFromProps,\n                })) {\n                  const {blockChanged, blockValid} = syncBlock({\n                    context,\n                    sendBack,\n                    block: currentBlock,\n                    index: currentBlockIndex,\n                    slateEditor,\n                    value,\n                  })\n\n                  isChanged = blockChanged || isChanged\n                  isValid = isValid && blockValid\n                }\n\n                resolve()\n              }\n\n              processBlocks()\n            })\n          })\n        })\n      })\n    } else {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            isChanged = removeExtraBlocks({\n              slateEditor,\n              slateValueFromProps,\n            })\n\n            let index = 0\n\n            for (const currentBlock of slateValueFromProps) {\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index,\n                slateEditor,\n                value,\n              })\n\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n              index++\n            }\n          })\n        })\n      })\n    }\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    doneSyncing = true\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      doneSyncing = true\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  doneSyncing = true\n  sendBack({type: 'done syncing', value})\n}\n\nfunction removeExtraBlocks({\n  slateEditor,\n  slateValueFromProps,\n}: {\n  slateEditor: PortableTextSlateEditor\n  slateValueFromProps: Array<Descendant>\n}) {\n  let isChanged = false\n  const childrenLength = slateEditor.children.length\n\n  // Remove blocks that have become superfluous\n  if (slateValueFromProps.length < childrenLength) {\n    for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--) {\n      Transforms.removeNodes(slateEditor, {\n        at: [i],\n      })\n    }\n    isChanged = true\n  }\n  return isChanged\n}\n\nasync function* getStreamedBlocks({\n  slateValue,\n}: {\n  slateValue: Array<Descendant>\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (index % 10 === 0) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              if (oldBlockChild.text.length > 0) {\n                Transforms.delete(slateEditor, {\n                  at: {\n                    focus: {path, offset: 0},\n                    anchor: {path, offset: oldBlockChild.text.length},\n                  },\n                })\n              }\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {createActor} from 'xstate'\nimport {createCoreConverters} from '../converters/converters.core'\nimport type {Editor, EditorConfig} from '../editor'\nimport {debugWithName} from '../internal-utils/debug'\nimport {compileType} from '../internal-utils/schema'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport type {EditableAPI, PortableTextSlateEditor} from '../types/editor'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport type {EditorActor} from './editor-machine'\nimport {editorMachine} from './editor-machine'\nimport {\n  compileSchemaDefinitionToLegacySchema,\n  legacySchemaToEditorSchema,\n} from './editor-schema'\nimport {getEditorSnapshot} from './editor-selector'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createLegacySchema} from './legacy-schema'\nimport {mutationMachine, type MutationActor} from './mutation-machine'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\nimport {relayMachine, type RelayActor} from './relay-machine'\nimport {syncMachine, type SyncActor} from './sync-machine'\n\nconst debug = debugWithName('setup')\n\nexport type InternalEditor = Editor & {\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createInternalEditor(config: EditorConfig): {\n  actors: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n  editor: InternalEditor\n  subscriptions: Array<() => () => void>\n} {\n  debug('Creating new Editor instance')\n\n  const subscriptions: Array<() => () => void> = []\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  const relayActor = createActor(relayMachine)\n  const slateEditor = createSlateEditor({\n    editorActor,\n    relayActor,\n    subscriptions,\n  })\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n  const {mutationActor, syncActor} = createActors({\n    editorActor,\n    relayActor,\n    slateEditor: slateEditor.instance,\n    subscriptions,\n  })\n\n  const editor = {\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    registerBehavior: (behaviorConfig) => {\n      const priority = createEditorPriority({\n        name: 'custom',\n        reference: {\n          priority: corePriority,\n          importance: 'higher',\n        },\n      })\n      const behaviorConfigWithPriority = {\n        ...behaviorConfig,\n        priority,\n      }\n\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig: behaviorConfigWithPriority,\n      })\n\n      return () => {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig: behaviorConfigWithPriority,\n        })\n      }\n    },\n    send: (event) => {\n      switch (event.type) {\n        case 'update value':\n          syncActor.send(event)\n          break\n\n        case 'update readOnly':\n        case 'patches':\n        case 'update maxBlocks':\n          editorActor.send(event)\n          break\n\n        case 'blur':\n          editorActor.send({\n            type: 'blur',\n            editor: slateEditor.instance,\n          })\n          break\n\n        case 'focus':\n          editorActor.send({\n            type: 'focus',\n            editor: slateEditor.instance,\n          })\n          break\n\n        case 'insert.block object':\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: {\n              type: 'insert.block',\n              block: {\n                _type: event.blockObject.name,\n                ...(event.blockObject.value ?? {}),\n              },\n              placement: event.placement,\n            },\n            editor: slateEditor.instance,\n          })\n          break\n\n        default:\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: event,\n            editor: slateEditor.instance,\n          })\n      }\n    },\n    on: (event, listener) => {\n      const subscription = relayActor.on(event, (event) => {\n        switch (event.type) {\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n            listener(event)\n            break\n        }\n      })\n\n      return subscription\n    },\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  } satisfies InternalEditor\n\n  return {\n    actors: {\n      editorActor,\n      mutationActor,\n      relayActor,\n      syncActor,\n    },\n    editor,\n    subscriptions,\n  }\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  const {legacySchema, schema} = compileSchemasFromEditorConfig(config)\n\n  return {\n    converters: createCoreConverters(legacySchema),\n    getLegacySchema: () => legacySchema,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema,\n    initialValue: config.initialValue,\n  } as const\n}\n\nfunction compileSchemasFromEditorConfig(config: EditorConfig) {\n  const legacySchema = config.schemaDefinition\n    ? compileSchemaDefinitionToLegacySchema(config.schemaDefinition)\n    : createLegacySchema(\n        config.schema.hasOwnProperty('jsonType')\n          ? config.schema\n          : compileType(config.schema),\n      )\n  const schema = legacySchemaToEditorSchema(legacySchema)\n\n  return {\n    legacySchema,\n    schema,\n  }\n}\n\nfunction createActors(config: {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  slateEditor: PortableTextSlateEditor\n  subscriptions: Array<() => () => void>\n}): {\n  mutationActor: MutationActor\n  syncActor: SyncActor\n} {\n  debug('Creating new Actors')\n\n  const mutationActor = createActor(mutationMachine, {\n    input: {\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  const syncActor = createActor(syncMachine, {\n    input: {\n      initialValue: config.editorActor.getSnapshot().context.initialValue,\n      keyGenerator: config.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = mutationActor.on('*', (event) => {\n      if (event.type === 'has pending mutations') {\n        syncActor.send({type: 'has pending mutations'})\n      }\n      if (event.type === 'mutation') {\n        syncActor.send({type: 'mutation'})\n        config.editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n      if (event.type === 'patch') {\n        config.relayActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = syncActor.on('*', (event) => {\n      switch (event.type) {\n        case 'invalid value':\n          config.relayActor.send(event)\n          break\n        case 'value changed':\n          config.relayActor.send(event)\n          break\n        case 'patch':\n          config.editorActor.send({\n            ...event,\n            type: 'internal.patch',\n            value: fromSlateValue(\n              config.slateEditor.children,\n              config.editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(config.slateEditor),\n            ),\n          })\n          break\n\n        default:\n          config.editorActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.subscribe((snapshot) => {\n      if (snapshot.matches({'edit mode': 'read only'})) {\n        mutationActor.send({type: 'update readOnly', readOnly: true})\n        syncActor.send({type: 'update readOnly', readOnly: true})\n      } else {\n        mutationActor.send({type: 'update readOnly', readOnly: false})\n        syncActor.send({type: 'update readOnly', readOnly: false})\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'editable':\n        case 'mutation':\n        case 'ready':\n        case 'read only':\n        case 'selection':\n          config.relayActor.send(event)\n          break\n        case 'internal.patch':\n          mutationActor.send({...event, type: 'patch'})\n          break\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  return {\n    mutationActor,\n    syncActor,\n  }\n}\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {EditorSelection} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import {createContext} from 'react'\nimport type {RelayActor} from './relay-machine'\n\nexport const RelayActorContext = createContext<RelayActor>({} as RelayActor)\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorChange} from '../types/editor'\nimport type {InternalEditorEmittedEvent, RelayActor} from './relay-machine'\n\nexport function RouteEventsToChanges(props: {\n  relayActor: RelayActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    const sub = props.relayActor.on('*', (event) => {\n      const change = eventToChange(event)\n\n      if (change) {\n        handleChange(change)\n      }\n    })\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [props.relayActor])\n\n  return null\n}\n\nexport function eventToChange(\n  event: InternalEditorEmittedEvent,\n): EditorChange | undefined {\n  switch (event.type) {\n    case 'blurred': {\n      return {type: 'blur', event: event.event}\n    }\n    case 'patch':\n      return event\n    case 'loading': {\n      return {type: 'loading', isLoading: true}\n    }\n    case 'done loading': {\n      return {type: 'loading', isLoading: false}\n    }\n    case 'focused': {\n      return {type: 'focus', event: event.event}\n    }\n    case 'value changed': {\n      return {type: 'value', value: event.value}\n    }\n    case 'invalid value': {\n      return {\n        type: 'invalidValue',\n        resolution: event.resolution,\n        value: event.value,\n      }\n    }\n    case 'mutation': {\n      return event\n    }\n    case 'ready': {\n      return event\n    }\n    case 'selection': {\n      return event\n    }\n    case 'unset': {\n      return event\n    }\n  }\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport type {AddedAnnotationPaths} from '../operations/behavior.operation.annotation.add'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createInternalEditor, type InternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport type {MutationActor} from './mutation-machine'\nimport {RelayActorContext} from './relay-actor-context'\nimport type {RelayActor} from './relay-machine'\nimport {eventToChange} from './route-events-to-changes'\nimport type {SyncActor} from './sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends InternalEditor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends InternalEditor\n    ? {\n        /**\n         * @internal\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<InternalEditor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: InternalEditor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  private actors?: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n\n  private subscriptions: Array<() => () => void> = []\n  private unsubscribers: Array<() => void> = []\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as InternalEditor\n      this.schemaTypes = this.editor._internal.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    } else {\n      const {actors, editor, subscriptions} = createInternalEditor({\n        initialValue: props.value,\n        keyGenerator: props.keyGenerator,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n        schema: props.schemaType,\n      })\n\n      this.subscriptions = subscriptions\n      this.actors = actors\n\n      this.editor = editor\n      this.schemaTypes = actors.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    }\n\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidMount(): void {\n    if (!this.actors) {\n      return\n    }\n\n    for (const subscription of this.subscriptions) {\n      this.unsubscribers.push(subscription())\n    }\n\n    const relayActorSubscription = this.actors.relayActor.on('*', (event) => {\n      const change = eventToChange(event)\n\n      if (!change) {\n        return\n      }\n\n      if (!this.props.editor) {\n        this.props.onChange(change)\n      }\n\n      this.change$.next(change)\n    })\n\n    this.unsubscribers.push(relayActorSubscription.unsubscribe)\n\n    this.actors.editorActor.start()\n    this.actors.mutationActor.start()\n    this.actors.relayActor.start()\n    this.actors.syncActor.start()\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      console.warn('Updating schema type is no longer supported')\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  componentWillUnmount(): void {\n    for (const unsubscribe of this.unsubscribers) {\n      unsubscribe()\n    }\n\n    if (this.actors) {\n      stopActor(this.actors.editorActor)\n      stopActor(this.actors.mutationActor)\n      stopActor(this.actors.relayActor)\n      stopActor(this.actors.syncActor)\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <RelayActorContext.Provider value={this.actors!.relayActor}>\n            <Slate\n              editor={this.editor._internal.slateEditor.instance}\n              initialValue={this.editor._internal.slateEditor.initialValue}\n            >\n              <PortableTextEditorContext.Provider value={this}>\n                <PortableTextEditorSelectionProvider\n                  editorActor={this.editor._internal.editorActor}\n                >\n                  {this.props.children}\n                </PortableTextEditorSelectionProvider>\n              </PortableTextEditorContext.Provider>\n            </Slate>\n          </RelayActorContext.Provider>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    return editor.editable?.getFragment()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.undo',\n   * })\n   * ```\n   */\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.redo',\n   * })\n   * ```\n   */\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n","import {useSelector} from '@xstate/react'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {useSelected, useSlateStatic, type RenderLeafProps} from 'slate-react'\nimport type {\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nexport interface RenderSpanProps extends RenderLeafProps {\n  children: ReactElement<any>\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\nexport function RenderSpan(props: RenderSpanProps) {\n  const slateEditor = useSlateStatic()\n  const editorActor = useContext(EditorActorContext)\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n\n  const parent = props.children.props.parent\n  const block = parent && slateEditor.isTextBlock(parent) ? parent : undefined\n\n  const path = useMemo(\n    () =>\n      block\n        ? [{_key: block._key}, 'children', {_key: props.leaf._key}]\n        : undefined,\n    [block, props.leaf._key],\n  )\n\n  const decoratorSchemaTypes = editorActor\n    .getSnapshot()\n    .context.schema.decorators.map((decorator) => decorator.name)\n\n  const decorators = uniq(\n    (props.leaf.marks ?? []).filter((mark) =>\n      decoratorSchemaTypes.includes(mark),\n    ),\n  )\n\n  const annotationMarkDefs = (props.leaf.marks ?? []).flatMap((mark) => {\n    if (decoratorSchemaTypes.includes(mark)) {\n      return []\n    }\n\n    const markDef = block?.markDefs?.find((markDef) => markDef._key === mark)\n\n    if (markDef) {\n      return [markDef]\n    }\n\n    return []\n  })\n\n  const shouldTrackSelectionAndFocus =\n    annotationMarkDefs.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n\n    const winSelection = window.getSelection()\n\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blurred', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focused', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  let children = props.children\n\n  /**\n   * Support `renderDecorator` render function for each Decorator\n   */\n  for (const mark of decorators) {\n    const legacyDecoratorSchemaType = legacySchema.decorators.find(\n      (dec) => dec.value === mark,\n    )\n\n    if (path && legacyDecoratorSchemaType && props.renderDecorator) {\n      children = props.renderDecorator({\n        children: children,\n        editorElementRef: spanRef,\n        focused,\n        path,\n        selected,\n        schemaType: legacyDecoratorSchemaType,\n        value: mark,\n        type: legacyDecoratorSchemaType,\n      })\n    }\n  }\n\n  /**\n   * Support `renderAnnotation` render function for each Annotation\n   */\n  for (const annotationMarkDef of annotationMarkDefs) {\n    const legacyAnnotationSchemaType = legacySchema.annotations.find(\n      (t) => t.name === annotationMarkDef._type,\n    )\n    if (legacyAnnotationSchemaType) {\n      if (block && path && props.renderAnnotation) {\n        children = (\n          <span ref={spanRef}>\n            {props.renderAnnotation({\n              block,\n              children: children,\n              editorElementRef: spanRef,\n              focused,\n              path,\n              selected,\n              schemaType: legacyAnnotationSchemaType,\n              value: annotationMarkDef,\n              type: legacyAnnotationSchemaType,\n            })}\n          </span>\n        )\n      } else {\n        children = <span ref={spanRef}>{children}</span>\n      }\n    }\n  }\n\n  /**\n   * Support `renderChild` render function for the Span itself\n   */\n  if (block && path && props.renderChild) {\n    const child = block.children.find(\n      (_child) => _child._key === props.leaf._key,\n    ) // Ensure object equality\n\n    if (child) {\n      children = props.renderChild({\n        annotations: annotationMarkDefs,\n        children: children,\n        editorElementRef: spanRef,\n        focused,\n        path,\n        schemaType: legacySchema.span,\n        selected,\n        value: child,\n        type: legacySchema.span,\n      })\n    }\n  }\n\n  return (\n    <span {...props.attributes} ref={spanRef}>\n      {children}\n    </span>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport {useContext, type CSSProperties} from 'react'\nimport type {Text} from 'slate'\nimport type {RenderLeafProps} from 'slate-react'\nimport type {\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderPlaceholderFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderSpan} from './render-span'\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\nexport function RenderLeaf(\n  props: RenderLeafProps & {\n    leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n    readOnly: boolean\n    renderAnnotation?: RenderAnnotationFunction\n    renderChild?: RenderChildFunction\n    renderDecorator?: RenderDecoratorFunction\n    renderPlaceholder?: RenderPlaceholderFunction\n  },\n) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n\n  if (props.leaf._type !== schema.span.name) {\n    return props.children\n  }\n\n  let renderedSpan = <RenderSpan {...props} />\n\n  if (\n    props.renderPlaceholder &&\n    props.leaf.placeholder &&\n    props.text.text === ''\n  ) {\n    return (\n      <>\n        <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n          {props.renderPlaceholder()}\n        </span>\n        {renderedSpan}\n      </>\n    )\n  }\n\n  const rangeDecoration = props.leaf.rangeDecoration\n\n  if (rangeDecoration) {\n    renderedSpan = rangeDecoration.component({children: renderedSpan})\n  }\n\n  return renderedSpan\n}\n","import type {Editable} from 'slate-react'\n\nexport type RenderTextProps = Parameters<\n  NonNullable<React.ComponentProps<typeof Editable>['renderText']>\n>[0]\n\nexport function RenderText(props: RenderTextProps) {\n  return (\n    <span\n      {...props.attributes}\n      data-child-key={props.text._key}\n      data-child-name={props.text._type}\n      data-child-type=\"span\"\n    >\n      {props.children}\n    </span>\n  )\n}\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isHotkey} from '../../internal-utils/is-hotkey'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions ?? {}\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import {isEqual} from 'lodash'\nimport {\n  Element,\n  Path,\n  Range,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n} from 'slate'\nimport {\n  and,\n  assign,\n  fromCallback,\n  setup,\n  type ActorRefFrom,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {moveRangeByOperation, toSlateRange} from '../internal-utils/ranges'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor} from '../internal-utils/values'\nimport type {PortableTextSlateEditor, RangeDecoration} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\nconst slateOperationCallback: CallbackLogicFunction<\n  AnyEventObject,\n  {type: 'slate operation'; operation: Operation},\n  {slateEditor: PortableTextSlateEditor}\n> = ({input, sendBack}) => {\n  const originalApply = input.slateEditor.apply\n\n  input.slateEditor.apply = (op) => {\n    if (op.type !== 'set_selection') {\n      sendBack({type: 'slate operation', operation: op})\n    }\n\n    originalApply(op)\n  }\n\n  return () => {\n    input.slateEditor.apply = originalApply\n  }\n}\n\ntype DecoratedRange = BaseRange & {rangeDecoration: RangeDecoration}\n\nexport const rangeDecorationsMachine = setup({\n  types: {\n    context: {} as {\n      decoratedRanges: Array<DecoratedRange>\n      pendingRangeDecorations: Array<RangeDecoration>\n      skipSetup: boolean\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n      updateCount: number\n    },\n    input: {} as {\n      rangeDecorations: Array<RangeDecoration>\n      readOnly: boolean\n      schema: EditorSchema\n      skipSetup: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'ready'\n        }\n      | {\n          type: 'range decorations updated'\n          rangeDecorations: Array<RangeDecoration>\n        }\n      | {\n          type: 'slate operation'\n          operation: Operation\n        }\n      | {\n          type: 'update read only'\n          readOnly: boolean\n        },\n  },\n  actions: {\n    'update pending range decorations': assign({\n      pendingRangeDecorations: ({context, event}) => {\n        if (event.type !== 'range decorations updated') {\n          return context.pendingRangeDecorations\n        }\n\n        return event.rangeDecorations\n      },\n    }),\n    'set up initial range decorations': assign({\n      decoratedRanges: ({context}) => {\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const rangeDecoration of context.pendingRangeDecorations) {\n          const slateRange = toSlateRange(\n            rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          rangeDecorationState.push({\n            rangeDecoration,\n            ...slateRange,\n          })\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'update range decorations': assign({\n      decoratedRanges: ({context, event}) => {\n        if (event.type !== 'range decorations updated') {\n          return context.decoratedRanges\n        }\n\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const rangeDecoration of event.rangeDecorations) {\n          const slateRange = toSlateRange(\n            rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          rangeDecorationState.push({\n            rangeDecoration,\n            ...slateRange,\n          })\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'move range decorations': assign({\n      decoratedRanges: ({context, event}) => {\n        if (event.type !== 'slate operation') {\n          return context.decoratedRanges\n        }\n\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const decoratedRange of context.decoratedRanges) {\n          const slateRange = toSlateRange(\n            decoratedRange.rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            decoratedRange.rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration: decoratedRange.rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          let newRange: BaseRange | null | undefined\n\n          newRange = moveRangeByOperation(slateRange, event.operation)\n          if (\n            (newRange && newRange !== slateRange) ||\n            (newRange === null && slateRange)\n          ) {\n            const newRangeSelection = newRange\n              ? slateRangeToSelection({\n                  schema: context.schema,\n                  editor: context.slateEditor,\n                  range: newRange,\n                })\n              : null\n\n            decoratedRange.rangeDecoration.onMoved?.({\n              newSelection: newRangeSelection,\n              rangeDecoration: decoratedRange.rangeDecoration,\n              origin: 'local',\n            })\n          }\n\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            rangeDecorationState.push({\n              ...(newRange || slateRange),\n              rangeDecoration: {\n                ...decoratedRange.rangeDecoration,\n                selection: slateRangeToSelection({\n                  schema: context.schema,\n                  editor: context.slateEditor,\n                  range: newRange,\n                }),\n              },\n            })\n          }\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'assign readOnly': assign({\n      readOnly: ({context, event}) => {\n        if (event.type !== 'update read only') {\n          return context.readOnly\n        }\n\n        return event.readOnly\n      },\n    }),\n    'increment update count': assign({\n      updateCount: ({context}) => {\n        return context.updateCount + 1\n      },\n    }),\n  },\n  actors: {\n    'slate operation listener': fromCallback(slateOperationCallback),\n  },\n  guards: {\n    'has pending range decorations': ({context}) =>\n      context.pendingRangeDecorations.length > 0,\n    'has range decorations': ({context}) => context.decoratedRanges.length > 0,\n    'has different decorations': ({context, event}) => {\n      if (event.type !== 'range decorations updated') {\n        return false\n      }\n\n      const existingRangeDecorations = context.decoratedRanges.map(\n        (decoratedRange) => ({\n          anchor: decoratedRange.rangeDecoration.selection?.anchor,\n          focus: decoratedRange.rangeDecoration.selection?.focus,\n        }),\n      )\n\n      const newRangeDecorations = event.rangeDecorations.map(\n        (rangeDecoration) => ({\n          anchor: rangeDecoration.selection?.anchor,\n          focus: rangeDecoration.selection?.focus,\n        }),\n      )\n\n      const different = !isEqual(existingRangeDecorations, newRangeDecorations)\n\n      return different\n    },\n    'not read only': ({context}) => !context.readOnly,\n    'should skip setup': ({context}) => context.skipSetup,\n  },\n}).createMachine({\n  id: 'range decorations',\n  context: ({input}) => ({\n    readOnly: input.readOnly,\n    pendingRangeDecorations: input.rangeDecorations,\n    decoratedRanges: [],\n    skipSetup: input.skipSetup,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n    updateCount: 0,\n  }),\n  invoke: {\n    src: 'slate operation listener',\n    input: ({context}) => ({slateEditor: context.slateEditor}),\n  },\n  on: {\n    'update read only': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'setting up',\n  states: {\n    'setting up': {\n      always: [\n        {\n          guard: and(['should skip setup', 'has pending range decorations']),\n          target: 'ready',\n          actions: [\n            'set up initial range decorations',\n            'increment update count',\n          ],\n        },\n        {\n          guard: 'should skip setup',\n          target: 'ready',\n        },\n      ],\n      on: {\n        'range decorations updated': {\n          actions: ['update pending range decorations'],\n        },\n        'ready': [\n          {\n            target: 'ready',\n            guard: 'has pending range decorations',\n            actions: [\n              'set up initial range decorations',\n              'increment update count',\n            ],\n          },\n          {\n            target: 'ready',\n          },\n        ],\n      },\n    },\n    'ready': {\n      initial: 'idle',\n      on: {\n        'range decorations updated': {\n          target: '.idle',\n          guard: 'has different decorations',\n          actions: ['update range decorations', 'increment update count'],\n        },\n      },\n      states: {\n        'idle': {\n          on: {\n            'slate operation': {\n              target: 'moving range decorations',\n              guard: and(['has range decorations', 'not read only']),\n            },\n          },\n        },\n        'moving range decorations': {\n          entry: ['move range decorations'],\n          always: {\n            target: 'idle',\n          },\n        },\n      },\n    },\n  },\n})\n\nexport function createDecorate(\n  rangeDecorationActor: ActorRefFrom<typeof rangeDecorationsMachine>,\n) {\n  return function decorate([node, path]: NodeEntry): Array<BaseRange> {\n    if (\n      isEqualToEmptyEditor(\n        rangeDecorationActor.getSnapshot().context.slateEditor.children,\n        rangeDecorationActor.getSnapshot().context.schema,\n      )\n    ) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        } as BaseRange,\n      ]\n    }\n\n    // Editor node has a path length of 0 (should never be decorated)\n    if (path.length === 0) {\n      return []\n    }\n\n    if (!Element.isElement(node) || node.children.length === 0) {\n      return []\n    }\n\n    const blockIndex = path.at(0)\n\n    if (blockIndex === undefined) {\n      return []\n    }\n\n    return rangeDecorationActor\n      .getSnapshot()\n      .context.decoratedRanges.filter((decoratedRange) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (Range.isCollapsed(decoratedRange)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          return node.children.some(\n            (_, childIndex) =>\n              Path.equals(decoratedRange.anchor.path, [\n                blockIndex,\n                childIndex,\n              ]) &&\n              Path.equals(decoratedRange.focus.path, [blockIndex, childIndex]),\n          )\n        }\n\n        return (\n          Range.intersection(decoratedRange, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || Range.includes(decoratedRange, path)\n        )\n      })\n  }\n}\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {Editor, Transforms, type Text} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport {getCompoundClientRect} from '../internal-utils/compound-client-rect'\nimport {debugWithName} from '../internal-utils/debug'\nimport {getDragSelection} from '../internal-utils/drag-selection'\nimport {getEventPosition} from '../internal-utils/event-position'\nimport {parseBlocks} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {normalizeSelection} from '../internal-utils/selection'\nimport {getSelectionDomNodes} from '../internal-utils/selection-elements'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport {isSelectionCollapsed} from '../utils'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {RenderElement} from './components/render-element'\nimport {RenderLeaf} from './components/render-leaf'\nimport {RenderText, type RenderTextProps} from './components/render-text'\nimport {EditorActorContext} from './editor-actor-context'\nimport {getEditorSnapshot} from './editor-selector'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {\n  createDecorate,\n  rangeDecorationsMachine,\n} from './range-decorations-machine'\nimport {RelayActorContext} from './relay-actor-context'\n\nconst debug = debugWithName('component:Editable')\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n *\n *\n * The core component that renders the editor. Must be placed within the {@link EditorProvider} component.\n *\n * @example\n * ```tsx\n * import { PortableTextEditable, EditorProvider } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  return (\n *   <EditorProvider>\n *    <PortableTextEditable />\n *  </EditorProvider>\n *  )\n * }\n * ```\n * @group Components\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onCut,\n    onClick,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragOver,\n    onDrop,\n    onDragLeave,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const editorActor = useContext(EditorActorContext)\n  const relayActor = useContext(RelayActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const slateEditor = useSlate()\n\n  const rangeDecorationsActor = useActorRef(rangeDecorationsMachine, {\n    input: {\n      rangeDecorations: rangeDecorations ?? [],\n      readOnly,\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n      skipSetup: !editorActor.getSnapshot().matches({setup: 'setting up'}),\n    },\n  })\n  useSelector(rangeDecorationsActor, (s) => s.context.updateCount)\n  const decorate = useMemo(\n    () => createDecorate(rangeDecorationsActor),\n    [rangeDecorationsActor],\n  )\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'update read only',\n      readOnly,\n    })\n  }, [rangeDecorationsActor, readOnly])\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'range decorations updated',\n      rangeDecorations: rangeDecorations ?? [],\n    })\n  }, [rangeDecorationsActor, rangeDecorations])\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    if (readOnly) {\n      return slateEditor\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    return withHotKeys(slateEditor)\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <RenderElement\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      leafProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => (\n      <RenderLeaf\n        {...leafProps}\n        readOnly={readOnly}\n        renderAnnotation={renderAnnotation}\n        renderChild={renderChild}\n        renderDecorator={renderDecorator}\n        renderPlaceholder={renderPlaceholder}\n      />\n    ),\n    [\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n    ],\n  )\n\n  const renderText = useCallback(\n    (props: RenderTextProps) => <RenderText {...props} />,\n    [],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(\n          slateEditor.children,\n          editorActor.getSnapshot().context.schema.block.name,\n        ),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'update selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [editorActor, propsSelection, slateEditor])\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      rangeDecorationsActor.send({\n        type: 'ready',\n      })\n\n      restoreSelectionFromProps()\n    })\n\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [rangeDecorationsActor, editorActor, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = slateEditor.selection\n          ? slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor: slateEditor,\n              range: slateEditor.selection,\n            })\n          : undefined\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for copy event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.copy',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  const handleCut = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>) => {\n      if (onCut) {\n        const result = onCut(event)\n        // CutFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for cut event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.cut',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCut, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = fromSlateValue(\n        slateEditor.children,\n        editorActor.getSnapshot().context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(slateEditor),\n      )\n      const ptRange = slateEditor.selection\n        ? slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor: slateEditor,\n            range: slateEditor.selection,\n          })\n        : null\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({\n        event,\n        value,\n        path,\n        schemaTypes: portableTextEditor.schemaTypes,\n      })\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        relayActor.send({type: 'loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              const selection = editorActor.getSnapshot().context.selection\n              const position = selection ? {selection} : undefined\n\n              if (!position) {\n                console.warn('Could not find position for paste event')\n                return\n              }\n\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'clipboard.paste',\n                  originEvent: {\n                    dataTransfer: event.clipboardData,\n                  },\n                  position,\n                },\n                editor: slateEditor,\n                nativeEvent: event,\n              })\n            } else if (result.insert) {\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'insert.blocks',\n                  blocks: parseBlocks({\n                    context: {\n                      keyGenerator:\n                        editorActor.getSnapshot().context.keyGenerator,\n                      schema: editorActor.getSnapshot().context.schema,\n                    },\n                    blocks: result.insert,\n                    options: {\n                      refreshKeys: true,\n                      validateFields: true,\n                    },\n                  }),\n                  placement: 'auto',\n                },\n                editor: slateEditor,\n              })\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.warn(error)\n\n            return error\n          })\n          .finally(() => {\n            relayActor.send({type: 'done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.preventDefault()\n        event.stopPropagation()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for paste event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.paste',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, relayActor, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        relayActor.send({type: 'focused', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'update selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, slateEditor, portableTextEditor, relayActor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (position) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'mouse.click',\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onClick, editorActor, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        relayActor.send({type: 'blurred', event})\n      }\n    },\n    [relayActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keydown',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keyup',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  useEffect(() => {\n    const window = ReactEditor.getWindow(slateEditor)\n\n    const onDragEnd = () => {\n      editorActor.send({type: 'dragend'})\n    }\n    const onDrop = () => {\n      editorActor.send({type: 'drop'})\n    }\n\n    window.document.addEventListener('dragend', onDragEnd)\n    window.document.addEventListener('drop', onDrop)\n\n    return () => {\n      window.document.removeEventListener('dragend', onDragEnd)\n      window.document.removeEventListener('drop', onDrop)\n    }\n  }, [slateEditor, editorActor])\n\n  const handleDragStart = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragStart?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for dragstart event')\n        return\n      }\n\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor,\n      })\n      const dragSelection = getDragSelection({\n        eventSelection: position.selection,\n        snapshot,\n      })\n\n      const selectingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      const dragGhost = document.createElement('div')\n\n      const draggedDomNodes = getSelectionDomNodes({\n        snapshot: {\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        },\n        slateEditor,\n      })\n\n      if (selectingEntireBlocks) {\n        // Clone the DOM Nodes so they won't be visually clipped by scroll-containers etc.\n        const clonedBlockNodes = draggedDomNodes.blockNodes.map((node) =>\n          node.cloneNode(true),\n        )\n\n        for (const block of clonedBlockNodes) {\n          if (block instanceof HTMLElement) {\n            block.style.position = 'relative'\n          }\n          dragGhost.appendChild(block)\n        }\n\n        // A custom drag ghost element can be configured using this data attribute\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost.replaceChildren(customGhost)\n        }\n\n        // Setting the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        dragGhost.style.position = 'absolute'\n        dragGhost.style.left = '-99999px'\n        dragGhost.style.boxSizing = 'border-box'\n        document.body.appendChild(dragGhost)\n\n        if (customGhost) {\n          const customGhostRect = customGhost.getBoundingClientRect()\n          const x = event.clientX - customGhostRect.left\n          const y = event.clientY - customGhostRect.top\n          dragGhost.style.width = `${customGhostRect.width}px`\n          dragGhost.style.height = `${customGhostRect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        } else {\n          const blocksDomRect = getCompoundClientRect(\n            draggedDomNodes.blockNodes,\n          )\n          const x = event.clientX - blocksDomRect.left\n          const y = event.clientY - blocksDomRect.top\n          dragGhost.style.width = `${blocksDomRect.width}px`\n          dragGhost.style.height = `${blocksDomRect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      } else {\n        const clonedChildNodes = draggedDomNodes.childNodes.map((node) =>\n          node.cloneNode(true),\n        )\n\n        for (const child of clonedChildNodes) {\n          dragGhost.appendChild(child)\n        }\n\n        dragGhost.style.position = 'absolute'\n        dragGhost.style.left = '-99999px'\n        dragGhost.style.boxSizing = 'border-box'\n        document.body.appendChild(dragGhost)\n\n        const childrenDomRect = getCompoundClientRect(\n          draggedDomNodes.childNodes,\n        )\n        const x = event.clientX - childrenDomRect.left\n        const y = event.clientY - childrenDomRect.top\n        dragGhost.style.width = `${childrenDomRect.width}px`\n        dragGhost.style.height = `${childrenDomRect.height}px`\n\n        event.dataTransfer.setDragImage(dragGhost, x, y)\n      }\n\n      // Select drag selection\n      // If the selection is expanded then we just select the end of the\n      // selection\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          at: isSelectionCollapsed(dragSelection)\n            ? dragSelection\n            : {\n                anchor: getSelectionEndPoint(dragSelection),\n                focus: getSelectionEndPoint(dragSelection),\n                backward: false,\n              },\n        },\n        editor: slateEditor,\n      })\n\n      editorActor.send({\n        type: 'dragstart',\n        origin: {\n          selection: dragSelection,\n        },\n        ghost: dragGhost,\n      })\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragstart',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position: {\n            selection: dragSelection,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragStart, editorActor, slateEditor],\n  )\n\n  const handleDrag = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrag?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drag',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrag, editorActor, slateEditor],\n  )\n\n  const handleDragEnd = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnd?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragend',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnd, editorActor, slateEditor],\n  )\n\n  const handleDragEnter = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnter?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragenter',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnter, editorActor, slateEditor],\n  )\n\n  const handleDragOver = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragOver?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragover',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragOver, editorActor, slateEditor],\n  )\n\n  const handleDrop = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrop?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for drop event')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drop',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrop, editorActor, slateEditor],\n  )\n\n  const handleDragLeave = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragLeave?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragleave',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragLeave, editorActor, slateEditor],\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      data-read-only={readOnly}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onCut={handleCut}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragEnd={handleDragEnd}\n      onDragEnter={handleDragEnter}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      onDragLeave={handleDragLeave}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      renderText={renderText}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import React from 'react'\n\ntype ConstantRef<TConstant> = {constant: TConstant}\n\nexport default function useConstant<TConstant>(\n  factory: () => TConstant,\n): TConstant {\n  const ref = React.useRef<ConstantRef<TConstant>>(null)\n\n  if (!ref.current) {\n    ref.current = {constant: factory()}\n  }\n\n  return ref.current.constant\n}\n","import type React from 'react'\nimport {useEffect} from 'react'\nimport {Slate} from 'slate-react'\nimport type {EditorConfig} from '../editor'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport useConstant from '../internal-utils/use-constant'\nimport {createInternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {EditorContext} from './editor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {\n  PortableTextEditor,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\nimport {RelayActorContext} from './relay-actor-context'\nimport {RouteEventsToChanges} from './route-events-to-changes'\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n * The EditorProvider component is used to set up the editor context and configure the Portable Text Editor.\n * @example\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n *\n * function App() {\n *  return (\n *    <EditorProvider initialConfig={{ ... }} >\n *      ...\n *    </EditorProvider>\n *  )\n * }\n *\n * ```\n * @group Components\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const {internalEditor, portableTextEditor} = useConstant(() => {\n    const internalEditor = createInternalEditor(props.initialConfig)\n    const portableTextEditor = new PortableTextEditor({\n      editor: internalEditor.editor,\n    } as unknown as PortableTextEditorProps)\n\n    return {internalEditor, portableTextEditor}\n  })\n\n  useEffect(() => {\n    const unsubscribers: Array<() => void> = []\n\n    for (const subscription of internalEditor.subscriptions) {\n      unsubscribers.push(subscription())\n    }\n\n    internalEditor.actors.editorActor.start()\n    internalEditor.actors.mutationActor.start()\n    internalEditor.actors.relayActor.start()\n    internalEditor.actors.syncActor.start()\n\n    return () => {\n      for (const unsubscribe of unsubscribers) {\n        unsubscribe()\n      }\n\n      stopActor(internalEditor.actors.editorActor)\n      stopActor(internalEditor.actors.mutationActor)\n      stopActor(internalEditor.actors.relayActor)\n      stopActor(internalEditor.actors.syncActor)\n    }\n  }, [internalEditor])\n\n  return (\n    <EditorContext.Provider value={internalEditor.editor}>\n      <RouteEventsToChanges\n        relayActor={internalEditor.actors.relayActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <EditorActorContext.Provider value={internalEditor.actors.editorActor}>\n        <RelayActorContext.Provider value={internalEditor.actors.relayActor}>\n          <Slate\n            editor={internalEditor.editor._internal.slateEditor.instance}\n            initialValue={\n              internalEditor.editor._internal.slateEditor.initialValue\n            }\n          >\n            <PortableTextEditorContext.Provider value={portableTextEditor}>\n              <PortableTextEditorSelectionProvider\n                editorActor={internalEditor.actors.editorActor}\n              >\n                {props.children}\n              </PortableTextEditorSelectionProvider>\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </RelayActorContext.Provider>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n"],"names":["EditorEventListener","props","$","_c","editor","useEditor","on","useEffectEvent","t0","subscription","unsubscribe","t1","useEffect","getCompoundClientRect","nodes","length","DOMRect","elements","filter","node","Element","firstRect","at","getBoundingClientRect","left","top","right","bottom","i","rect","Math","min","max","rootName","debug","debugWithName","name","namespace","enabled","getDragSelection","eventSelection","snapshot","dragSelection","selectors","context","selection","draggingCollapsedSelection","draggedTextBlock","draggedSpan","anchor","utils","block","focus","selectedBlocks","selectionStartBlock","selectionEndBlock","selectionStartPoint","selectionEndPoint","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","value","_key","isEqual","toSlateValue","schemaTypes","Array","isArray","map","_type","rest","textBlock","hasInlines","hasMissingStyle","style","hasMissingMarkDefs","markDefs","hasMissingChildren","children","child","cType","cKey","cRest","text","marks","__inline","isElement","styles","fromSlateValue","textBlockType","Error","_cType","v","k","t","_i","blockValue","isEqualToEmptyEditor","undefined","Text","isText","join","getBlockPath","blockPath","from","Editor","match","n","blockIndex","getFocusBlock","path","slice","getFocusSpan","isTextSpan","getSelectedSpans","getSelectionStartBlock","Range","start","getPointBlock","point","getSelectionEndBlock","end","getFocusChild","focusBlock","focusBlockPath","childIndex","focusChild","Node","getPointChild","pointChild","getFirstBlock","firstBlockPath","getLastBlock","lastBlockPath","getNodeBlock","schema","isEditor","isBlockElement","elementToBlock","element","parent","mode","some","isInline","blockObjects","blockObject","isListItemActive","listItem","isTextBlock","every","isListBlock","isStyleActive","slateRangeToSelection","range","anchorBlock","anchorChild","offset","backward","isBackward","push","getEventPosition","editorActor","slateEditor","event","getSnapshot","matches","setup","getEventNode","positionBlock","getEventPositionBlock","getEventSelection","focusBlockKey","DOMEditor","hasTarget","target","toSlateNode","firstBlock","firstBlockRect","toDOMNode","pageY","lastBlock","lastBlockRef","elementRect","height","abs","getSlateRangeFromEvent","isDOMNode","window","getWindow","domRange","document","caretPositionFromPoint","position","clientX","clientY","createRange","setStart","offsetNode","setEnd","caretRangeFromPoint","console","warn","toSlateRange","exactMatch","suppressThrow","toSlatePath","isKeySegment","isVoid","childPath","findIndex","concat","moveRangeByOperation","operation","Point","transform","equals","normalizePoint","newPath","newOffset","blockKey","childKey","find","blk","cld","normalizeSelection","newAnchor","newFocus","getSelectionDomNodes","blockNodes","childNodes","blockEntries","childEntries","isBlock","blockNode","childNode","IS_PROCESSING_REMOTE_CHANGES","WeakMap","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","EditorActorContext","createContext","DropIndicator","Symbol","for","width","borderBottom","zIndex","RenderDefaultBlockObject","userSelect","RenderDefaultInlineObject","inlineObject","defaultKeyGenerator","randomKey","getByteHexTable","table","toString","whatwgRNG","rnds8","Uint8Array","getRandomValues","reduce","str","createEditorPriority","config","id","reference","corePriority","createCoreBlockElementBehaviorsConfig","key","onSetDragPositionBlock","behavior","defineBehavior","guard","dropFocusBlock","dragOrigin","beta","internalDrag","origin","draggedBlock","actions","type","effect","priority","importance","forward","useCoreBlockElementBehaviors","useContext","t2","behaviorConfigs","behaviorConfig","send","behaviorConfig_0","RenderBlockObject","dragPositionBlock","setDragPositionBlock","useState","blockObjectRef","useRef","useSlateStatic","selected","useSelected","legacySchemaType","useSelector","s","getLegacySchema","error","focused","isCollapsed","attributes","readOnly","renderBlock","editorElementRef","schemaType","RenderInlineObject","inlineObjectRef","inlineObjects","findPath","display","renderChild","annotations","RenderTextBlock","blockRef","legacySchema","legacyBlockSchemaType","renderStyle","legacyStyleSchemaType","renderListItem","legacyListItemSchemaType","lists","list","level","spellCheck","RenderElement","_temp","parseInlineObject","keyGenerator","_temp2","options","refreshKeys","validateFields","parseTextBlock","_temp3","parseBlockObject","_temp4","t3","PortableTextEditorContext","usePortableTextEditor","forEachActor","actorRef","callback","Object","values","forEach","stopActor","persistedSnapshots","ref","observers","Set","systemSnapshot","system","stop","_snapshot","_processingStatus","converterJson","mimeType","serialize","portableTextConverter","converters","converter","originEvent","reason","deserialize","converterPortableText","blocks","sliceBlocks","data","JSON","stringify","parse","parsedBlocks","flatMap","parsedBlock","parseBlock","hasTag","createConverterTextHtml","html","toHTML","onMissingComponent","components","unknownType","htmlToBlocks","portableText","unstable_whitespaceOnPasteMode","createConverterTextPlain","span","inlineObjectType","title","blockObjectType","textToHtml","escapeHtml","split","line","replace","entityMap","String","createCoreConverters","compileType","rawType","Schema","compile","types","get","createPlaceholderBlock","getActiveAnnotations","markState","mark","decorators","decorator","includes","getActiveDecorators","decoratorState","activeDecorators","activeDecorator","insertTextOperationImplementation","activeAnnotations","focusSpan","Transforms","insertText","state","markStateDecorators","insertNodes","isPortableTextSpan","isPortableTextBlock","def","getPreviousSpan","spanPath","previousSpan","reverse","Path","isBefore","getNextSpan","nextSpan","isAfter","withRemoteChanges","fn","prev","isChangingRemotely","set","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","defaultCompare","a","b","useEditorSelector","selector","compare","editorActorSnapshot","getEditorSnapshot","slateEditorInstance","_internal","instance","tag","createWithPortableTextMarkModel","apply","normalizeNode","nodeEntry","nextNode","mergeNodes","voids","setNodes","orphanedAnnotations","markDefKeys","newMarkDefs","markDef","has","add","operations","op","properties","newProperties","previousSelectionIsCollapsed","newSelectionIsCollapsed","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","depth","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","annotation","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","isExpanded","spanHasAnnotations","deletingFromTheEnd","deletingAllText","previousSpanHasSameAnnotation","nextSpanHasSameAnnotation","withoutNormalizing","onChange","targetBlock","targetPath","oldDefs","uniq","removeDecoratorOperationImplementation","hanging","eMark","lonelyEmptySpan","existingMarksWithoutDecorator","existingMark","cloneDiff","diff2","patch","CURRENT_UNDO_STEP","withUndoStep","current","undoStepId","getCurrentUndoStepId","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","getRemotePatches","createWithUndoRedo","previousSnapshot","remotePatches","previousUndoStepId","subscriptions","sub","patches","reset","history","undos","redos","splice","time","Date","step","lastOp","overwrite","shouldOverwrite","save","currentUndoStepId","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","historyUndoOperationImplementation","otherPatches","item","transformedOperations","flatten","transformOperation","reversedOperations","Operation","inverse","withoutSaving","err","deselect","pop","historyRedoOperationImplementation","transformedOperation","insertBlockIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","index","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","dType","currentFocus","currentAnchor","addAnnotationOperationImplementation","parsedAnnotation","parseAnnotation","paths","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationOperationImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","nextSpansWithSameAnnotation","marksWithoutAnnotation","blockSetOperationImplementation","location","filteredProps","updatedBlock","slateBlock","blockUnsetOperationImplementation","propsToRemove","prop","updatedTextBlock","omit","propsToSet","updatedBlockObject","decoratorAddOperationImplementation","manualAnchor","blockOffset","direction","manualFocus","manualSelection","editorSelection","anchorOffset","selectionPoint","focusOffset","newValue","newSelection","offsets","trimmedSelection","newRange","splitTextNodes","isRange","existingMarks","deleteOperationImplementation","anchorBlockPath","isKeyedSegment","removeNodes","delete","unit","insertInlineObjectOperationImplementation","parsedInlineObject","focusTextBlock","insertSpanOperationImplementation","insertBlockOperationImplementation","fragment","placement","select","insertBlock","startBlock","startBlockPath","endBlock","endBlockPath","nextPath","selectionBefore","insertFragment","currentSelection","endBlockEndPoint","adjustedSelection","next","endBlockStartPoint","moveBackwardOperationImplementation","move","distance","moveBlockOperationImplementation","to","moveNodes","moveForwardOperationImplementation","selectOperationImplementation","behaviorOperationImplementations","performOperation","message","CURRENT_OPERATION_ID","withApplyingBehaviorOperations","getCurrentOperationId","isApplyingBehaviorOperations","createWithEventListeners","maxBlocks","editorDelete","behaviorEvent","deleteBackward","deleteForward","insertBreak","insertData","dataTransfer","insertSoftBreak","redo","setFragmentData","undo","createWithMaxBlocks","rows","createWithObjectKeys","existingKeys","descendants","entry","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","diffMatchPatch","findBlock","findBlockChild","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","blocksToInsert","targetBlockIndex","normalizedIdx","editorWasEmptyBefore","targetChild","childrenToInsert","childInsertPath","oldText","newText","propPath","propEntry","newNode","applyAll","reservedProps","nextRest","prevChildren","prevRest","newVal","previousSelection","_","pteCreateTextBlock","newKeys","keys","removedProperties","property","unsetNodes","isMatch","insertTextPatch","beforeValue","textChild","isSpan","prevBlock","prevChild","prevText","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","keyName","val","indexOf","insertNodePatch","targetKey","insert","setIfMissing","splitNodePatch","splitBlock","oldBlock","targetValue","unset","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","newBlock","updatedSpan","removedSpan","moveNodePatch","childToInsert","PATCHING","withoutPatching","isPatching","createWithPatches","relayActor","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","normalize","handlePatches","p","editorWasEmpty","editorIsEmpty","debugVerbose","previousValue","operationId","createWithPlaceholderBlock","insertNode","createWithPortableTextBlockStyle","defaultStyle","SlateText","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","ptRange","existing","createWithSchemaTypes","obj","createWithUtils","getMarkState","selectedSpans","marksWithoutAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","pluginUpdateMarkState","isEditorNode","isTextBlockNode","isTypedObject","isSpanNode","isPartialSpanNode","isObjectNode","getBlock","root","getNode","getSpan","getParent","parentPath","applyOperationToPortableText","draft","createDraft","e","finishDraft","applyOperationToPortableTextDraft","insertedNode","before","after","prevPath","previous","isAncestor","truePath","newParent","newIndex","valueBefore","valueAfter","hasOwnProperty","newTextBlockNode","newSpanNode","pluginUpdateValue","withPlugins","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","createSlateEditor","withReact","createEditor","initialValue","addAnnotationOnCollapsedSelection","caretWordSelection","raise","coreAnnotationBehaviors","IS_MAC","test","navigator","userAgent","modifiers","alt","control","meta","aliases","break","cmd","command","ctl","ctrl","del","down","esc","ins","mod","opt","option","return","space","spacebar","up","win","windows","keyCodes","isHotkey","hotkey","compareHotkey","parseHotkey","parsedHotkey","altKey","ctrlKey","metaKey","shiftKey","hotkeySegments","rawHotkeySegment","optional","endsWith","hotkeySegment","toKeyName","modifier","alias","code","TypeError","keyCode","toKeyCode","toLowerCase","toUpperCase","charCodeAt","arrowDownOnLonelyBlockObject","focusBlockObject","nextBlock","arrowUpOnLonelyBlockObject","previousBlock","breakingBlockObject","clickingAboveLonelyBlockObject","clickingBelowLonelyBlockObject","deletingEmptyTextBlockAfterBlockObject","selectionCollapsed","isEmptyTextBlock","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","coreDecoratorBehaviors","strongShortcut","emShortcut","underlineShortcut","codeShortcut","coreDndBehaviors","breakingAtTheEndOfTextBlock","atTheEndOfBlock","focusListItem","focusLevel","breakingAtTheStartOfTextBlock","focusDecorators","focusAnnotations","breakingEntireDocument","firstBlockStartPoint","lastBlockEndPoint","breakingEntireBlocks","startBlockStartPoint","coreInsertBreakBehaviors","MAX_LIST_LEVEL","clearListOnBackspace","unindentListOnBackspace","clearListOnEnter","focusListBlock","indentListOnTab","selectedListBlocks","selectedListBlock","unindentListOnShiftTab","coreListBehaviors","coreBehaviorsConfig","abstractAnnotationBehaviors","isActiveAnnotation","abstractDecoratorBehaviors","isActiveDecorator","blockOffsetsToSelection","abstractDeleteBehaviors","abstractInsertBehaviors","getFocusTextBlock","keyIs","lineBreak","abstractKeyboardBehaviors","abstractListItemBehaviors","selectedTextBlocks","getSelectedTextBlocks","isActiveListItem","abstractMoveBehaviors","getPreviousBlock","getNextBlock","abstractSelectBehaviors","getBlockEndPoint","getBlockStartPoint","abstractSplitBehaviors","getSelectionStartPoint","getSelectionEndPoint","blockEndPoint","newTextBlockSelection","newTextBlock","isSelectionCollapsed","abstractStyleBehaviors","isActiveStyle","raiseDeserializationSuccessOrFailure","success","failures","getData","deserializeEvent","failure","raiseSerializationSuccessOrFailure","serializeEvents","serializeEvent","abstractBehaviors","setData","dropPosition","droppingOnDragOrigin","draggingEntireBlocks","draggedBlocks","textRuns","getTextBlockText","textRun","isSyntheticBehaviorEvent","isCustomBehaviorEvent","isNativeBehaviorEvent","isAbstractBehaviorEvent","abstractBehaviorEventTypes","nativeBehaviorEventTypes","startsWith","eventCategory","performEvent","behaviors","remainingEventBehaviors","nativeEvent","eventBehaviors","listenedNamespace","eventNamespace","preventDefault","guardSnapshot","nativeEventPrevented","defaultBehaviorOverwritten","eventBehaviorIndex","eventBehavior","shouldRun","actionSet","actionsSnapshot","action","sortByPriority","itemsWithPriority","itemsWithoutPriority","itemsByPriorityId","Map","graph","inDegree","ensureNode","addEdge","fromId","toId","visited","refId","queue","degree","result","currentId","currentItem","neighborId","newDegree","createEditorSnapshot","editorMachine","events","emitted","input","tags","assign","assertEvent","enqueueActions","enqueue","emit","pendingEvents","pendingIncomingPatchesEvents","handle blur","blur","handle focus","handle behavior event","self","guards","slate is busy","createMachine","initialReadOnly","states","initial","exit","dragstart","ghost","always","parentNode","removeChild","dragend","drop","pristine","idle","normalizing","dirty","createLegacySchema","portableTextType","blockType","of","findBlockType","childrenField","fields","field","ofType","spanType","memberType","inlineObjectTypes","blockObjectTypes","resolveEnabledStyles","resolveEnabledDecorators","resolveEnabledListItems","styleField","btField","textStyles","listField","listItems","defineSchema","definition","temporaryImageName","temporaryUrlName","temporaryObjectNames","image","url","objectNames","defaultObjectTitles","legacySchemaToEditorSchema","jsonType","compileSchemaDefinitionToLegacySchema","defineType","portableTextSchema","defineField","startCase","SanitySchema","pteSchema","mutationMachine","bulk","pendingMutations","lastBulk","pendingPatchEvents","actors","fromCallback","sendBack","originalApply","interval","setInterval","process","env","NODE_ENV","clearInterval","is read-only","stateIn","typing","slate is normalizing","isNormalizing","delays","invoke","src","reenter","mutations","and","not","createEditableAPI","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","descendant","insertChild","focusChildPath","focusNode","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","ReactEditor","spans","isAnnotationActive","annotationType","addAnnotation","SlateElement","removeAnnotation","getSelection","getValue","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","selectionMarkDefs","accMarkDefs","markKey","relayMachine","validateValue","resolution","valid","validChildTypes","validBlockTypes","description","i18n","isPlainObject","currentBlockTypeName","expectedTypeName","typeName","newSpan","autoResolve","allUsedMarks","unusedMarkDefs","markDefKey","m","orphanedMarks","dec","spanChildren","orphaned","cMrk","cIndex","newChild","childType","syncValueCallback","streamBlocks","syncValueLogic","syncMachine","initialValueSynced","pendingValue","initial value synced","is busy","editable","isProcessingLocalChanges","isChanging","isBusy","is empty value","is empty array","is new value","value changed while syncing","pending value equals previous value","busy","syncing","updateValue","doneSyncing","isChanged","isValid","hadSelection","childrenLength","slateValueFromProps","Promise","resolve","removeExtraBlocks","currentBlock","currentBlockIndex","getStreamedBlocks","slateValue","blockChanged","blockValid","syncBlock","setTimeout","hasChanges","validationValue","validation","_updateBlock","_replaceBlock","selectionFocusOnBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","createInternalEditor","createActor","editorConfigToMachineInput","mutationActor","syncActor","createActors","registerBehavior","behaviorConfigWithPriority","listener","compileSchemasFromEditorConfig","schemaDefinition","subscribe","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","setSelection","startTransition","RelayActorContext","RouteEventsToChanges","change","handleChange","change_0","eventToChange","isLoading","PortableTextEditor","Component","displayName","change$","Subject","unsubscribers","constructor","Number","parseInt","componentDidMount","relayActorSubscription","componentDidUpdate","prevProps","editorRef","componentWillUnmount","setEditable","render","legacyPatches","incomingPatches$","patches$","blockStyle","listStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","payload","RenderSpan","spanRef","portableTextEditor","blockSelected","setFocused","setSelected","useMemo","leaf","decoratorSchemaTypes","annotationMarkDefs","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","useCallback","winSelection","rangeCount","getRangeAt","intersectsNode","onBlur","onFocus","onSelection","legacyDecoratorSchemaType","renderDecorator","annotationMarkDef","legacyAnnotationSchemaType","renderAnnotation","_child","PLACEHOLDER_STYLE","pointerEvents","RenderLeaf","renderedSpan","renderPlaceholder","placeholder","rangeDecoration","component","RenderText","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","cat","possibleMark","possibleCommand","slateOperationCallback","rangeDecorationsMachine","pendingRangeDecorations","rangeDecorations","decoratedRanges","rangeDecorationState","slateRange","onMoved","decoratedRange","newRangeSelection","updateCount","has pending range decorations","has range decorations","has different decorations","existingRangeDecorations","newRangeDecorations","not read only","should skip setup","skipSetup","createDecorate","rangeDecorationActor","intersection","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onCut","onClick","onDragStart","onDrag","onDragEnd","onDragEnter","onDragOver","onDrop","onDragLeave","propsSelection","scrollSelectionIntoView","restProps","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","useSlate","rangeDecorationsActor","useActorRef","decorate","renderElement","eProps","renderLeaf","leafProps","renderText","restoreSelectionFromProps","normalizedSelection","o","onReady","onInvalidValue","onValueChanged","handleCopy","clipboardData","stopPropagation","handleCut","handlePaste","onPasteResult","then","parseBlocks","catch","finally","handleOnFocus","isDefaultPrevented","handleClick","isPropagationStopped","handleOnBlur","handleOnBeforeInput","validateSelection","findDocumentOrShadowRoot","activeElement","domSelection","existingDOMRange","newDOMRange","toDOMRange","startOffset","endOffset","removeAllRanges","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","noop","addEventListener","removeEventListener","handleDragStart","selectingEntireBlocks","dragGhost","createElement","draggedDomNodes","clonedBlockNodes","cloneNode","HTMLElement","appendChild","customGhost","querySelector","replaceChildren","setAttribute","boxSizing","body","customGhostRect","x","y","setDragImage","blocksDomRect","clonedChildNodes","childrenDomRect","handleDrag","handleDragEnd","handleDragEnter","handleDragOver","handleDrop","handleDragLeave","SlateEditable","className","useConstant","factory","React","constant","EditorProvider","initialConfig","internalEditor","internalEditor_0","portableTextEditor_0","t4","t5","t6","t7","t8","t9","t10"],"mappings":"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","x_google_ignoreList":[36,42]}