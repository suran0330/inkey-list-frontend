import { cwd } from 'node:process';
import chalk from 'chalk';
import highlight from 'color-json';
import inquirer from 'inquirer';
import { createFunctionResource } from '../../actions/blueprints/resources.js';
import { validateFunctionName } from '../../utils/validate/resource.js';
export async function blueprintAddCore(options) {
    const { bin = 'sanity', log, blueprint, args, flags } = options;
    const { type: resourceType } = args;
    const { name: flagResourceName, 'fn-type': flagFnType, javascript: flagJs, 'fn-helpers': flagFnHelpers, install: flagI, 'fn-installer': flagFnInstaller, // can be 'skip'!
     } = flags;
    let { language: flagFnLang } = flags;
    flagFnLang = flagJs ? 'js' : flagFnLang;
    if (resourceType !== 'function') {
        return {
            success: false,
            error: `Unsupported Resource type: ${resourceType}`,
        };
    }
    if (flagI) {
        if (flagFnInstaller) {
            return {
                success: false,
                error: 'Cannot use --fn-installer flag with the --install flag',
            };
        }
        if (!flagFnHelpers) {
            return {
                success: false,
                error: 'Cannot use --no-fn-helpers flag with the --install flag',
            };
        }
    }
    if (flagResourceName && !validateFunctionName(flagResourceName)) {
        // if provided && invalid, return error ASAP
        return {
            success: false,
            error: `Invalid function name: ${flagResourceName}`,
        };
    }
    try {
        const fnName = flagResourceName || (await promptForFunctionName());
        // look for existing function with same name
        if (blueprint.parsedBlueprint.resources?.some((r) => r.name === fnName)) {
            return {
                success: false,
                error: `Function "${chalk.bold(fnName)}" already exists.`,
            };
        }
        const fnType = flagFnType || (await promptForFunctionType());
        const fnLang = flagFnLang || (await promptForFunctionLang());
        if (!['document-publish', 'document-create', 'document-delete'].includes(fnType)) {
            throw new Error('Invalid function type. Must be one of: document-publish, document-create, document-delete');
        }
        let addHelpers;
        let installCommand;
        if (!['ts', 'js'].includes(fnLang)) {
            // language is not supported
            addHelpers = false;
            installCommand = null;
        }
        else if (flagFnHelpers === false) {
            // explicit "false" means user does not want helpers: "--no-fn-helpers"
            addHelpers = false;
            installCommand = null;
        }
        else if (flagI) {
            // user wants to install helpers with npm
            addHelpers = true;
            installCommand = 'npm';
        }
        else if (flagFnInstaller) {
            addHelpers = true; //  if installer is passed, assume addHelpers
            installCommand = flagFnInstaller === 'skip' ? null : flagFnInstaller;
        }
        else {
            // unsure; ask...
            addHelpers = flagFnHelpers || (await promptForAddHelpers());
            installCommand = addHelpers ? await promptForInstallCommand() : null;
        }
        if (installCommand)
            log(`${chalk.magenta('Installing')} with ${installCommand}...`);
        const { filePath, resourceAdded, resource } = await createFunctionResource({
            name: fnName,
            type: fnType,
            lang: fnLang,
            addHelpers,
            installCommand,
        });
        log(`\nCreated function: ${filePath.replace(cwd(), '')}`);
        if (!resourceAdded) {
            // print the resource JSON for manual addition
            log('\nAdd this Function resource to your Blueprint:');
            log(highlight(JSON.stringify(resource, null, 2), undefined, undefined, 2));
        }
        else {
            // added to blueprint.json
            log(`Function "${chalk.bold(fnName)}" added to Blueprint file.`);
        }
        if (fnLang === 'ts') {
            log(chalk.dim('Add "functions/**/.build/**" to your .gitignore.'));
        }
        return { success: true };
    }
    catch (err) {
        const errorMessage = err instanceof Error ? err.message : String(err);
        return {
            success: false,
            error: errorMessage,
        };
    }
}
async function promptForFunctionName() {
    const { functionName } = await inquirer.prompt([
        {
            type: 'input',
            name: 'functionName',
            message: 'Enter function name:',
            validate: (input) => validateFunctionName(input) ||
                'Invalid function name. Must be 6+ characters, no special characters, no spaces',
        },
    ]);
    return functionName;
}
async function promptForFunctionType() {
    const { functionType } = await inquirer.prompt([
        {
            type: 'list',
            name: 'functionType',
            message: 'Choose function type:',
            choices: [
                { name: 'Document Publish', value: 'document-publish' },
                { name: 'Document Create', value: 'document-create', disabled: '(Coming soon)' },
                { name: 'Document Delete', value: 'document-delete', disabled: '(Coming soon)' },
            ],
            default: 'document-publish',
        },
    ]);
    return functionType;
}
async function promptForFunctionLang() {
    const { functionLang } = await inquirer.prompt([
        {
            type: 'list',
            name: 'functionLang',
            message: 'Choose function language:',
            choices: [
                { name: 'TypeScript', value: 'ts' },
                { name: 'JavaScript', value: 'js' },
            ],
            default: 'ts',
        },
    ]);
    return functionLang;
}
async function promptForAddHelpers() {
    const { addHelpers } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'addHelpers',
            message: 'Add @sanity/functions helpers to the new Function?',
            default: true,
        },
    ]);
    return addHelpers;
}
async function promptForInstallCommand() {
    const { command } = await inquirer.prompt([
        {
            type: 'list',
            name: 'command',
            message: 'How to install the @sanity/functions helpers:',
            choices: [
                { name: 'npm', value: 'npm' },
                { name: 'pnpm', value: 'pnpm' },
                { name: 'yarn', value: 'yarn' },
                { name: 'Skip install', value: null },
            ],
            default: 'npm',
        },
    ]);
    return command;
}
