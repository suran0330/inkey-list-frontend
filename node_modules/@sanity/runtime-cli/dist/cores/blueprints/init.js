import { join } from 'node:path';
import { cwd } from 'node:process';
import chalk from 'chalk';
import inquirer from 'inquirer';
import { BLUEPRINT_CONFIG_FILE, BLUEPRINT_DIR, findBlueprintFile, writeBlueprintToDisk, writeConfigFile, } from '../../actions/blueprints/blueprint.js';
import { createStack, getStack, listStacks } from '../../actions/blueprints/stacks.js';
import { getProject } from '../../actions/sanity/projects.js';
import { niceId } from '../../utils/display/presenters.js';
import { promptForProject } from '../../utils/display/prompt.js';
const LAUNCH_LIMIT_STACK_PER_PROJECT = true;
export async function blueprintInitCore(options) {
    const { log, token, args, flags } = options;
    try {
        const { 'blueprint-type': flagBlueprintType, 'project-id': flagProjectId, 'stack-id': flagStackId, 'stack-name': flagStackName, dir: flagDir, } = flags;
        const { dir: argDir } = args;
        const dirProvided = argDir || flagDir;
        const here = cwd();
        const dir = argDir || flagDir || here;
        const existingBlueprint = findBlueprintFile(dir);
        if (existingBlueprint) {
            return { success: false, error: 'Existing Blueprint found.' };
        }
        const blueprintExtension = flagBlueprintType || (await promptForBlueprintType());
        if (!blueprintExtension) {
            return { success: false, error: 'Blueprint type is required.' };
        }
        let projectId = flagProjectId;
        let stackId = flagStackId;
        if (!projectId) {
            const pickedProject = await promptForProject({ token });
            projectId = pickedProject.projectId;
        }
        if (flagStackName) {
            // using --stack-name gets around "LAUNCH LIMIT: 1 Stack per Project"
            const stack = await createEmptyStack({
                token,
                projectId,
                name: flagStackName,
                projectBased: false,
            });
            stackId = stack.id;
        }
        const auth = { token: token, projectId };
        if (!stackId) {
            // LAUNCH LIMIT: 1 Stack per Project - do not prompt for Stack, just create one
            if (LAUNCH_LIMIT_STACK_PER_PROJECT) {
                await createProjectBasedStack(auth, token, log);
                // do not set stackId, to avoid saving it to the config file
            }
            else {
                stackId = await promptForStackId({ projectId, token });
            }
        }
        const fileName = `blueprint.${blueprintExtension}`;
        const filePath = join(dir, fileName);
        if (dirProvided)
            log(`New Blueprint created:   ${dirProvided}/`);
        writeBlueprintToDisk({ blueprintFilePath: filePath });
        log(`Created new blueprint:   ${dirProvided ?? '.'}/${fileName}`);
        writeConfigFile({ blueprintFilePath: filePath, projectId, stackId });
        log(`Created new config file: ${dirProvided ?? '.'}/${BLUEPRINT_DIR}/${BLUEPRINT_CONFIG_FILE}`);
        if (blueprintExtension === 'ts') {
            log('\nNote: TypeScript support requires "tsx" to be installed. Run: npm install -D tsx');
        }
        return { success: true };
    }
    catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        log(`Error: ${errorMessage}`);
        return { success: false, error: errorMessage };
    }
}
async function promptForBlueprintType() {
    const { pickedBlueprintsType } = await inquirer.prompt([
        {
            type: 'list',
            name: 'pickedBlueprintsType',
            message: 'Choose a blueprint type:',
            choices: [
                { name: 'JSON', value: 'json' },
                { name: 'TypeScript', value: 'ts', disabled: '(Coming soon)' },
                { name: 'JavaScript', value: 'js', disabled: '(Coming soon)' },
            ],
            default: 'json',
        },
    ]);
    return pickedBlueprintsType;
}
async function promptForStackId({ projectId, token, }) {
    const { ok: stacksOk, error: stacksErr, stacks } = await listStacks({ token, projectId });
    if (!stacksOk) {
        throw new Error(stacksErr || 'Failed to list Stacks');
    }
    const stackChoices = [
        { name: chalk.bold('âœ¨ Create a new Stack'), value: 'new' },
    ];
    if (stacks.length > 0) {
        stackChoices.push(new inquirer.Separator(chalk.underline('Use an existing Stack:')));
        stackChoices.push(...stacks.map((s) => ({
            name: `"${s.name}" ${niceId(s.id)} ${chalk.dim(`(${s.resources.length} res)`)}`,
            value: s.id,
        })));
    }
    const { pickedStackId } = await inquirer.prompt([
        {
            type: 'list',
            name: 'pickedStackId',
            message: 'Select an existing deployment or create a new one:',
            choices: stackChoices,
        },
    ]);
    if (pickedStackId === 'new') {
        const { stackName } = await inquirer.prompt([
            {
                type: 'input',
                name: 'stackName',
                message: 'Enter a name for your Stack:',
                validate: (input) => input.length > 0 || 'Stack name is required',
            },
        ]);
        const stack = await createEmptyStack({
            token,
            projectId,
            name: stackName,
        });
        return stack.id;
    }
    return pickedStackId;
}
async function createEmptyStack({ token, projectId, name, projectBased = true, }) {
    const stackPayload = {
        name,
        projectId,
        useProjectBasedId: projectBased,
        document: { resources: [] },
    };
    const auth = { token, projectId };
    const response = await createStack({ stackPayload, auth });
    if (!response.ok) {
        throw new Error(response.error || 'Failed to create new Stack');
    }
    return response.stack;
}
// LAUNCH LIMIT: 1 Stack per Project - create exclusive stack for project
async function createProjectBasedStack(auth, token, log) {
    const { projectId } = auth;
    // get project
    const { ok: projectOk, project } = await getProject(auth);
    if (!projectOk) {
        throw new Error('Failed to find Project while creating Stack');
    }
    const projectDisplayName = project.displayName;
    // check if project has a stack
    const inferredStackId = `ST-${projectId}`;
    const { stack: existingStack, ok: stackOk } = await getStack({ stackId: inferredStackId, auth });
    // if existing stack, return stack
    if (stackOk && existingStack) {
        log(chalk.red(`Found existing deployment for "${projectDisplayName}" Blueprint`));
        log(chalk.red('Deploying an empty Blueprint will override the existing deployment.'));
        return existingStack;
    }
    // if not, create a stack
    const stack = await createEmptyStack({
        token,
        projectId,
        name: projectDisplayName,
    });
    return stack;
}
