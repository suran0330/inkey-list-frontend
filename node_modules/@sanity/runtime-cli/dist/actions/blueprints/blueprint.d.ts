import type { BlueprintParserError, LocalBlueprint, LocalResource } from '../../utils/types.js';
export { BLUEPRINT_CONFIG_FILE, BLUEPRINT_CONFIG_VERSION, BLUEPRINT_DIR } from '../../config.js';
declare const SUPPORTED_FILE_EXTENSIONS: readonly [".json", ".js", ".mjs", ".cjs", ".ts"];
type BlueprintFileExtension = (typeof SUPPORTED_FILE_EXTENSIONS)[number];
export declare const DEFAULT_BLUEPRINT_CONTENT: LocalBlueprint;
/**
 * Finds the blueprint file in the given path or current working directory
 * @param blueprintPath - The path of the blueprint file or directory
 * @returns The path, file name, and extension of the blueprint file
 */
export declare function findBlueprintFile(blueprintPath?: string): {
    blueprintFilePath: string;
    fileName: string;
    extension: BlueprintFileExtension;
} | null;
/**
 * Result of the blueprint read operation
 */
export interface ReadBlueprintResult {
    fileInfo: {
        blueprintFilePath: string;
        fileName: string;
        extension: string;
    };
    rawBlueprint: LocalBlueprint;
    parsedBlueprint: LocalBlueprint;
    errors: BlueprintParserError[];
    configPath?: string;
    projectId?: string;
    stackId?: string;
}
/**
 * Reads the blueprint file from disk and parses it. Greedily looks for project and stack config
 * @param blueprintPath - The path of the blueprint file or directory- will search up the directory tree!
 * @returns Known information about the Blueprint, config, and Stack
 */
export declare function readLocalBlueprint(blueprintPath?: string): Promise<ReadBlueprintResult>;
export declare function writeBlueprintToDisk({ blueprintFilePath, content, }: {
    blueprintFilePath: string;
    content?: LocalBlueprint;
}): string;
export declare function readConfigFile(blueprintFilePath?: string | undefined): {
    configPath?: string;
    projectId?: string;
    stackId?: string;
} | null;
export declare function writeConfigFile({ blueprintFilePath, projectId, stackId, }: {
    blueprintFilePath?: string;
    projectId: string;
    stackId?: string;
}): void;
export declare function addResourceToBlueprint({ blueprintFilePath, resource, }: {
    blueprintFilePath?: string;
    resource: LocalResource;
}): LocalResource | undefined;
export declare function updateBlueprintMetadata({ blueprintFilePath, metadata, }: {
    blueprintFilePath?: string;
    metadata: LocalBlueprint['metadata'];
}): void;
export declare function updateBlueprintValues({ blueprintFilePath, values, }: {
    blueprintFilePath: string;
    values: LocalBlueprint['values'];
}): void;
