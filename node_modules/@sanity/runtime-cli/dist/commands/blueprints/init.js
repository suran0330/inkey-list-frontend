import { Args, Command, Flags } from '@oclif/core';
import { blueprintInitCore } from '../../cores/blueprints/init.js';
import { validTokenOrErrorMessage } from '../../utils/validated-token.js';
export default class InitCommand extends Command {
    static description = 'Initialize a new Blueprint';
    static examples = [
        '<%= config.bin %> <%= command.id %>',
        '<%= config.bin %> <%= command.id %> [directory]',
        '<%= config.bin %> <%= command.id %> --blueprint-type <json|js|ts>',
        '<%= config.bin %> <%= command.id %> --blueprint-type <json|js|ts> --project-id <projectId>',
        // LAUNCH LIMIT: 1 Stack per Project - do not prompt for Stack, just create one
        // '<%= config.bin %> <%= command.id %> --blueprint-type <json|js|ts> --project-id <projectId> --stack-id <stackId>',
        // '<%= config.bin %> <%= command.id %> --blueprint-type <json|js|ts> --project-id <projectId> --stack-name <stackName>',
    ];
    static args = {
        dir: Args.string({
            description: 'Directory to create the Blueprint in',
        }),
    };
    static flags = {
        dir: Flags.string({
            description: 'Directory to create the Blueprint in',
        }),
        'blueprint-type': Flags.string({
            description: 'Blueprint manifest type to use for the Blueprint',
            options: ['json', 'js', 'ts'],
            aliases: ['type'],
        }),
        'project-id': Flags.string({
            description: 'Sanity Project ID to use for the Blueprint',
            aliases: ['project', 'projectId'],
        }),
        'stack-id': Flags.string({
            description: 'Existing Stack ID to use for the Blueprint',
            aliases: ['stack', 'stackId'],
            dependsOn: ['project-id'],
            exclusive: ['stack-name'],
            hidden: true, // LAUNCH LIMIT: 1 Stack per Project
        }),
        'stack-name': Flags.string({
            description: 'Name to use for a NEW Stack',
            aliases: ['name'],
            exclusive: ['stack-id'],
            hidden: true, // LAUNCH LIMIT: 1 Stack per Project
        }),
    };
    async run() {
        const { args, flags } = await this.parse(InitCommand);
        const { token, error: tokenErr } = await validTokenOrErrorMessage();
        if (tokenErr)
            this.error(tokenErr.message);
        const { success, error } = await blueprintInitCore({
            bin: this.config.bin,
            log: (message) => this.log(message),
            token,
            args,
            flags,
        });
        if (!success)
            this.error(error);
    }
}
