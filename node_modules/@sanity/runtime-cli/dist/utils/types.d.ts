/** Result utility type */
export type Result<T> = {
    ok: true;
    value: T;
} | {
    ok: false;
    error: string;
};
/** @internal */
export interface AuthParams {
    token: string;
    projectId: string;
}
/** @internal */
export interface GroqRule {
    on: Array<string>;
    filter?: string;
    projection?: string;
}
/** @internal */
export interface LocalBlueprint {
    /** @link https://github.com/sanity-io/blueprints-rfc/blob/main/readme.md#versioning */
    blueprintVersion?: string;
    /** @link https://github.com/sanity-io/blueprints-rfc/blob/main/readme.md#values */
    values?: Record<string, unknown>;
    /** @link https://github.com/sanity-io/blueprints-rfc/blob/main/readme.md#outputs */
    outputs?: Array<Record<string, unknown>>;
    /** @link https://github.com/sanity-io/blueprints-rfc/blob/main/readme.md#resources */
    resources?: Array<LocalResource | LocalFunctionResource>;
    /** @link https://github.com/sanity-io/blueprints-rfc/blob/main/readme.md#parameters */
    parameters?: Array<{
        name: string;
        type: 'arg' | 'argument' | 'env-var' | 'envVar' | 'config' | 'stdin';
    } & ({
        type: 'arg' | 'argument';
        argument: string;
        'env-var'?: never;
        setting?: never;
    } | {
        type: 'env-var' | 'envVar';
        'env-var': string;
        argument?: never;
        setting?: never;
    } | {
        type: 'config';
        setting: string;
        'env-var'?: never;
        argument?: never;
    } | {
        type: 'stdin';
        'env-var'?: never;
        argument?: never;
        setting?: never;
    })>;
    /** @link https://github.com/sanity-io/blueprints-rfc/blob/main/readme.md#arbitrary-userland-data */
    metadata?: Record<string, unknown>;
}
/** @internal */
export interface LocalResource {
    name: string;
    type: string;
    displayName?: string;
}
export declare function isLocalFunctionResource(r: LocalResource): r is LocalFunctionResource;
/** @internal */
export interface LocalFunctionResource extends LocalResource {
    src?: string;
    bundle?: boolean;
    memory?: number;
    timeout?: number;
    env?: Record<string, string>;
    event?: GroqRule;
}
export interface Stack {
    id: string;
    name: string;
    displayName: string;
    projectId: string;
    resources: Array<StackResource>;
    createdAt?: string;
    updatedAt?: string;
    recentOperation?: StackOperation;
}
/** @internal */
export interface StackResource {
    id: string;
    name: string;
    type: string;
    externalId: string;
    displayName?: string;
    parameters?: Record<string, unknown>;
}
/** @internal */
export interface StackFunctionResource extends StackResource {
    parameters: {
        src: string;
        memory?: number;
        timeout?: number;
        env?: Record<string, string>;
        event?: GroqRule;
    };
}
/** @internal */
export interface StackOperation {
    id: string;
    status: string;
    createdAt?: string;
    completedAt?: string;
}
/** @internal */
export interface StackPayload {
    name: string;
    projectId: string;
    document: LocalBlueprint;
    useProjectBasedId?: boolean;
}
/** @internal */
export interface BuildPayloadOptions {
    data?: string;
    file?: string;
    timeout?: number;
}
/** @internal */
export interface InvokePayloadOptions {
    payload?: Record<string, unknown>;
    timeout?: number;
}
/** @internal */
export interface InvokeContextOptions {
    clientOptions: {
        apiVersion?: string;
        dataset?: string;
        projectId?: string;
    };
}
/** @internal */
export interface InvokeExecutionOptions {
    forceColor?: boolean;
    timeout?: number;
}
/** @internal */
export interface InvocationResponse {
    error: undefined | unknown;
    json: object | undefined;
    logs: string | undefined;
    timings?: Record<string, number>;
}
/** @internal */
export interface BlueprintLog {
    timestamp: string;
    message: string;
    stackId: string;
    level: string;
    metadata?: Record<string, unknown>;
}
/** @internal */
export interface FunctionLog {
    time: string;
    requestId: string;
    level: string;
    message: string;
}
/** @internal */
export declare enum BlueprintParserErrorType {
    InvalidProperty = "invalid_property",
    InvalidVersion = "invalid_version",
    InvalidType = "invalid_type",
    MissingRequiredProperty = "missing_required_property",
    DuplicateName = "duplicate_name",
    InvalidFormat = "invalid_format",
    InvalidValue = "invalid_value",
    JsonValidationError = "json_validation_error",
    InvalidInput = "invalid_input",
    MissingParameter = "missing_parameter"
}
/** @internal */
export interface BlueprintParserError {
    message: string;
    type: BlueprintParserErrorType;
}
