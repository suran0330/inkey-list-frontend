import {existsSync, statSync} from 'node:fs'
import {isAbsolute, join} from 'node:path'
import process from 'node:process'

export function getFunctionSource(src) {
  const pathToCheck = isAbsolute(src) ? src : join(process.cwd(), src)

  if (statSync(pathToCheck).isDirectory()) {
    const indexPath = join(pathToCheck, 'index.js')
    if (!existsSync(indexPath)) {
      throw Error(`Function directory ${pathToCheck} has no index.js`)
    }
    return `file://${indexPath}`
  }
  return `file://${pathToCheck}`
}

// Start when payload data arrives from parent process
process.on('message', async (data) => {
  let jsonData = null
  try {
    jsonData = JSON.parse(data)
  } catch {
    // invalid payload so return early
    return
  }
  const {srcPath, payload} = jsonData
  const {context, ...event} = payload
  let logs = ''
  let json = null

  // Import the function code
  const entry = await import(getFunctionSource(srcPath))

  let eventHandler = null

  if (typeof entry.handler === 'function') {
    eventHandler = entry.handler
  } else if (typeof entry.default === 'function') {
    eventHandler = entry.default
  }

  if (!eventHandler) {
    throw new Error(
      'No valid handler found. Please provide a default export or a named export, "handler"',
    )
  }

  // backup stdout
  const originalStdoutWrite = process.stdout.write.bind(process.stdout)

  // redirect stdout to a buffer
  process.stdout.write = (chunk) => {
    if (typeof chunk === 'string') {
      logs += chunk
    }
    return true
  }

  json = await eventHandler({context, event})

  // revert changes to stdout
  process.stdout.write = originalStdoutWrite

  // Send result of handler code to parent process.
  process.send(JSON.stringify({json, logs}))
})
